<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\InvalidOrder;
use \ccxt\DDoSProtection;

class bitrue extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'bitrue',
            'name' => 'Bitrue',
            'countries' => array( 'SG' ), // Singapore, Malta
            'rateLimit' => 1000,
            'certified' => false,
            'version' => 'v1',
            // new metainfo interface
            'has' => array(
                'cancelAllOrders' => false,
                'cancelOrder' => true,
                'CORS' => null,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchBidsAsks' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDeposits' => true,
                'fetchFundingFees' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => 'emulated',
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => true,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '1d' => '1d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/139516488-243a830d-05dd-446b-91c6-c1f18fe30c63.jpg',
                'api' => array(
                    'v1' => 'https://www.bitrue.com/api/v1',
                    'v2' => 'https://www.bitrue.com/api/v2',
                    'kline' => 'https://www.bitrue.com/kline-api',
                ),
                'www' => 'https://www.bitrue.com',
                'referral' => 'https://www.bitrue.com/activity/task/task-landing?inviteCode=EZWETQE&cn=900000',
                'doc' => array(
                    'https://github.com/Bitrue-exchange/bitrue-official-api-docs',
                ),
                'fees' => 'https://bitrue.zendesk.com/hc/en-001/articles/4405479952537',
            ),
            'api' => array(
                'kline' => array(
                    'public' => array(
                        'get' => array(
                            'public.json' => 1,
                            'public{currency}.json' => 1,
                        ),
                    ),
                ),
                'v1' => array(
                    'public' => array(
                        'get' => array(
                            'ping' => 1,
                            'time' => 1,
                            'exchangeInfo' => 1,
                            'depth' => array( 'cost' => 1, 'byLimit' => array( array( 100, 1 ), array( 500, 5 ), array( 1000, 10 ) ) ),
                            'trades' => 1,
                            'historicalTrades' => 5,
                            'aggTrades' => 1,
                            'ticker/24hr' => array( 'cost' => 1, 'noSymbol' => 40 ),
                            'ticker/price' => array( 'cost' => 1, 'noSymbol' => 2 ),
                            'ticker/bookTicker' => array( 'cost' => 1, 'noSymbol' => 2 ),
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'order' => 1,
                            'openOrders' => 1,
                            'allOrders' => 5,
                            'account' => 5,
                            'myTrades' => array( 'cost' => 5, 'noSymbol' => 40 ),
                            'etf/net-value/{symbol}' => 1,
                            'withdraw/history' => 1,
                            'deposit/history' => 1,
                        ),
                        'post' => array(
                            'order' => 4,
                            'withdraw/commit' => 1,
                        ),
                        'delete' => array(
                            'order' => 1,
                        ),
                    ),
                ),
                'v2' => array(
                    'private' => array(
                        'get' => array(
                            'myTrades' => 5,
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.0098'),
                    'maker' => $this->parse_number('0.0098'),
                ),
                'future' => array(
                    'trading' => array(
                        'feeSide' => 'quote',
                        'tierBased' => true,
                        'percentage' => true,
                        'taker' => $this->parse_number('0.000400'),
                        'maker' => $this->parse_number('0.000200'),
                        'tiers' => array(
                            'taker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000400') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000400') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000350') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.000320') ),
                                array( $this->parse_number('22500'), $this->parse_number('0.000300') ),
                                array( $this->parse_number('50000'), $this->parse_number('0.000270') ),
                                array( $this->parse_number('100000'), $this->parse_number('0.000250') ),
                                array( $this->parse_number('200000'), $this->parse_number('0.000220') ),
                                array( $this->parse_number('400000'), $this->parse_number('0.000200') ),
                                array( $this->parse_number('750000'), $this->parse_number('0.000170') ),
                            ),
                            'maker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000200') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000160') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000140') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.000120') ),
                                array( $this->parse_number('22500'), $this->parse_number('0.000100') ),
                                array( $this->parse_number('50000'), $this->parse_number('0.000080') ),
                                array( $this->parse_number('100000'), $this->parse_number('0.000060') ),
                                array( $this->parse_number('200000'), $this->parse_number('0.000040') ),
                                array( $this->parse_number('400000'), $this->parse_number('0.000020') ),
                                array( $this->parse_number('750000'), $this->parse_number('0') ),
                            ),
                        ),
                    ),
                ),
                'delivery' => array(
                    'trading' => array(
                        'feeSide' => 'base',
                        'tierBased' => true,
                        'percentage' => true,
                        'taker' => $this->parse_number('0.000500'),
                        'maker' => $this->parse_number('0.000100'),
                        'tiers' => array(
                            'taker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000500') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000450') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000400') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.000300') ),
                                array( $this->parse_number('22500'), $this->parse_number('0.000250') ),
                                array( $this->parse_number('50000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('100000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('200000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('400000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('750000'), $this->parse_number('0.000240') ),
                            ),
                            'maker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000100') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000080') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000050') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.0000030') ),
                                array( $this->parse_number('22500'), $this->parse_number('0') ),
                                array( $this->parse_number('50000'), $this->parse_number('-0.000050') ),
                                array( $this->parse_number('100000'), $this->parse_number('-0.000060') ),
                                array( $this->parse_number('200000'), $this->parse_number('-0.000070') ),
                                array( $this->parse_number('400000'), $this->parse_number('-0.000080') ),
                                array( $this->parse_number('750000'), $this->parse_number('-0.000090') ),
                            ),
                        ),
                    ),
                ),
            ),
            // exchange-specific options
            'options' => array(
                // 'fetchTradesMethod' => 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades
                'hasAlreadyAuthenticatedSuccessfully' => false,
                'recvWindow' => 5 * 1000, // 5 sec, binance default
                'timeDifference' => 0, // the difference between system clock and Binance clock
                'adjustForTimeDifference' => false, // controls the adjustment logic upon instantiation
                'parseOrderToPrecision' => false, // force amounts and costs in parseOrder to precision
                'newOrderRespType' => array(
                    'market' => 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                    'limit' => 'FULL', // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)
                ),
                'networks' => array(
                    'SPL' => 'SOLANA',
                    'SOL' => 'SOLANA',
                    'DOGE' => 'dogecoin',
                    'ADA' => 'Cardano',
                ),
            ),
            // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2
            'exceptions' => array(
                'exact' => array(
                    'System is under maintenance.' => '\\ccxt\\OnMaintenance', // array("code":1,"msg":"System is under maintenance.")
                    'System abnormality' => '\\ccxt\\ExchangeError', // array("code":-1000,"msg":"System abnormality")
                    'You are not authorized to execute this request.' => '\\ccxt\\PermissionDenied', // array("msg":"You are not authorized to execute this request.")
                    'API key does not exist' => '\\ccxt\\AuthenticationError',
                    'Order would trigger immediately.' => '\\ccxt\\OrderImmediatelyFillable',
                    'Stop price would trigger immediately.' => '\\ccxt\\OrderImmediatelyFillable', // array("code":-2010,"msg":"Stop price would trigger immediately.")
                    'Order would immediately match and take.' => '\\ccxt\\OrderImmediatelyFillable', // array("code":-2010,"msg":"Order would immediately match and take.")
                    'Account has insufficient balance for requested action.' => '\\ccxt\\InsufficientFunds',
                    'Rest API trading is not enabled.' => '\\ccxt\\ExchangeNotAvailable',
                    "You don't have permission." => '\\ccxt\\PermissionDenied', // array("msg":"You don't have permission.","success":false)
                    'Market is closed.' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1013,"msg":"Market is closed.")
                    'Too many requests. Please try again later.' => '\\ccxt\\DDoSProtection', // array("msg":"Too many requests. Please try again later.","success":false)
                    '-1000' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1000,"msg":"An unknown error occured while processing the request.")
                    '-1001' => '\\ccxt\\ExchangeNotAvailable', // 'Internal error; unable to process your request. Please try again.'
                    '-1002' => '\\ccxt\\AuthenticationError', // 'You are not authorized to execute this request.'
                    '-1003' => '\\ccxt\\RateLimitExceeded', // array("code":-1003,"msg":"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API.")
                    '-1013' => '\\ccxt\\InvalidOrder', // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL
                    '-1015' => '\\ccxt\\RateLimitExceeded', // 'Too many new orders; current limit is %s orders per %s.'
                    '-1016' => '\\ccxt\\ExchangeNotAvailable', // 'This service is no longer available.',
                    '-1020' => '\\ccxt\\BadRequest', // 'This operation is not supported.'
                    '-1021' => '\\ccxt\\InvalidNonce', // 'your time is ahead of server'
                    '-1022' => '\\ccxt\\AuthenticationError', // array("code":-1022,"msg":"Signature for this request is not valid.")
                    '-1100' => '\\ccxt\\BadRequest', // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'
                    '-1101' => '\\ccxt\\BadRequest', // Too many parameters; expected %s and received %s.
                    '-1102' => '\\ccxt\\BadRequest', // Param %s or %s must be sent, but both were empty
                    '-1103' => '\\ccxt\\BadRequest', // An unknown parameter was sent.
                    '-1104' => '\\ccxt\\BadRequest', // Not all sent parameters were read, read 8 parameters but was sent 9
                    '-1105' => '\\ccxt\\BadRequest', // Parameter %s was empty.
                    '-1106' => '\\ccxt\\BadRequest', // Parameter %s sent when not required.
                    '-1111' => '\\ccxt\\BadRequest', // Precision is over the maximum defined for this asset.
                    '-1112' => '\\ccxt\\InvalidOrder', // No orders on book for symbol.
                    '-1114' => '\\ccxt\\BadRequest', // TimeInForce parameter sent when not required.
                    '-1115' => '\\ccxt\\BadRequest', // Invalid timeInForce.
                    '-1116' => '\\ccxt\\BadRequest', // Invalid orderType.
                    '-1117' => '\\ccxt\\BadRequest', // Invalid side.
                    '-1118' => '\\ccxt\\BadRequest', // New client order ID was empty.
                    '-1119' => '\\ccxt\\BadRequest', // Original client order ID was empty.
                    '-1120' => '\\ccxt\\BadRequest', // Invalid interval.
                    '-1121' => '\\ccxt\\BadSymbol', // Invalid symbol.
                    '-1125' => '\\ccxt\\AuthenticationError', // This listenKey does not exist.
                    '-1127' => '\\ccxt\\BadRequest', // More than %s hours between startTime and endTime.
                    '-1128' => '\\ccxt\\BadRequest', // array("code":-1128,"msg":"Combination of optional parameters invalid.")
                    '-1130' => '\\ccxt\\BadRequest', // Data sent for paramter %s is not valid.
                    '-1131' => '\\ccxt\\BadRequest', // recvWindow must be less than 60000
                    '-2008' => '\\ccxt\\AuthenticationError', // array("code":-2008,"msg":"Invalid Api-Key ID.")
                    '-2010' => '\\ccxt\\ExchangeError', // generic error code for createOrder -> 'Account has insufficient balance for requested action.', array("code":-2010,"msg":"Rest API trading is not enabled."), etc...
                    '-2011' => '\\ccxt\\OrderNotFound', // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'
                    '-2013' => '\\ccxt\\OrderNotFound', // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'
                    '-2014' => '\\ccxt\\AuthenticationError', // array( "code":-2014, "msg" => "API-key format invalid." )
                    '-2015' => '\\ccxt\\AuthenticationError', // "Invalid API-key, IP, or permissions for action."
                    '-2019' => '\\ccxt\\InsufficientFunds', // array("code":-2019,"msg":"Margin is insufficient.")
                    '-3005' => '\\ccxt\\InsufficientFunds', // array("code":-3005,"msg":"Transferring out not allowed. Transfer out amount exceeds max amount.")
                    '-3006' => '\\ccxt\\InsufficientFunds', // array("code":-3006,"msg":"Your borrow amount has exceed maximum borrow amount.")
                    '-3008' => '\\ccxt\\InsufficientFunds', // array("code":-3008,"msg":"Borrow not allowed. Your borrow amount has exceed maximum borrow amount.")
                    '-3010' => '\\ccxt\\ExchangeError', // array("code":-3010,"msg":"Repay not allowed. Repay amount exceeds borrow amount.")
                    '-3015' => '\\ccxt\\ExchangeError', // array("code":-3015,"msg":"Repay amount exceeds borrow amount.")
                    '-3022' => '\\ccxt\\AccountSuspended', // You account's trading is banned.
                    '-4028' => '\\ccxt\\BadRequest', // array("code":-4028,"msg":"Leverage 100 is not valid")
                    '-3020' => '\\ccxt\\InsufficientFunds', // array("code":-3020,"msg":"Transfer out amount exceeds max amount.")
                    '-3041' => '\\ccxt\\InsufficientFunds', // array("code":-3041,"msg":"Balance is not enough")
                    '-5013' => '\\ccxt\\InsufficientFunds', // Asset transfer failed => insufficient balance"
                    '-11008' => '\\ccxt\\InsufficientFunds', // array("code":-11008,"msg":"Exceeding the account's maximum borrowable limit.")
                    '-4051' => '\\ccxt\\InsufficientFunds', // array("code":-4051,"msg":"Isolated balance insufficient.")
                ),
                'broad' => array(
                    'has no operation privilege' => '\\ccxt\\PermissionDenied',
                    'MAX_POSITION' => '\\ccxt\\InvalidOrder', // array("code":-2010,"msg":"Filter failure => MAX_POSITION")
                ),
            ),
        ));
    }

    public function cost_to_precision($symbol, $cost) {
        return $this->decimal_to_precision($cost, TRUNCATE, $this->markets[$symbol]['precision']['quote'], $this->precisionMode, $this->paddingMode);
    }

    public function currency_to_precision($currency, $fee) {
        // info is available in currencies only if the user has configured his api keys
        if ($this->safe_value($this->currencies[$currency], 'precision') !== null) {
            return $this->decimal_to_precision($fee, TRUNCATE, $this->currencies[$currency]['precision'], $this->precisionMode, $this->paddingMode);
        } else {
            return $this->number_to_string($fee);
        }
    }

    public function nonce() {
        return $this->milliseconds() - $this->options['timeDifference'];
    }

    public function fetch_status($params = array ()) {
        $response = $this->v1PublicGetPing ($params);
        $keys = is_array($response) ? array_keys($response) : array();
        $keysLength = is_array($keys) ? count($keys) : 0;
        $formattedStatus = $keysLength ? 'maintenance' : 'ok';
        $this->status = array_merge($this->status, array(
            'status' => $formattedStatus,
            'updated' => $this->milliseconds(),
        ));
        return $this->status;
    }

    public function fetch_time($params = array ()) {
        $response = $this->v1PublicGetTime ($params);
        //
        //     {
        //         "serverTime":1635467280514
        //     }
        //
        return $this->safe_integer($response, 'serverTime');
    }

    public function load_time_difference($params = array ()) {
        $serverTime = $this->fetch_time($params);
        $after = $this->milliseconds();
        $this->options['timeDifference'] = $after - $serverTime;
        return $this->options['timeDifference'];
    }

    public function safe_network($networkId) {
        $uppercaseNetworkId = strtoupper($networkId);
        $networksById = array(
            'Aeternity' => 'Aeternity',
            'AION' => 'AION',
            'Algorand' => 'Algorand',
            'ASK' => 'ASK',
            'ATOM' => 'ATOM',
            'AVAX C-Chain' => 'AVAX C-Chain',
            'bch' => 'bch',
            'BCH' => 'BCH',
            'BEP2' => 'BEP2',
            'BEP20' => 'BEP20',
            'Bitcoin' => 'Bitcoin',
            'BRP20' => 'BRP20',
            'Cardano' => 'ADA',
            'CasinoCoin' => 'CasinoCoin',
            'CasinoCoin XRPL' => 'CasinoCoin XRPL',
            'Contentos' => 'Contentos',
            'Dash' => 'Dash',
            'Decoin' => 'Decoin',
            'DeFiChain' => 'DeFiChain',
            'DGB' => 'DGB',
            'Divi' => 'Divi',
            'dogecoin' => 'DOGE',
            'EOS' => 'EOS',
            'ERC20' => 'ERC20',
            'ETC' => 'ETC',
            'Filecoin' => 'Filecoin',
            'FREETON' => 'FREETON',
            'HBAR' => 'HBAR',
            'Hedera Hashgraph' => 'Hedera Hashgraph',
            'HRC20' => 'HRC20',
            'ICON' => 'ICON',
            'ICP' => 'ICP',
            'Ignis' => 'Ignis',
            'Internet Computer' => 'Internet Computer',
            'IOTA' => 'IOTA',
            'KAVA' => 'KAVA',
            'KSM' => 'KSM',
            'LiteCoin' => 'LiteCoin',
            'Luna' => 'Luna',
            'MATIC' => 'MATIC',
            'Mobile Coin' => 'Mobile Coin',
            'MonaCoin' => 'MonaCoin',
            'Monero' => 'Monero',
            'NEM' => 'NEM',
            'NEP5' => 'NEP5',
            'OMNI' => 'OMNI',
            'PAC' => 'PAC',
            'Polkadot' => 'Polkadot',
            'Ravencoin' => 'Ravencoin',
            'Safex' => 'Safex',
            'SOLANA' => 'SOL',
            'Songbird' => 'Songbird',
            'Stellar Lumens' => 'Stellar Lumens',
            'Symbol' => 'Symbol',
            'Tezos' => 'XTZ',
            'theta' => 'theta',
            'THETA' => 'THETA',
            'TRC20' => 'TRC20',
            'VeChain' => 'VeChain',
            'VECHAIN' => 'VECHAIN',
            'Wanchain' => 'Wanchain',
            'XinFin Network' => 'XinFin Network',
            'XRP' => 'XRP',
            'XRPL' => 'XRPL',
            'ZIL' => 'ZIL',
        );
        return $this->safe_string_2($networksById, $networkId, $uppercaseNetworkId, $networkId);
    }

    public function fetch_currencies($params = array ()) {
        $response = $this->v1PublicGetExchangeInfo ($params);
        //
        //     {
        //         "timezone":"CTT",
        //         "serverTime":1635464889117,
        //         "rateLimits":array(
        //             array("rateLimitType":"REQUESTS_WEIGHT","interval":"MINUTES","limit":6000),
        //             array("rateLimitType":"ORDERS","interval":"SECONDS","limit":150),
        //             array("rateLimitType":"ORDERS","interval":"DAYS","limit":288000),
        //         ),
        //         "exchangeFilters":array(),
        //         "symbols":[
        //             array(
        //                 "symbol":"SHABTC",
        //                 "status":"TRADING",
        //                 "baseAsset":"sha",
        //                 "baseAssetPrecision":0,
        //                 "quoteAsset":"btc",
        //                 "quotePrecision":10,
        //                 "orderTypes":["MARKET","LIMIT"],
        //                 "icebergAllowed":false,
        //                 "filters":array(
        //                     array("filterType":"PRICE_FILTER","minPrice":"0.00000001349","maxPrice":"0.00000017537","priceScale":10),
        //                     array("filterType":"LOT_SIZE","minQty":"1.0","minVal":"0.00020","maxQty":"1000000000","volumeScale":0),
        //                 ),
        //                 "defaultPrice":"0.0000006100",
        //             ),
        //         ],
        //         "coins":[
        //             array(
        //                 "coin":"sbr",
        //                 "coinFulName":"Saber",
        //                 "enableWithdraw":true,
        //                 "enableDeposit":true,
        //                 "chains":["SOLANA"],
        //                 "withdrawFee":"2.0",
        //                 "minWithdraw":"5.0",
        //                 "maxWithdraw":"1000000000000000",
        //             ),
        //         ],
        //     }
        //
        $result = array();
        $coins = $this->safe_value($response, 'coins', array());
        for ($i = 0; $i < count($coins); $i++) {
            $currency = $coins[$i];
            $id = $this->safe_string($currency, 'coin');
            $name = $this->safe_string($currency, 'coinFulName');
            $code = $this->safe_currency_code($id);
            $enableDeposit = $this->safe_value($currency, 'enableDeposit');
            $enableWithdraw = $this->safe_value($currency, 'enableWithdraw');
            $precision = null;
            $networkIds = $this->safe_value($currency, 'chains', array());
            $networks = array();
            for ($j = 0; $j < count($networkIds); $j++) {
                $networkId = $networkIds[$j];
                $network = $this->safe_network($networkId);
                $networks[$network] = array(
                    'info' => $networkId,
                    'id' => $networkId,
                    'network' => $network,
                    'active' => null,
                    'fee' => null,
                    'precision' => null,
                    'limits' => array(
                        'withdraw' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                );
            }
            $active = ($enableWithdraw && $enableDeposit);
            $result[$code] = array(
                'id' => $id,
                'name' => $name,
                'code' => $code,
                'precision' => $precision,
                'info' => $currency,
                'active' => $active,
                'networks' => $networks,
                'fee' => $this->safe_number($currency, 'withdrawFee'),
                // 'fees' => fees,
                'limits' => array(
                    'withdraw' => array(
                        'min' => $this->safe_number($currency, 'minWithdraw'),
                        'max' => $this->safe_number($currency, 'maxWithdraw'),
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        $response = $this->v1PublicGetExchangeInfo ($params);
        //
        //     {
        //         "timezone":"CTT",
        //         "serverTime":1635464889117,
        //         "rateLimits":array(
        //             array("rateLimitType":"REQUESTS_WEIGHT","interval":"MINUTES","limit":6000),
        //             array("rateLimitType":"ORDERS","interval":"SECONDS","limit":150),
        //             array("rateLimitType":"ORDERS","interval":"DAYS","limit":288000),
        //         ),
        //         "exchangeFilters":array(),
        //         "symbols":[
        //             array(
        //                 "symbol":"SHABTC",
        //                 "status":"TRADING",
        //                 "baseAsset":"sha",
        //                 "baseAssetPrecision":0,
        //                 "quoteAsset":"btc",
        //                 "quotePrecision":10,
        //                 "orderTypes":["MARKET","LIMIT"],
        //                 "icebergAllowed":false,
        //                 "filters":array(
        //                     array("filterType":"PRICE_FILTER","minPrice":"0.00000001349","maxPrice":"0.00000017537","priceScale":10),
        //                     array("filterType":"LOT_SIZE","minQty":"1.0","minVal":"0.00020","maxQty":"1000000000","volumeScale":0),
        //                 ),
        //                 "defaultPrice":"0.0000006100",
        //             ),
        //         ],
        //         "coins":[
        //             array(
        //                 "coin":"sbr",
        //                 "coinFulName":"Saber",
        //                 "enableWithdraw":true,
        //                 "enableDeposit":true,
        //                 "chains":["SOLANA"],
        //                 "withdrawFee":"2.0",
        //                 "minWithdraw":"5.0",
        //                 "maxWithdraw":"1000000000000000",
        //             ),
        //         ],
        //     }
        //
        if ($this->options['adjustForTimeDifference']) {
            $this->load_time_difference();
        }
        $markets = $this->safe_value($response, 'symbols', array());
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'symbol');
            $lowercaseId = $this->safe_string_lower($market, 'symbol');
            $baseId = $this->safe_string($market, 'baseAsset');
            $quoteId = $this->safe_string($market, 'quoteAsset');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $filters = $this->safe_value($market, 'filters', array());
            $filtersByType = $this->index_by($filters, 'filterType');
            $precision = array(
                'base' => $this->safe_integer($market, 'baseAssetPrecision'),
                'quote' => $this->safe_integer($market, 'quotePrecision'),
                'amount' => $this->safe_integer($market, 'quantityPrecision'),
                'price' => $this->safe_integer($market, 'pricePrecision'),
            );
            $status = $this->safe_string($market, 'status');
            $active = ($status === 'TRADING');
            $entry = array(
                'id' => $id,
                'lowercaseId' => $lowercaseId,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'info' => $market,
                'spot' => true,
                'type' => 'spot',
                'margin' => false,
                'future' => false,
                'delivery' => false,
                'linear' => false,
                'inverse' => false,
                'expiry' => null,
                'expiryDatetime' => null,
                'active' => $active,
                'precision' => $precision,
                'contractSize' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
            if (is_array($filtersByType) && array_key_exists('PRICE_FILTER', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'PRICE_FILTER', array());
                $entry['limits']['price'] = array(
                    'min' => $this->safe_number($filter, 'minPrice'),
                    'max' => $this->safe_number($filter, 'maxPrice'),
                );
                $entry['precision']['price'] = $this->safe_integer($filter, 'priceScale');
            }
            if (is_array($filtersByType) && array_key_exists('LOT_SIZE', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'LOT_SIZE', array());
                $entry['precision']['amount'] = $this->safe_integer($filter, 'volumeScale');
                $entry['limits']['amount'] = array(
                    'min' => $this->safe_number($filter, 'minQty'),
                    'max' => $this->safe_number($filter, 'maxQty'),
                );
                $entry['limits']['cost']['min'] = $this->safe_number($filter, 'minVal');
            }
            $result[] = $entry;
        }
        return $result;
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $response = $this->v1PrivateGetAccount ($params);
        //
        //     {
        //         "makerCommission":0,
        //         "takerCommission":0,
        //         "buyerCommission":0,
        //         "sellerCommission":0,
        //         "updateTime":null,
        //         "balances":array(
        //             array("asset":"sbr","free":"0","locked":"0"),
        //             array("asset":"ksm","free":"0","locked":"0"),
        //             array("asset":"neo3s","free":"0","locked":"0"),
        //         ),
        //         "canTrade":false,
        //         "canWithdraw":false,
        //         "canDeposit":false
        //     }
        //
        $result = array(
            'info' => $response,
        );
        $timestamp = $this->safe_integer($response, 'updateTime');
        $balances = $this->safe_value_2($response, 'balances', array());
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'free');
            $account['used'] = $this->safe_string($balance, 'locked');
            $result[$code] = $account;
        }
        $result['timestamp'] = $timestamp;
        $result['datetime'] = $this->iso8601($timestamp);
        return $this->safe_balance($result);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000, see https://github.com/Bitrue-exchange/bitrue-official-api-docs#order-book
        }
        $response = $this->v1PublicGetDepth (array_merge($request, $params));
        //
        //     {
        //         "lastUpdateId":1635474910177,
        //         "bids":[
        //             ["61436.84","0.05",array()],
        //             ["61435.77","0.0124",array()],
        //             ["61434.88","0.012",array()],
        //         ],
        //         "asks":[
        //             ["61452.46","0.0001",array()],
        //             ["61452.47","0.0597",array()],
        //             ["61452.76","0.0713",array()],
        //         ]
        //     }
        //
        $orderbook = $this->parse_order_book($response, $symbol);
        $orderbook['nonce'] = $this->safe_integer($response, 'lastUpdateId');
        return $orderbook;
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // fetchTicker
        //
        //     {
        //         "id":397945892,
        //         "last":"1.143411",
        //         "lowestAsk":"1.144223",
        //         "highestBid":"1.141696",
        //         "percentChange":"-0.001432",
        //         "baseVolume":"338287",
        //         "quoteVolume":"415013.244366",
        //         "isFrozen":"0",
        //         "high24hr":"1.370087",
        //         "low24hr":"1.370087",
        //     }
        //
        $symbol = $this->safe_symbol(null, $market);
        $last = $this->safe_number($ticker, 'last');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $this->safe_number($ticker, 'high24hr'),
            'low' => $this->safe_number($ticker, 'low24hr'),
            'bid' => $this->safe_number($ticker, 'highestBid'),
            'bidVolume' => null,
            'ask' => $this->safe_number($ticker, 'lowestAsk'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->safe_number($ticker, 'percentChange'),
            'average' => null,
            'baseVolume' => $this->safe_number($ticker, 'baseVolume'),
            'quoteVolume' => $this->safe_number($ticker, 'quoteVolume'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $uppercaseBaseId = $this->safe_string_upper($market, 'baseId');
        $uppercaseQuoteId = $this->safe_string_upper($market, 'quoteId');
        $request = array(
            'currency' => $uppercaseQuoteId,
            'command' => 'returnTicker',
        );
        $response = $this->klinePublicGetPublicCurrencyJson (array_merge($request, $params));
        //
        //     {
        //         "code":"200",
        //         "msg":"success",
        //         "data":{
        //             "DODO3S_USDT":{
        //                 "id":397945892,
        //                 "last":"1.143411",
        //                 "lowestAsk":"1.144223",
        //                 "highestBid":"1.141696",
        //                 "percentChange":"-0.001432",
        //                 "baseVolume":"338287",
        //                 "quoteVolume":"415013.244366",
        //                 "isFrozen":"0",
        //                 "high24hr":"1.370087",
        //                 "low24hr":"1.370087"
        //             }
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $id = $uppercaseBaseId . '_' . $uppercaseQuoteId;
        $ticker = $this->safe_value($data, $id);
        if ($ticker === null) {
            throw new ExchangeError($this->id . ' fetchTicker() could not find the $ticker for ' . $market['symbol']);
        }
        return $this->parse_ticker($ticker, $market);
    }

    public function fetch_bids_asks($symbols = null, $params = array ()) {
        $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'fetchBidsAsks', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $method = null;
        if ($type === 'future') {
            $method = 'fapiPublicGetTickerBookTicker';
        } else if ($type === 'delivery') {
            $method = 'dapiPublicGetTickerBookTicker';
        } else {
            $method = 'publicGetTickerBookTicker';
        }
        $response = $this->$method ($query);
        return $this->parse_tickers($response, $symbols);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'command' => 'returnTicker',
        );
        $response = $this->klinePublicGetPublicJson (array_merge($request, $params));
        //
        //     {
        //         "code":"200",
        //         "msg":"success",
        //         "data":{
        //             "DODO3S_USDT":{
        //                 "id":397945892,
        //                 "last":"1.143411",
        //                 "lowestAsk":"1.144223",
        //                 "highestBid":"1.141696",
        //                 "percentChange":"-0.001432",
        //                 "baseVolume":"338287",
        //                 "quoteVolume":"415013.244366",
        //                 "isFrozen":"0",
        //                 "high24hr":"1.370087",
        //                 "low24hr":"1.370087"
        //             }
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $ids = is_array($data) ? array_keys($data) : array();
        $result = array();
        for ($i = 0; $i < count($ids); $i++) {
            $id = $ids[$i];
            list($baseId, $quoteId) = explode('_', $id);
            $marketId = $baseId . $quoteId;
            $market = $this->safe_market($marketId);
            $rawTicker = $this->safe_value($data, $id);
            $ticker = $this->parse_ticker($rawTicker, $market);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $result;
    }

    public function parse_trade($trade, $market = null) {
        //
        // aggregate trades
        //
        //     {
        //         "a" => 26129,         // Aggregate tradeId
        //         "p" => "0.01633102",  // Price
        //         "q" => "4.70443515",  // Quantity
        //         "f" => 27781,         // First tradeId
        //         "l" => 27781,         // Last tradeId
        //         "T" => 1498793709153, // Timestamp
        //         "m" => true,          // Was the buyer the maker?
        //         "M" => true           // Was the $trade the best price match?
        //     }
        //
        // recent public trades and old public trades
        //
        //     {
        //         "id" => 28457,
        //         "price" => "4.00000100",
        //         "qty" => "12.00000000",
        //         "time" => 1499865549590,
        //         "isBuyerMaker" => true,
        //         "isBestMatch" => true
        //     }
        //
        // private trades
        //
        //     {
        //         "symbol":"USDCUSDT",
        //         "id":20725156,
        //         "orderId":2880918576,
        //         "origClientOrderId":null,
        //         "price":"0.9996000000000000",
        //         "qty":"100.0000000000000000",
        //         "commission":null,
        //         "commissionAssert":null,
        //         "time":1635558511000,
        //         "isBuyer":false,
        //         "isMaker":false,
        //         "isBestMatch":true
        //     }
        //
        $timestamp = $this->safe_integer_2($trade, 'T', 'time');
        $priceString = $this->safe_string_2($trade, 'p', 'price');
        $amountString = $this->safe_string_2($trade, 'q', 'qty');
        $marketId = $this->safe_string($trade, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $id = $this->safe_string_2($trade, 't', 'a');
        $id = $this->safe_string_2($trade, 'id', 'tradeId', $id);
        $side = null;
        $orderId = $this->safe_string($trade, 'orderId');
        if (is_array($trade) && array_key_exists('m', $trade)) {
            $side = $trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally
        } else if (is_array($trade) && array_key_exists('isBuyerMaker', $trade)) {
            $side = $trade['isBuyerMaker'] ? 'sell' : 'buy';
        } else if (is_array($trade) && array_key_exists('side', $trade)) {
            $side = $this->safe_string_lower($trade, 'side');
        } else {
            if (is_array($trade) && array_key_exists('isBuyer', $trade)) {
                $side = $trade['isBuyer'] ? 'buy' : 'sell'; // this is a true $side
            }
        }
        $fee = null;
        if (is_array($trade) && array_key_exists('commission', $trade)) {
            $fee = array(
                'cost' => $this->safe_string($trade, 'commission'),
                'currency' => $this->safe_currency_code($this->safe_string($trade, 'commissionAsset')),
            );
        }
        $takerOrMaker = null;
        if (is_array($trade) && array_key_exists('isMaker', $trade)) {
            $takerOrMaker = $trade['isMaker'] ? 'maker' : 'taker';
        }
        if (is_array($trade) && array_key_exists('maker', $trade)) {
            $takerOrMaker = $trade['maker'] ? 'maker' : 'taker';
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            // 'limit' => 100, // default 100, max = 1000
        );
        $method = $this->safe_string($this->options, 'fetchTradesMethod', 'v1PublicGetAggTrades');
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000
        }
        //
        // Caveats:
        // - default $limit (500) applies only if no other parameters set, trades up
        //   to the maximum $limit may be returned to satisfy other parameters
        // - if both $limit and time window is set and time window contains more
        //   trades than the $limit then the last trades from the window are returned
        // - 'tradeId' accepted and returned by this $method is "aggregate" trade id
        //   which is different from actual trade id
        // - setting both fromId and time window results in error
        $response = $this->$method (array_merge($request, $params));
        //
        // aggregate trades
        //
        //     array(
        //         {
        //             "a" => 26129,         // Aggregate tradeId
        //             "p" => "0.01633102",  // Price
        //             "q" => "4.70443515",  // Quantity
        //             "f" => 27781,         // First tradeId
        //             "l" => 27781,         // Last tradeId
        //             "T" => 1498793709153, // Timestamp
        //             "m" => true,          // Was the buyer the maker?
        //             "M" => true           // Was the trade the best price match?
        //         }
        //     )
        //
        // recent public trades and historical public trades
        //
        //     array(
        //         {
        //             "id" => 28457,
        //             "price" => "4.00000100",
        //             "qty" => "12.00000000",
        //             "time" => 1499865549590,
        //             "isBuyerMaker" => true,
        //             "isBestMatch" => true
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELED' => 'canceled',
            'PENDING_CANCEL' => 'canceling', // currently unused
            'REJECTED' => 'rejected',
            'EXPIRED' => 'expired',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // createOrder
        //
        //     {
        //         "symbol":"USDCUSDT",
        //         "orderId":2878854881,
        //         "clientOrderId":"",
        //         "transactTime":1635551031276
        //     }
        //
        // fetchOpenOrders
        //
        //     {
        //         "symbol":"USDCUSDT",
        //         "orderId":"2878854881",
        //         "clientOrderId":"",
        //         "price":"1.1000000000000000",
        //         "origQty":"100.0000000000000000",
        //         "executedQty":"0.0000000000000000",
        //         "cummulativeQuoteQty":"0.0000000000000000",
        //         "status":"NEW",
        //         "timeInForce":"",
        //         "type":"LIMIT",
        //         "side":"SELL",
        //         "stopPrice":"",
        //         "icebergQty":"",
        //         "time":1635551031000,
        //         "updateTime":1635551031000,
        //         "isWorking":false
        //     }
        //
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $filled = $this->safe_string($order, 'executedQty');
        $timestamp = null;
        $lastTradeTimestamp = null;
        if (is_array($order) && array_key_exists('time', $order)) {
            $timestamp = $this->safe_integer($order, 'time');
        } else if (is_array($order) && array_key_exists('transactTime', $order)) {
            $timestamp = $this->safe_integer($order, 'transactTime');
        } else if (is_array($order) && array_key_exists('updateTime', $order)) {
            if ($status === 'open') {
                if (Precise::string_gt($filled, '0')) {
                    $lastTradeTimestamp = $this->safe_integer($order, 'updateTime');
                } else {
                    $timestamp = $this->safe_integer($order, 'updateTime');
                }
            }
        }
        $average = $this->safe_string($order, 'avgPrice');
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string($order, 'origQty');
        // - Spot/Margin $market => cummulativeQuoteQty
        // - Futures $market => cumQuote.
        //   Note this is not the actual $cost, since Binance futures uses leverage to calculate margins.
        $cost = $this->safe_string_2($order, 'cummulativeQuoteQty', 'cumQuote');
        $id = $this->safe_string($order, 'orderId');
        $type = $this->safe_string_lower($order, 'type');
        $side = $this->safe_string_lower($order, 'side');
        $fills = $this->safe_value($order, 'fills', array());
        $clientOrderId = $this->safe_string($order, 'clientOrderId');
        if ($clientOrderId === '') {
            $clientOrderId = null;
        }
        $timeInForce = $this->safe_string($order, 'timeInForce');
        $postOnly = ($type === 'limit_maker') || ($timeInForce === 'GTX');
        if ($type === 'limit_maker') {
            $type = 'limit';
        }
        $stopPriceString = $this->safe_string($order, 'stopPrice');
        $stopPrice = $this->parse_number($this->omit_zero($stopPriceString));
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'amount' => $amount,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => null,
            'trades' => $fills,
        ), $market);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $uppercaseType = strtoupper($type);
        $validOrderTypes = $this->safe_value($market['info'], 'orderTypes');
        if (!$this->in_array($uppercaseType, $validOrderTypes)) {
            throw new InvalidOrder($this->id . ' ' . $type . ' is not a valid order $type in $market ' . $symbol);
        }
        $request = array(
            'symbol' => $market['id'],
            'side' => strtoupper($side),
            'type' => $uppercaseType,
            // 'timeInForce' => '',
            'quantity' => $this->amount_to_precision($symbol, $amount),
            // 'price' => $this->price_to_precision($symbol, $price),
            // 'newClientOrderId' => $clientOrderId, // automatically generated if not sent
            // 'stopPrice' => $this->price_to_precision($symbol, 'stopPrice'),
            // 'icebergQty' => $this->amount_to_precision($symbol, icebergQty),
        );
        $clientOrderId = $this->safe_string_2($params, 'newClientOrderId', 'clientOrderId');
        if ($clientOrderId !== null) {
            $params = $this->omit($params, array( 'newClientOrderId', 'clientOrderId' ));
            $request['newClientOrderId'] = $clientOrderId;
        }
        if ($uppercaseType === 'LIMIT') {
            if ($price === null) {
                throw new InvalidOrder($this->id . ' createOrder() requires a $price argument');
            }
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $stopPrice = $this->safe_number($params, 'stopPrice');
        if ($stopPrice !== null) {
            $params = $this->omit($params, 'stopPrice');
            $request['stopPrice'] = $this->price_to_precision($symbol, $stopPrice);
        }
        $response = $this->v1PrivatePostOrder (array_merge($request, $params));
        //
        //     {
        //         "symbol":"USDCUSDT",
        //         "orderId":2878854881,
        //         "clientOrderId":"",
        //         "transactTime":1635551031276
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $clientOrderId = $this->safe_value_2($params, 'origClientOrderId', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['origClientOrderId'] = $clientOrderId;
        } else {
            $request['orderId'] = $id;
        }
        $query = $this->omit($params, array( 'type', 'clientOrderId', 'origClientOrderId' ));
        $response = $this->v1PrivateGetOrder (array_merge($request, $query));
        return $this->parse_order($response, $market);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            // 'orderId' => 123445, // long
            // 'startTime' => $since,
            // 'endTime' => $this->milliseconds(),
            // 'limit' => $limit, // default 100, max 1000
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000
        }
        $response = $this->v1PrivateGetAllOrders (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "symbol" => "LTCBTC",
        //             "orderId" => 1,
        //             "clientOrderId" => "myOrder1",
        //             "price" => "0.1",
        //             "origQty" => "1.0",
        //             "executedQty" => "0.0",
        //             "cummulativeQuoteQty" => "0.0",
        //             "status" => "NEW",
        //             "timeInForce" => "GTC",
        //             "type" => "LIMIT",
        //             "side" => "BUY",
        //             "stopPrice" => "0.0",
        //             "icebergQty" => "0.0",
        //             "time" => 1499827319559,
        //             "updateTime" => 1499827319559,
        //             "isWorking" => true
        //         }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrders requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->v1PrivateGetOpenOrders (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "symbol":"USDCUSDT",
        //             "orderId":"2878854881",
        //             "clientOrderId":"",
        //             "price":"1.1000000000000000",
        //             "origQty":"100.0000000000000000",
        //             "executedQty":"0.0000000000000000",
        //             "cummulativeQuoteQty":"0.0000000000000000",
        //             "status":"NEW",
        //             "timeInForce":"",
        //             "type":"LIMIT",
        //             "side":"SELL",
        //             "stopPrice":"",
        //             "icebergQty":"",
        //             "time":1635551031000,
        //             "updateTime":1635551031000,
        //             "isWorking":false
        //         }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $origClientOrderId = $this->safe_value_2($params, 'origClientOrderId', 'clientOrderId');
        $request = array(
            'symbol' => $market['id'],
            // 'orderId' => $id,
            // 'origClientOrderId' => $id,
            // 'newClientOrderId' => $id,
        );
        if ($origClientOrderId === null) {
            $request['orderId'] = $id;
        } else {
            $request['origClientOrderId'] = $origClientOrderId;
        }
        $query = $this->omit($params, array( 'type', 'origClientOrderId', 'clientOrderId' ));
        $response = $this->v1PrivateDeleteOrder (array_merge($request, $query));
        //
        //     {
        //         "symbol" => "LTCBTC",
        //         "origClientOrderId" => "myOrder1",
        //         "orderId" => 1,
        //         "clientOrderId" => "cancelMyOrder1"
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'symbol' => $market['id'],
            // 'startTime' => $since,
            // 'endTime' => $this->milliseconds(),
            // 'fromId' => 12345, // trade id to fetch from, most recent trades by default
            // 'limit' => $limit, // default 100, max 1000
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PrivateGetMyTrades (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "symbol":"USDCUSDT",
        //             "id":20725156,
        //             "orderId":2880918576,
        //             "origClientOrderId":null,
        //             "price":"0.9996000000000000",
        //             "qty":"100.0000000000000000",
        //             "commission":null,
        //             "commissionAssert":null,
        //             "time":1635558511000,
        //             "isBuyer":false,
        //             "isMaker":false,
        //             "isBestMatch":true
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchDeposits requires a $code argument');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['id'],
            'status' => 1, // 0 init, 1 finished, default 0
            // 'offset' => 0,
            // 'limit' => $limit, // default 10, max 1000
            // 'startTime' => $since,
            // 'endTime' => $this->milliseconds(),
        );
        if ($since !== null) {
            $request['startTime'] = $since;
            // $request['endTime'] = $this->sum($since, 7776000000);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PrivateGetDepositHistory (array_merge($request, $params));
        //
        //     {
        //         "code":200,
        //         "msg":"succ",
        //         "data":array(
        //             array(
        //                 "id":2659137,
        //                 "symbol":"USDC",
        //                 "amount":"200.0000000000000000",
        //                 "fee":"0.0E-15",
        //                 "createdAt":1635503169000,
        //                 "updatedAt":1635503202000,
        //                 "addressFrom":"0x2faf487a4414fe77e2327f0bf4ae2a264a776ad2",
        //                 "addressTo":"0x190ceccb1f8bfbec1749180f0ba8922b488d865b",
        //                 "txid":"0x9970aec41099ac385568859517308707bc7d716df8dabae7b52f5b17351c3ed0",
        //                 "confirmations":5,
        //                 "status":0,
        //                 "tagType":null,
        //             ),
        //             {
        //                 "id":2659137,
        //                 "symbol" => "XRP",
        //                 "amount" => "20.0000000000000000",
        //                 "fee" => "0.0E-15",
        //                 "createdAt" => 1544669393000,
        //                 "updatedAt" => 1544669413000,
        //                 "addressFrom" => "",
        //                 "addressTo" => "raLPjTYeGezfdb6crXZzcC8RkLBEwbBHJ5_18113641",
        //                 "txid" => "515B23E1F9864D3AF7F5B4C4FCBED784BAE861854FAB95F4031922B6AAEFC7AC",
        //                 "confirmations" => 7,
        //                 "status" => 1,
        //                 "tagType" => "Tag"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_transactions($data, $currency, $since, $limit);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchWithdrawals requires a $code argument');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['id'],
            'status' => 5, // 0 init, 5 finished, 6 canceled, default 0
            // 'offset' => 0,
            // 'limit' => $limit, // default 10, max 1000
            // 'startTime' => $since,
            // 'endTime' => $this->milliseconds(),
        );
        if ($since !== null) {
            $request['startTime'] = $since;
            // $request['endTime'] = $this->sum($since, 7776000000);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PrivateGetWithdrawHistory (array_merge($request, $params));
        //
        //     {
        //         "code" => 200,
        //         "msg" => "succ",
        //         "data" => {
        //             "msg" => null,
        //             "amount" => 1000,
        //             "fee" => 1,
        //             "ctime" => null,
        //             "coin" => "usdt_erc20",
        //             "addressTo" => "0x2edfae3878d7b6db70ce4abed177ab2636f60c83"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_transaction($data, $currency);
    }

    public function parse_transaction_status_by_type($status, $type = null) {
        $statusesByType = array(
            'deposit' => array(
                '0' => 'pending',
                '1' => 'ok',
            ),
            'withdrawal' => array(
                '0' => 'pending', // Email Sent
                '5' => 'ok', // Failure
                '6' => 'canceled',
            ),
        );
        $statuses = $this->safe_value($statusesByType, $type, array());
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        //     array(
        //         "symbol" => "XRP",
        //         "amount" => "261.3361000000000000",
        //         "fee" => "0.0E-15",
        //         "createdAt" => 1548816979000,
        //         "updatedAt" => 1548816999000,
        //         "addressFrom" => "",
        //         "addressTo" => "raLPjTYeGezfdb6crXZzcC8RkLBEwbBHJ5_18113641",
        //         "txid" => "86D6EB68A7A28938BCE06BD348F8C07DEF500C5F7FE92069EF8C0551CE0F2C7D",
        //         "confirmations" => 8,
        //         "status" => 1,
        //         "tagType" => "Tag"
        //     ),
        //     {
        //         "symbol" => "XRP",
        //         "amount" => "20.0000000000000000",
        //         "fee" => "0.0E-15",
        //         "createdAt" => 1544669393000,
        //         "updatedAt" => 1544669413000,
        //         "addressFrom" => "",
        //         "addressTo" => "raLPjTYeGezfdb6crXZzcC8RkLBEwbBHJ5_18113641",
        //         "txid" => "515B23E1F9864D3AF7F5B4C4FCBED784BAE861854FAB95F4031922B6AAEFC7AC",
        //         "confirmations" => 7,
        //         "status" => 1,
        //         "tagType" => "Tag"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "id" => 183745,
        //         "symbol" => "usdt_erc20",
        //         "amount" => "8.4000000000000000",
        //         "fee" => "1.6000000000000000",
        //         "payAmount" => "0.0000000000000000",
        //         "createdAt" => 1595336441000,
        //         "updatedAt" => 1595336576000,
        //         "addressFrom" => "",
        //         "addressTo" => "0x2edfae3878d7b6db70ce4abed177ab2636f60c83",
        //         "txid" => "",
        //         "confirmations" => 0,
        //         "status" => 6,
        //         "tagType" => null
        //     }
        //
        // withdraw
        //
        //     {
        //         "msg" => null,
        //         "amount" => 1000,
        //         "fee" => 1,
        //         "ctime" => null,
        //         "coin" => "usdt_erc20",
        //         "addressTo" => "0x2edfae3878d7b6db70ce4abed177ab2636f60c83"
        //     }
        //
        $id = $this->safe_string($transaction, 'id');
        $tagType = $this->safe_string($transaction, 'tagType');
        $addressTo = $this->safe_string($transaction, 'addressTo');
        if ($addressTo === '') {
            $addressTo = null;
        }
        $addressFrom = $this->safe_string($transaction, 'addressFrom');
        if ($addressFrom === '') {
            $addressFrom = null;
        }
        $tagTo = null;
        $tagFrom = null;
        if ($tagType !== null) {
            if ($addressTo !== null) {
                $parts = explode('_', $addressTo);
                $addressTo = $this->safe_string($parts, 0);
                $tagTo = $this->safe_string($parts, 1);
            }
            if ($addressFrom !== null) {
                $parts = explode('_', $addressFrom);
                $addressFrom = $this->safe_string($parts, 0);
                $tagFrom = $this->safe_string($parts, 1);
            }
        }
        $txid = $this->safe_string($transaction, 'txid');
        if ($txid === '') {
            $txid = null;
        }
        $timestamp = $this->safe_integer($transaction, 'createdAt');
        $updated = $this->safe_integer($transaction, 'updatedAt');
        $payAmount = (is_array($transaction) && array_key_exists('payAmount', $transaction));
        $ctime = (is_array($transaction) && array_key_exists('ctime', $transaction));
        $type = ($payAmount || $ctime) ? 'withdrawal' : 'deposit';
        $status = $this->parse_transaction_status_by_type($this->safe_string($transaction, 'status'), $type);
        $amount = $this->safe_number($transaction, 'amount');
        $network = null;
        $currencyId = $this->safe_string($transaction, 'symbol');
        if ($currencyId !== null) {
            $parts = explode('_', $currencyId);
            $currencyId = $this->safe_string($parts, 0);
            $networkId = $this->safe_string($parts, 1);
            if ($networkId !== null) {
                $network = strtoupper($networkId);
            }
        }
        $code = $this->safe_currency_code($currencyId, $currency);
        $feeCost = $this->safe_number($transaction, 'fee');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array( 'currency' => $code, 'cost' => $feeCost );
        }
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => $network,
            'address' => $addressTo,
            'addressTo' => $addressTo,
            'addressFrom' => $addressFrom,
            'tag' => $tagTo,
            'tagTo' => $tagTo,
            'tagFrom' => $tagFrom,
            'type' => $type,
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => $updated,
            'internal' => false,
            'fee' => $fee,
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        $chainName = $this->safe_string($params, 'chainName');
        if ($chainName === null) {
            $networks = $this->safe_value($currency, 'networks', array());
            $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
            $networkEntry = $this->safe_value($networks, $network, array());
            $chainName = $this->safe_string($networkEntry, 'id'); // handle ERC20>ETH alias
            if ($chainName === null) {
                throw new ArgumentsRequired($this->id . ' withdraw requires a $network parameter or a $chainName parameter');
            }
            $params = $this->omit($params, 'network');
        }
        $request = array(
            'coin' => strtoupper($currency['id']),
            'amount' => $amount,
            'addressTo' => $address,
            'chainName' => $chainName, // 'ERC20', 'TRC20', 'SOL'
            // 'addressMark' => '', // mark of $address
            // 'addrType' => '', // type of $address
            // 'tag' => $tag,
        );
        if ($tag !== null) {
            $request['tag'] = $tag;
        }
        $response = $this->v1PrivatePostWithdrawCommit (array_merge($request, $params));
        //     array( id => '9a67628b16ba4988ae20d329333f16bc' )
        return array(
            'info' => $response,
            'id' => $this->safe_string($response, 'id'),
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        list($version, $access) = $api;
        $url = $this->urls['api'][$version] . '/' . $this->implode_params($path, $params);
        $params = $this->omit($params, $this->extract_params($path));
        if ($access === 'private') {
            $this->check_required_credentials();
            $recvWindow = $this->safe_integer($this->options, 'recvWindow', 5000);
            $query = $this->urlencode(array_merge(array(
                'timestamp' => $this->nonce(),
                'recvWindow' => $recvWindow,
            ), $params));
            $signature = $this->hmac($this->encode($query), $this->encode($this->secret));
            $query .= '&' . 'signature=' . $signature;
            $headers = array(
                'X-MBX-APIKEY' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'DELETE')) {
                $url .= '?' . $query;
            } else {
                $body = $query;
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (($code === 418) || ($code === 429)) {
            throw new DDoSProtection($this->id . ' ' . (string) $code . ' ' . $reason . ' ' . $body);
        }
        // $error $response in a form => array( "code" => -1013, "msg" => "Invalid quantity." )
        // following block cointains legacy checks against $message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if ($code >= 400) {
            if (mb_strpos($body, 'Price * QTY is zero or less') !== false) {
                throw new InvalidOrder($this->id . ' order cost = amount * price is zero or less ' . $body);
            }
            if (mb_strpos($body, 'LOT_SIZE') !== false) {
                throw new InvalidOrder($this->id . ' order amount should be evenly divisible by lot size ' . $body);
            }
            if (mb_strpos($body, 'PRICE_FILTER') !== false) {
                throw new InvalidOrder($this->id . ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use $this->price_to_precision(symbol, amount) ' . $body);
            }
        }
        if ($response === null) {
            return; // fallback to default $error handler
        }
        // check $success value for wapi endpoints
        // $response in format array('msg' => 'The coin does not exist.', 'success' => true/false)
        $success = $this->safe_value($response, 'success', true);
        if (!$success) {
            $message = $this->safe_string($response, 'msg');
            $parsedMessage = null;
            if ($message !== null) {
                try {
                    $parsedMessage = json_decode($message, $as_associative_array = true);
                } catch (Exception $e) {
                    // do nothing
                    $parsedMessage = null;
                }
                if ($parsedMessage !== null) {
                    $response = $parsedMessage;
                }
            }
        }
        $message = $this->safe_string($response, 'msg');
        if ($message !== null) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $this->id . ' ' . $message);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $this->id . ' ' . $message);
        }
        // checks against $error codes
        $error = $this->safe_string($response, 'code');
        if ($error !== null) {
            // https://github.com/ccxt/ccxt/issues/6501
            // https://github.com/ccxt/ccxt/issues/7742
            if (($error === '200') || Precise::string_equals($error, '0')) {
                return;
            }
            // a workaround for array("code":-2015,"msg":"Invalid API-key, IP, or permissions for action.")
            // despite that their $message is very confusing, it is raised by Binance
            // on a temporary ban, the API key is valid, but disabled for a while
            if (($error === '-2015') && $this->options['hasAlreadyAuthenticatedSuccessfully']) {
                throw new DDoSProtection($this->id . ' temporary banned => ' . $body);
            }
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $error, $feedback);
            throw new ExchangeError($feedback);
        }
        if (!$success) {
            throw new ExchangeError($this->id . ' ' . $body);
        }
    }

    public function calculate_rate_limiter_cost($api, $method, $path, $params, $config = array (), $context = array ()) {
        if ((is_array($config) && array_key_exists('noSymbol', $config)) && !(is_array($params) && array_key_exists('symbol', $params))) {
            return $config['noSymbol'];
        } else if ((is_array($config) && array_key_exists('byLimit', $config)) && (is_array($params) && array_key_exists('limit', $params))) {
            $limit = $params['limit'];
            $byLimit = $config['byLimit'];
            for ($i = 0; $i < count($byLimit); $i++) {
                $entry = $byLimit[$i];
                if ($limit <= $entry[0]) {
                    return $entry[1];
                }
            }
        }
        return $this->safe_integer($config, 'cost', 1);
    }
}
