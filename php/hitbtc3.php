<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;

class hitbtc3 extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'hitbtc3',
            'name' => 'HitBTC',
            'countries' => array( 'HK' ),
            'rateLimit' => 100, // TODO => optimize https://api.hitbtc.com/#rate-limiting
            'version' => '3',
            'pro' => true,
            'has' => array(
                'cancelOrder' => true,
                'CORS' => false,
                'createOrder' => true,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTransactions' => true,
                'fetchWithdrawals' => false,
                'withdraw' => true,
                'transfer' => true,
            ),
            'precisionMode' => TICK_SIZE,
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
                'test' => array(
                    'public' => 'https://api.demo.hitbtc.com',
                    'private' => 'https://api.demo.hitbtc.com',
                ),
                'api' => array(
                    'public' => 'https://api.hitbtc.com/api/3',
                    'private' => 'https://api.hitbtc.com/api/3',
                ),
                'www' => 'https://hitbtc.com',
                'referral' => 'https://hitbtc.com/?ref_id=5a5d39a65d466',
                'doc' => array(
                    'https://api.hitbtc.com',
                    'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv2.md',
                ),
                'fees' => array(
                    'https://hitbtc.com/fees-and-limits',
                    'https://support.hitbtc.com/hc/en-us/articles/115005148605-Fees-and-limits',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'public/currency',
                        'public/symbol',
                        'public/ticker',
                        'public/price/rate',
                        'public/trades',
                        'public/orderbook',
                        'public/candles',
                        'public/futures/info',
                        'public/futures/history/funding',
                        'public/futures/candles/index_price',
                        'public/futures/candles/mark_price',
                        'public/futures/candles/premium_index',
                        'public/futures/candles/open_interest',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'spot/balance',
                        'spot/order',
                        'spot/order/{client_order_id}',
                        'spot/fee',
                        'spot/fee/{symbol}',
                        'spot/history/order',
                        'spot/history/trade',
                        'margin/account',
                        'margin/account/isolated/{symbol}',
                        'margin/order',
                        'margin/order/{client_order_id}',
                        'margin/history/order',
                        'margin/history/trade',
                        'futures/balance',
                        'futures/account',
                        'futures/account/isolated/{symbol}',
                        'futures/order',
                        'futures/order/{client_order_id}',
                        'futures/fee',
                        'futures/fee/{symbol}',
                        'futures/history/order',
                        'futures/history/trade',
                        'wallet/balance',
                        'wallet/crypto/address',
                        'wallet/crypto/address/recent-deposit',
                        'wallet/crypto/address/recent-withdraw',
                        'wallet/crypto/address/check-mine',
                        'wallet/transactions',
                        'wallet/crypto/check-offchain-available',
                        'wallet/crypto/fee/estimate',
                        'sub-account',
                        'sub-account/acl',
                        'sub-account/balance/{subAccID}',
                        'sub-account/crypto/address/{subAccID}/{currency}',
                    ),
                    'post' => array(
                        'spot/order',
                        'margin/order',
                        'futures/order',
                        'wallet/convert',
                        'wallet/crypto/withdraw',
                        'wallet/transfer',
                        'sub-account/freeze',
                        'sub-account/activate',
                        'sub-account/transfer',
                        'sub-account/acl',
                    ),
                    'patch' => array(
                        'spot/order/{client_order_id}',
                        'margin/order/{client_order_id}',
                        'futures/order/{client_order_id}',
                    ),
                    'delete' => array(
                        'spot/order',
                        'spot/order/{client_order_id}',
                        'margin/position',
                        'margin/position/isolated/{symbol}',
                        'margin/order',
                        'margin/order/{client_order_id}',
                        'futures/position',
                        'futures/position/isolated/{symbol}',
                        'futures/order',
                        'futures/order/{client_order_id}',
                        'wallet/crypto/withdraw/{id}',
                    ),
                    'put' => array(
                        'margin/account/isolated/{symbol}',
                        'futures/account/isolated/{symbol}',
                        'wallet/crypto/withdraw/{id}',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.0009'),
                    'maker' => $this->parse_number('0.0009'),
                    'tiers' => array(
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0009') ),
                            array( $this->parse_number('10'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('100'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('500'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0003') ),
                            array( $this->parse_number('5000'), $this->parse_number('0.0002') ),
                            array( $this->parse_number('10000'), $this->parse_number('0.0001') ),
                            array( $this->parse_number('20000'), $this->parse_number('0') ),
                            array( $this->parse_number('50000'), $this->parse_number('-0.0001') ),
                            array( $this->parse_number('100000'), $this->parse_number('-0.0001') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0009') ),
                            array( $this->parse_number('10'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('100'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('500'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('5000'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('10000'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.0004') ),
                            array( $this->parse_number('50000'), $this->parse_number('0.0003') ),
                            array( $this->parse_number('100000'), $this->parse_number('0.0002') ),
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => 'M1',
                '3m' => 'M3',
                '5m' => 'M5',
                '15m' => 'M15',
                '30m' => 'M30', // default
                '1h' => 'H1',
                '4h' => 'H4',
                '1d' => 'D1',
                '1w' => 'D7',
                '1M' => '1M',
            ),
            'exceptions' => array(
                'exact' => array(
                    '429' => '\\ccxt\\RateLimitExceeded',
                    '500' => '\\ccxt\\ExchangeError',
                    '503' => '\\ccxt\\ExchangeNotAvailable',
                    '504' => '\\ccxt\\ExchangeNotAvailable',
                    '600' => '\\ccxt\\PermissionDenied',
                    '800' => '\\ccxt\\ExchangeError',
                    '1002' => '\\ccxt\\AuthenticationError',
                    '1003' => '\\ccxt\\PermissionDenied',
                    '1004' => '\\ccxt\\AuthenticationError',
                    '1005' => '\\ccxt\\AuthenticationError',
                    '2001' => '\\ccxt\\BadSymbol',
                    '2002' => '\\ccxt\\BadRequest',
                    '2003' => '\\ccxt\\BadRequest',
                    '2010' => '\\ccxt\\BadRequest',
                    '2011' => '\\ccxt\\BadRequest',
                    '2012' => '\\ccxt\\BadRequest',
                    '2020' => '\\ccxt\\BadRequest',
                    '2022' => '\\ccxt\\BadRequest',
                    '10001' => '\\ccxt\\BadRequest',
                    '10021' => '\\ccxt\\AccountSuspended',
                    '10022' => '\\ccxt\\BadRequest',
                    '20001' => '\\ccxt\\InsufficientFunds',
                    '20002' => '\\ccxt\\OrderNotFound',
                    '20003' => '\\ccxt\\ExchangeError',
                    '20004' => '\\ccxt\\ExchangeError',
                    '20005' => '\\ccxt\\ExchangeError',
                    '20006' => '\\ccxt\\ExchangeError',
                    '20007' => '\\ccxt\\ExchangeError',
                    '20008' => '\\ccxt\\InvalidOrder',
                    '20009' => '\\ccxt\\InvalidOrder',
                    '20010' => '\\ccxt\\OnMaintenance',
                    '20011' => '\\ccxt\\ExchangeError',
                    '20012' => '\\ccxt\\ExchangeError',
                    '20014' => '\\ccxt\\ExchangeError',
                    '20016' => '\\ccxt\\ExchangeError',
                    '20031' => '\\ccxt\\ExchangeError',
                    '20032' => '\\ccxt\\ExchangeError',
                    '20033' => '\\ccxt\\ExchangeError',
                    '20034' => '\\ccxt\\ExchangeError',
                    '20040' => '\\ccxt\\ExchangeError',
                    '20041' => '\\ccxt\\ExchangeError',
                    '20042' => '\\ccxt\\ExchangeError',
                    '20043' => '\\ccxt\\ExchangeError',
                    '20044' => '\\ccxt\\PermissionDenied',
                    '20045' => '\\ccxt\\ExchangeError',
                    '20080' => '\\ccxt\\ExchangeError',
                    '21001' => '\\ccxt\\ExchangeError',
                    '21003' => '\\ccxt\\AccountSuspended',
                    '21004' => '\\ccxt\\AccountSuspended',
                ),
                'broad' => array(),
            ),
            'options' => array(
                'networks' => array(
                    'ETH' => 'USDT20',
                    'ERC20' => 'USDT20',
                    'TRX' => 'USDTRX',
                    'TRC20' => 'USDTRX',
                    'OMNI' => 'USDT',
                ),
                'accountsByType' => array(
                    'spot' => 'spot',
                    'wallet' => 'wallet',
                    'derivatives' => 'derivatives',
                ),
            ),
        ));
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function fetch_markets($params = array ()) {
        $response = $this->publicGetPublicSymbol ($params);
        //
        //     {
        //         "AAVEUSDT_PERP":array(
        //             "type":"futures",
        //             "expiry":null,
        //             "underlying":"AAVE",
        //             "base_currency":null,
        //             "quote_currency":"USDT",
        //             "quantity_increment":"0.01",
        //             "tick_size":"0.001",
        //             "take_rate":"0.0005",
        //             "make_rate":"0.0002",
        //             "fee_currency":"USDT",
        //             "margin_trading":true,
        //             "max_initial_leverage":"50.00"
        //         ),
        //         "MANAUSDT":array(
        //             "type":"spot",
        //             "base_currency":"MANA",
        //             "quote_currency":"USDT",
        //             "quantity_increment":"1",
        //             "tick_size":"0.0000001",
        //             "take_rate":"0.0025",
        //             "make_rate":"0.001",
        //             "fee_currency":"USDT",
        //             "margin_trading":true,
        //             "max_initial_leverage":"5.00"
        //         ),
        //     }
        //
        $result = array();
        $ids = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($ids); $i++) {
            $id = $ids[$i];
            $market = $this->safe_value($response, $id);
            $marketType = $this->safe_string($market, 'type');
            $expiry = $this->safe_integer($market, 'expiry');
            $contract = ($marketType === 'futures');
            $derivative = $contract;
            $spot = ($marketType === 'spot');
            $marginTrading = $this->safe_value($market, 'margin_trading', false);
            $margin = $spot && $marginTrading;
            $future = ($expiry !== null);
            $swap = ($contract && !$future);
            $option = false;
            $baseId = $this->safe_string_2($market, 'base_currency', 'underlying');
            $quoteId = $this->safe_string($market, 'quote_currency');
            $feeCurrencyId = $this->safe_string($market, 'fee_currency');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $feeCurrency = $this->safe_currency_code($feeCurrencyId);
            $settleId = null;
            $settle = null;
            $symbol = $base . '/' . $quote;
            $type = 'spot';
            $contractSize = null;
            $linear = null;
            $inverse = null;
            if ($contract) {
                $contractSize = 1;
                $settleId = $feeCurrencyId;
                $settle = $this->safe_currency_code($settleId);
                $linear = (($quote !== null) && ($quote === $settle));
                $inverse = !$linear;
                $symbol = $symbol . ':' . $settle;
                if ($future) {
                    $symbol = $symbol . '-' . $expiry;
                    $type = 'future';
                } else {
                    $type = 'swap';
                }
            }
            $lotString = $this->safe_string($market, 'quantity_increment');
            $stepString = $this->safe_string($market, 'tick_size');
            $lot = $this->parse_number($lotString);
            $step = $this->parse_number($stepString);
            $taker = $this->safe_number($market, 'take_rate');
            $maker = $this->safe_number($market, 'make_rate');
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => $settle,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => $settleId,
                'type' => $type,
                'spot' => $spot,
                'margin' => $margin,
                'swap' => $swap,
                'future' => $future,
                'futures' => $future, // deprecated, use $future instead
                'option' => $option,
                'derivative' => $derivative,
                'contract' => $contract,
                'linear' => $linear,
                'inverse' => $inverse,
                'taker' => $taker,
                'maker' => $maker,
                'contractSize' => $contractSize,
                'active' => true,
                'expiry' => $expiry,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'feeCurrency' => $feeCurrency,
                'precision' => array(
                    'price' => $step,
                    'amount' => $lot,
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => 1,
                        'max' => $this->safe_number($market, 'max_initial_leverage', 1),
                    ),
                    'amount' => array(
                        'min' => $lot,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => $step,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->parse_number(Precise::string_mul($lotString, $stepString)),
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies($params = array ()) {
        $response = $this->publicGetPublicCurrency ($params);
        //
        //     {
        //       "WEALTH" => {
        //         "full_name" => "ConnectWealth",
        //         "payin_enabled" => false,
        //         "payout_enabled" => false,
        //         "transfer_enabled" => true,
        //         "precision_transfer" => "0.001",
        //         "networks" => array(
        //           {
        //             "network" => "ETH",
        //             "protocol" => "ERC20",
        //             "default" => true,
        //             "payin_enabled" => false,
        //             "payout_enabled" => false,
        //             "precision_payout" => "0.001",
        //             "payout_fee" => "0.016800000000",
        //             "payout_is_payment_id" => false,
        //             "payin_payment_id" => false,
        //             "payin_confirmations" => "2"
        //           }
        //         )
        //       }
        //     }
        //
        $result = array();
        $currencies = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($currencies); $i++) {
            $currencyId = $currencies[$i];
            $code = $this->safe_currency_code($currencyId);
            $entry = $response[$currencyId];
            $name = $this->safe_string($entry, 'full_name');
            $precision = $this->safe_number($entry, 'precision_transfer');
            $payinEnabled = $this->safe_value($entry, 'payin_enabled', false);
            $payoutEnabled = $this->safe_value($entry, 'payout_enabled', false);
            $transferEnabled = $this->safe_value($entry, 'transfer_enabled', false);
            $active = $payinEnabled && $payoutEnabled && $transferEnabled;
            $rawNetworks = $this->safe_value($entry, 'networks', array());
            $networks = array();
            $fee = null;
            for ($j = 0; $j < count($rawNetworks); $j++) {
                $rawNetwork = $rawNetworks[$j];
                $networkId = $this->safe_string($rawNetwork, 'protocol');
                if (strlen($networkId) === 0) {
                    $networkId = $this->safe_string($rawNetwork, 'network');
                }
                $network = $this->safe_network($networkId);
                $fee = $this->safe_number($rawNetwork, 'payout_fee');
                $precision = $this->safe_number($rawNetwork, 'precision_payout');
                $payinEnabledNetwork = $this->safe_value($entry, 'payin_enabled', false);
                $payoutEnabledNetwork = $this->safe_value($entry, 'payout_enabled', false);
                $transferEnabledNetwork = $this->safe_value($entry, 'transfer_enabled', false);
                $active = $payinEnabledNetwork && $payoutEnabledNetwork && $transferEnabledNetwork;
                $networks[$network] = array(
                    'info' => $rawNetwork,
                    'id' => $networkId,
                    'network' => $network,
                    'fee' => $fee,
                    'active' => $active,
                    'precision' => $precision,
                    'limits' => array(
                        'withdraw' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                );
            }
            $networksKeys = is_array($networks) ? array_keys($networks) : array();
            $networksLength = is_array($networksKeys) ? count($networksKeys) : 0;
            $result[$code] = array(
                'info' => $entry,
                'code' => $code,
                'id' => $currencyId,
                'precision' => $precision,
                'name' => $name,
                'active' => $active,
                'networks' => $networks,
                'fee' => ($networksLength <= 1) ? $fee : null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function safe_network($networkId) {
        if ($networkId === null) {
            return null;
        } else {
            return strtoupper($networkId);
        }
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $network = $this->safe_string_upper($params, 'network');
        if (($network !== null) && ($code === 'USDT')) {
            $networks = $this->safe_value($this->options, 'networks');
            $parsedNetwork = $this->safe_string($networks, $network);
            if ($parsedNetwork !== null) {
                $request['currency'] = $parsedNetwork;
            }
            $params = $this->omit($params, 'network');
        }
        $response = $this->privateGetWalletCryptoAddress (array_merge($request, $params));
        //
        //  [array("currency":"ETH","address":"0xd0d9aea60c41988c3e68417e2616065617b7afd3")]
        //
        $firstAddress = $this->safe_value($response, 0);
        $address = $this->safe_string($firstAddress, 'address');
        $currencyId = $this->safe_string($firstAddress, 'currency');
        $tag = $this->safe_string($firstAddress, 'payment_id');
        $parsedCode = $this->safe_currency_code($currencyId);
        return array(
            'info' => $response,
            'address' => $address,
            'tag' => $tag,
            'code' => $parsedCode,
            'network' => null,
        );
    }

    public function fetch_balance($params = array ()) {
        $type = $this->safe_string_lower($params, 'type', 'spot');
        $params = $this->omit($params, array( 'type' ));
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $account = $this->safe_string($accountsByType, $type);
        $response = null;
        if ($account === 'wallet') {
            $response = $this->privateGetWalletBalance ($params);
        } else if ($account === 'spot') {
            $response = $this->privateGetSpotBalance ($params);
        } else if ($account === 'derivatives') {
            $response = $this->privateGetFuturesBalance ($params);
        } else {
            $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
            throw new BadRequest($this->id . ' fetchBalance() $type parameter must be one of ' . implode(', ', $keys));
        }
        //
        //     array(
        //       array(
        //         "currency" => "PAXG",
        //         "available" => "0",
        //         "reserved" => "0",
        //         "reserved_margin" => "0",
        //       ),
        //       ...
        //     )
        //
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($entry, 'available');
            $account['used'] = $this->safe_string($entry, 'reserved');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $response = $this->fetch_tickers(array( $symbol ), $params);
        return $this->safe_value($response, $symbol);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        if ($symbols !== null) {
            $marketIds = $this->market_ids($symbols);
            $delimited = implode(',', $marketIds);
            $request['symbols'] = $delimited;
        }
        $response = $this->publicGetPublicTicker (array_merge($request, $params));
        //
        //     {
        //       "BTCUSDT" => {
        //         "ask" => "63049.06",
        //         "bid" => "63046.41",
        //         "last" => "63048.36",
        //         "low" => "62010.00",
        //         "high" => "66657.99",
        //         "open" => "64839.75",
        //         "volume" => "15272.13278",
        //         "volume_quote" => "976312127.6277998",
        //         "timestamp" => "2021-10-22T04:25:47.573Z"
        //       }
        //     }
        //
        $result = array();
        $keys = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $marketId = $keys[$i];
            $market = $this->safe_market($marketId);
            $symbol = $market['symbol'];
            $entry = $response[$marketId];
            $result[$symbol] = $this->parse_ticker($entry, $market);
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //       "ask" => "62756.01",
        //       "bid" => "62754.09",
        //       "last" => "62755.87",
        //       "low" => "62010.00",
        //       "high" => "66657.99",
        //       "open" => "65089.27",
        //       "volume" => "16719.50366",
        //       "volume_quote" => "1063422878.8156828",
        //       "timestamp" => "2021-10-22T07:29:14.585Z"
        //     }
        //
        $timestamp = $this->parse8601($ticker['timestamp']);
        $symbol = $this->safe_symbol(null, $market);
        $baseVolume = $this->safe_number($ticker, 'volume');
        $quoteVolume = $this->safe_number($ticker, 'volume_quote');
        $open = $this->safe_number($ticker, 'open');
        $last = $this->safe_number($ticker, 'last');
        $vwap = $this->vwap($baseVolume, $quoteVolume);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_number($ticker, 'high'),
            'low' => $this->safe_number($ticker, 'low'),
            'bid' => $this->safe_number($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_number($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => $vwap,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            // $symbol is optional for hitbtc fetchTrades
            $request['symbols'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['since'] = $since;
        }
        $response = $this->publicGetPublicTrades (array_merge($request, $params));
        $marketIds = is_array($response) ? array_keys($response) : array();
        $trades = array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $market = $this->market($marketId);
            $rawTrades = $response[$marketId];
            $parsed = $this->parse_trades($rawTrades, $market);
            $trades = $this->array_concat($trades, $parsed);
        }
        return $trades;
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['since'] = $since;
        }
        $response = $this->privateGetSpotHistoryTrade (array_merge($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        // createMarketOrder
        //
        //  {       $fee => "0.0004644",
        //           $id =>  386394956,
        //        $price => "0.4644",
        //     quantity => "1",
        //    $timestamp => "2018-10-25T16:41:44.780Z" }
        //
        // fetchTrades
        //
        // { $id => 974786185,
        //   $price => '0.032462',
        //   qty => '0.3673',
        //   $side => 'buy',
        //   $timestamp => '2020-10-16T12:57:39.846Z' }
        //
        // fetchMyTrades
        //
        // { $id => 277210397,
        //   clientOrderId => '6e102f3e7f3f4e04aeeb1cdc95592f1a',
        //   $orderId => 28102855393,
        //   $symbol => 'ETHBTC',
        //   $side => 'sell',
        //   quantity => '0.002',
        //   $price => '0.073365',
        //   $fee => '0.000000147',
        //   $timestamp => '2018-04-28T18:39:55.345Z',
        //   $taker => true }
        //
        $timestamp = $this->parse8601($trade['timestamp']);
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $fee = null;
        $feeCost = $this->safe_number($trade, 'fee');
        $taker = $this->safe_value($trade, 'taker');
        $takerOrMaker = null;
        if ($taker !== null) {
            $takerOrMaker = $taker ? 'taker' : 'maker';
        }
        if ($feeCost !== null) {
            $info = $this->safe_value($market, 'info', array());
            $feeCurrency = $this->safe_string($info, 'fee_currency');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrency);
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrencyCode,
            );
        }
        // we use clientOrderId as the order $id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here => https://github.com/ccxt/ccxt/issues/5674
        $orderId = $this->safe_string($trade, 'clientOrderId');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string_2($trade, 'quantity', 'qty');
        $price = $this->parse_number($priceString);
        $amount = $this->parse_number($amountString);
        $cost = $this->parse_number(Precise::string_mul($priceString, $amountString));
        $side = $this->safe_string($trade, 'side');
        $id = $this->safe_string($trade, 'id');
        return array(
            'info' => $trade,
            'id' => $id,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_transactions_helper($types, $code, $since, $limit, $params) {
        $this->load_markets();
        $request = array(
            'types' => $types,
        );
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currencies'] = $currency['id'];
        }
        if ($since !== null) {
            $request['from'] = $this->iso8601($since);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetWalletTransactions (array_merge($request, $params));
        //
        //     array(
        //       {
        //         "id" => "101609495",
        //         "created_at" => "2018-03-06T22:05:06.507Z",
        //         "updated_at" => "2018-03-06T22:11:45.03Z",
        //         "status" => "SUCCESS",
        //         "type" => "DEPOSIT",
        //         "subtype" => "BLOCKCHAIN",
        //         "native" => {
        //           "tx_id" => "e20b0965-4024-44d0-b63f-7fb8996a6706",
        //           "index" => "881652766",
        //           "currency" => "ETH",
        //           "amount" => "0.01418088",
        //           "hash" => "d95dbbff3f9234114f1211ab0ba2a94f03f394866fd5749d74a1edab80e6c5d3",
        //           "address" => "0xd9259302c32c0a0295d86a39185c9e14f6ba0a0d",
        //           "confirmations" => "20",
        //           "senders" => array(
        //             "0x243bec9256c9a3469da22103891465b47583d9f1"
        //           )
        //         }
        //       }
        //     )
        //
        return $this->parse_transactions($response, $currency, $since, $limit, $params);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'PENDING' => 'pending',
            'FAILED' => 'failed',
            'SUCCESS' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction_type($type) {
        $types = array(
            'DEPOSIT' => 'deposit',
            'WITHDRAW' => 'withdrawal',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        //     {
        //       "id" => "101609495",
        //       "created_at" => "2018-03-06T22:05:06.507Z",
        //       "updated_at" => "2018-03-06T22:11:45.03Z",
        //       "status" => "SUCCESS",
        //       "type" => "DEPOSIT",
        //       "subtype" => "BLOCKCHAIN",
        //       "native" => {
        //         "tx_id" => "e20b0965-4024-44d0-b63f-7fb8996a6706",
        //         "index" => "881652766",
        //         "currency" => "ETH",
        //         "amount" => "0.01418088",
        //         "hash" => "d95dbbff3f9234114f1211ab0ba2a94f03f394866fd5749d74a1edab80e6c5d3",
        //         "address" => "0xd9259302c32c0a0295d86a39185c9e14f6ba0a0d",
        //         "confirmations" => "20",
        //         "senders" => array(
        //           "0x243bec9256c9a3469da22103891465b47583d9f1"
        //         )
        //       }
        //     }
        //
        //     {
        //       "id" => "102703545",
        //       "created_at" => "2018-03-30T21:39:17.854Z",
        //       "updated_at" => "2018-03-31T00:23:19.067Z",
        //       "status" => "SUCCESS",
        //       "type" => "WITHDRAW",
        //       "subtype" => "BLOCKCHAIN",
        //       "native" => {
        //         "tx_id" => "5ecd7a85-ce5d-4d52-a916-b8b755e20926",
        //         "index" => "918286359",
        //         "currency" => "OMG",
        //         "amount" => "2.45",
        //         "fee" => "1.22",
        //         "hash" => "0x1c621d89e7a0841342d5fb3b3587f60b95351590161e078c4a1daee353da4ca9",
        //         "address" => "0x50227da7644cea0a43258a2e2d7444d01b43dcca",
        //         "confirmations" => "0"
        //       }
        //     }
        //
        $id = $this->safe_string($transaction, 'id');
        $timestamp = $this->parse8601($this->safe_string($transaction, 'created_at'));
        $updated = $this->parse8601($this->safe_string($transaction, 'updated_at'));
        $type = $this->parse_transaction_type($this->safe_string($transaction, 'type'));
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $native = $this->safe_value($transaction, 'native');
        $currencyId = $this->safe_string($native, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $txhash = $this->safe_string($native, 'hash');
        $address = $this->safe_string($native, 'address');
        $addressTo = $address;
        $tag = $this->safe_string($native, 'payment_id');
        $tagTo = $tag;
        $sender = $this->safe_value($native, 'senders');
        $addressFrom = $this->safe_string($sender, 0);
        $amount = $this->safe_number($native, 'amount');
        $fee = null;
        $feeCost = $this->safe_number($native, 'fee');
        if ($feeCost !== null) {
            $fee = array(
                'code' => $code,
                'cost' => $feeCost,
            );
        }
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txhash,
            'code' => $code,
            'amount' => $amount,
            'address' => $address,
            'addressFrom' => $addressFrom,
            'addressTo' => $addressTo,
            'tag' => $tag,
            'tagFrom' => null,
            'tagTo' => $tagTo,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'updated' => $updated,
            'status' => $status,
            'type' => $type,
            'fee' => $fee,
        );
    }

    public function fetch_transactions($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_helper('DEPOSIT,WITHDRAW', $code, $since, $limit, $params);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_helper('DEPOSIT', $code, $since, $limit, $params);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_helper('WITHDRAW', $code, $since, $limit, $params);
    }

    public function fetch_order_books($symbols = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        if ($symbols !== null) {
            $marketIds = $this->market_ids($symbols);
            $request['symbols'] = implode(',', $marketIds);
        }
        if ($limit !== null) {
            $request['depth'] = $limit;
        }
        $response = $this->publicGetPublicOrderbook (array_merge($request, $params));
        $result = array();
        $marketIds = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $orderbook = $response[$marketId];
            $symbol = $this->safe_symbol($marketId);
            $timestamp = $this->parse8601($this->safe_string($orderbook, 'timestamp'));
            $result[$symbol] = $this->parse_order_book($response[$marketId], $symbol, $timestamp, 'bid', 'ask');
        }
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $result = $this->fetch_order_books(array( $symbol ), $limit, $params);
        return $result[$symbol];
    }

    public function parse_trading_fee($fee, $market = null) {
        //
        //     {
        //         "symbol":"ARVUSDT", // returned from fetchTradingFees only
        //         "take_rate":"0.0009",
        //         "make_rate":"0.0009"
        //     }
        //
        $taker = $this->safe_number($fee, 'take_rate');
        $maker = $this->safe_number($fee, 'make_rate');
        $marketId = $this->safe_string($fee, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'taker' => $taker,
            'maker' => $maker,
        );
    }

    public function fetch_trading_fee($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->privateGetSpotFeeSymbol (array_merge($request, $params));
        //
        //     {
        //         "take_rate":"0.0009",
        //         "make_rate":"0.0009"
        //     }
        //
        return $this->parse_trading_fee($response, $market);
    }

    public function fetch_trading_fees($symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->privateGetSpotFee ($params);
        //
        //     array(
        //         {
        //             "symbol":"ARVUSDT",
        //             "take_rate":"0.0009",
        //             "make_rate":"0.0009"
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $fee = $this->parse_trading_fee($response[$i]);
            $symbol = $fee['symbol'];
            $result[$symbol] = $fee;
        }
        return $result;
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbols' => $market['id'],
            'period' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['from'] = $this->iso8601($since);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->publicGetPublicCandles (array_merge($request, $params));
        //
        //     {
        //       "ETHUSDT" => array(
        //         {
        //           "timestamp" => "2021-10-25T07:38:00.000Z",
        //           "open" => "4173.391",
        //           "close" => "4170.923",
        //           "min" => "4170.923",
        //           "max" => "4173.986",
        //           "volume" => "0.1879",
        //           "volume_quote" => "784.2517846"
        //         }
        //       )
        //     }
        //
        $ohlcvs = $this->safe_value($response, $market['id']);
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     {
        //         "timestamp":"2015-08-20T19:01:00.000Z",
        //         "open":"0.006",
        //         "close":"0.006",
        //         "min":"0.006",
        //         "max":"0.006",
        //         "volume":"0.003",
        //         "volume_quote":"0.000018"
        //     }
        //
        return array(
            $this->parse8601($this->safe_string($ohlcv, 'timestamp')),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'max'),
            $this->safe_number($ohlcv, 'min'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['from'] = $this->iso8601($since);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetSpotHistoryOrder (array_merge($request, $params));
        $parsed = $this->parse_orders($response, $market, $since, $limit);
        return $this->filter_by_array($parsed, 'status', array( 'closed', 'canceled' ), false);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'client_order_id' => $id,
        );
        $response = $this->privateGetSpotHistoryOrder (array_merge($request, $params));
        //
        //     array(
        //       {
        //         "id" => "685965182082",
        //         "client_order_id" => "B3CBm9uGg9oYQlw96bBSEt38-6gbgBO0",
        //         "symbol" => "BTCUSDT",
        //         "side" => "buy",
        //         "status" => "new",
        //         "type" => "limit",
        //         "time_in_force" => "GTC",
        //         "quantity" => "0.00010",
        //         "quantity_cumulative" => "0",
        //         "price" => "50000.00",
        //         "price_average" => "0",
        //         "created_at" => "2021-10-26T11:40:09.287Z",
        //         "updated_at" => "2021-10-26T11:40:09.287Z"
        //       }
        //     )
        //
        $order = $this->safe_value($response, 0);
        return $this->parse_order($order, $market);
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'order_id' => $id, // exchange assigned order $id as oppose to the client order $id
        );
        $response = $this->privateGetSpotHistoryTrade (array_merge($request, $params));
        //
        //     array(
        //       {
        //         "id" => 1393448977,
        //         "order_id" => 653496804534,
        //         "client_order_id" => "065f6f0ff9d54547848454182263d7b4",
        //         "symbol" => "DICEETH",
        //         "side" => "buy",
        //         "quantity" => "1.4",
        //         "price" => "0.00261455",
        //         "fee" => "0.000003294333",
        //         "timestamp" => "2021-09-19T05:35:56.601Z",
        //         "taker" => true
        //       }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $response = $this->privateGetSpotOrder (array_merge($request, $params));
        //
        //     array(
        //       {
        //         "id" => "488953123149",
        //         "client_order_id" => "103ad305301e4c3590045b13de15b36e",
        //         "symbol" => "BTCUSDT",
        //         "side" => "buy",
        //         "status" => "new",
        //         "type" => "limit",
        //         "time_in_force" => "GTC",
        //         "quantity" => "0.00001",
        //         "quantity_cumulative" => "0",
        //         "price" => "0.01",
        //         "post_only" => false,
        //         "created_at" => "2021-04-13T13:06:16.567Z",
        //         "updated_at" => "2021-04-13T13:06:16.567Z"
        //       }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_open_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'client_order_id' => $id,
        );
        $response = $this->privateGetSpotOrderClientOrderId (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $response = $this->privateDeleteSpotOrder (array_merge($request, $params));
        return $this->parse_orders($response, $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array(
            'client_order_id' => $id,
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $response = $this->privateDeleteSpotOrderClientOrderId (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function edit_order($id, $symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $request = array(
            'client_order_id' => $id,
            'quantity' => $this->amount_to_precision($symbol, $amount),
        );
        if (($type === 'limit') || ($type === 'stopLimit')) {
            if ($price === null) {
                throw new ExchangeError($this->id . ' limit order requires price');
            }
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $response = $this->privatePatchSpotOrderClientOrderId (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'type' => $type,
            'side' => $side,
            'quantity' => $this->amount_to_precision($symbol, $amount),
            'symbol' => $market['id'],
        );
        if (($type === 'limit') || ($type === 'stopLimit')) {
            if ($price === null) {
                throw new ExchangeError($this->id . ' limit order requires price');
            }
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $response = $this->privatePostSpotOrder (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'new' => 'open',
            'suspended' => 'open',
            'partiallyFilled' => 'open',
            'filled' => 'closed',
            'canceled' => 'canceled',
            'expired' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // limit
        //     {
        //       "id" => 488953123149,
        //       "client_order_id" => "103ad305301e4c3590045b13de15b36e",
        //       "symbol" => "BTCUSDT",
        //       "side" => "buy",
        //       "status" => "new",
        //       "type" => "limit",
        //       "time_in_force" => "GTC",
        //       "quantity" => "0.00001",
        //       "quantity_cumulative" => "0",
        //       "price" => "0.01",
        //       "price_average" => "0.01",
        //       "post_only" => false,
        //       "created_at" => "2021-04-13T13:06:16.567Z",
        //       "updated_at" => "2021-04-13T13:06:16.567Z"
        //     }
        //
        // $market
        //     {
        //       "id" => "685877626834",
        //       "client_order_id" => "Yshl7G-EjaREyXQYaGbsmdtVbW-nzQwu",
        //       "symbol" => "BTCUSDT",
        //       "side" => "buy",
        //       "status" => "filled",
        //       "type" => "market",
        //       "time_in_force" => "GTC",
        //       "quantity" => "0.00010",
        //       "quantity_cumulative" => "0.00010",
        //       "post_only" => false,
        //       "created_at" => "2021-10-26T08:55:55.1Z",
        //       "updated_at" => "2021-10-26T08:55:55.1Z",
        //       "trades" => array(
        //         {
        //           "id" => "1437229630",
        //           "position_id" => "0",
        //           "quantity" => "0.00010",
        //           "price" => "62884.78",
        //           "fee" => "0.005659630200",
        //           "timestamp" => "2021-10-26T08:55:55.1Z",
        //           "taker" => true
        //         }
        //       )
        //     }
        //
        $id = $this->safe_string($order, 'client_order_id');
        // we use clientOrderId as the $order $id with this exchange intentionally
        // because most of their endpoints will require clientOrderId
        // explained here => https://github.com/ccxt/ccxt/issues/5674
        $side = $this->safe_string($order, 'side');
        $type = $this->safe_string($order, 'type');
        $amount = $this->safe_string($order, 'quantity');
        $price = $this->safe_string($order, 'price');
        $average = $this->safe_string($order, 'price_average');
        $created = $this->safe_string($order, 'created_at');
        $timestamp = $this->parse8601($created);
        $updated = $this->safe_string($order, 'updated_at');
        $lastTradeTimestamp = null;
        if ($updated !== $created) {
            $lastTradeTimestamp = $this->parse8601($updated);
        }
        $filled = $this->safe_string($order, 'quantity_cumulative');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $postOnly = $this->safe_value($order, 'post_only');
        $timeInForce = $this->safe_string($order, 'time_in_force');
        $rawTrades = $this->safe_value($order, 'trades');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'price' => $price,
            'amount' => $amount,
            'type' => $type,
            'side' => $side,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'filled' => $filled,
            'remaining' => null,
            'cost' => null,
            'status' => $status,
            'average' => $average,
            'trades' => $rawTrades,
            'fee' => null,
        ), $market);
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        // account can be "spot", "wallet", or "derivatives"
        $this->load_markets();
        $currency = $this->currency($code);
        $requestAmount = $this->currency_to_precision($code, $amount);
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $fromAccount = strtolower($fromAccount);
        $toAccount = strtolower($toAccount);
        $fromId = $this->safe_string($accountsByType, $fromAccount);
        $toId = $this->safe_string($accountsByType, $toAccount);
        $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
        if ($fromId === null) {
            throw new ArgumentsRequired($this->id . ' transfer() $fromAccount argument must be one of ' . implode(', ', $keys));
        }
        if ($toId === null) {
            throw new ArgumentsRequired($this->id . ' transfer() $toAccount argument must be one of ' . implode(', ', $keys));
        }
        if ($fromId === $toId) {
            throw new BadRequest($this->id . ' transfer() $fromAccount and $toAccount arguments cannot be the same account');
        }
        $request = array(
            'currency' => $currency['id'],
            'amount' => $requestAmount,
            'source' => $fromId,
            'destination' => $toId,
        );
        $response = $this->privatePostWalletTransfer (array_merge($request, $params));
        // array( '2db6ebab-fb26-4537-9ef8-1a689472d236' )
        $id = $this->safe_string($response, 0);
        return array(
            'info' => $response,
            'id' => $id,
            'timestamp' => null,
            'datetime' => null,
            'amount' => $this->parse_number($requestAmount),
            'currency' => $code,
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => null,
        );
    }

    public function convert_currency_network($code, $amount, $fromNetwork, $toNetwork, $params) {
        $this->load_markets();
        if ($code !== 'USDT') {
            throw new ExchangeError($this->id . ' convertCurrencyNetwork() only supports USDT currently');
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $fromNetwork = strtoupper($fromNetwork);
        $toNetwork = strtoupper($toNetwork);
        $fromNetwork = $this->safe_string($networks, $fromNetwork); // handle ETH>ERC20 alias
        $toNetwork = $this->safe_string($networks, $toNetwork); // handle ETH>ERC20 alias
        if ($fromNetwork === $toNetwork) {
            throw new BadRequest($this->id . ' $fromNetwork cannot be the same as toNetwork');
        }
        if (($fromNetwork === null) || ($toNetwork === null)) {
            $keys = is_array($networks) ? array_keys($networks) : array();
            throw new ArgumentsRequired($this->id . ' convertCurrencyNetwork() requires a $fromNetwork parameter and a $toNetwork parameter, supported $networks are ' . implode(', ', $keys));
        }
        $request = array(
            'from_currency' => $fromNetwork,
            'to_currency' => $toNetwork,
            'amount' => $this->currency_to_precision($code, $amount),
        );
        $response = $this->privatePostWalletConvert (array_merge($request, $params));
        // array("result":["587a1868-e62d-4d8e-b27c-dbdb2ee96149","e168df74-c041-41f2-b76c-e43e4fed5bc7"])
        return array(
            'info' => $response,
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->load_markets();
        $this->check_address($address);
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $amount,
            'address' => $address,
        );
        if ($tag !== null) {
            $request['payment_id'] = $tag;
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network');
        if (($network !== null) && ($code === 'USDT')) {
            $parsedNetwork = $this->safe_string($networks, $network);
            if ($parsedNetwork !== null) {
                $request['currency'] = $parsedNetwork;
            }
            $params = $this->omit($params, 'network');
        }
        $response = $this->privatePostWalletCryptoWithdraw (array_merge($request, $params));
        // array("id":"084cfcd5-06b9-4826-882e-fdb75ec3625d")
        $id = $this->safe_string($response, 'id');
        return array(
            'info' => $response,
            'id' => $id,
        );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        //
        //     {
        //       "error" => {
        //         "code" => 20001,
        //         "message" => "Insufficient funds",
        //         "description" => "Check that the funds are sufficient, given commissions"
        //       }
        //     }
        //
        //     {
        //       "error" => {
        //         "code" => "600",
        //         "message" => "Action not allowed"
        //       }
        //     }
        //
        $error = $this->safe_value($response, 'error');
        $errorCode = $this->safe_string($error, 'code');
        if ($errorCode !== null) {
            $feedback = $this->id . ' ' . $body;
            $message = $this->safe_string_2($error, 'message', 'description');
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $implodedPath = $this->implode_params($path, $params);
        $url = $this->urls['api'][$api] . '/' . $implodedPath;
        $getRequest = null;
        $keys = is_array($query) ? array_keys($query) : array();
        $queryLength = is_array($keys) ? count($keys) : 0;
        $headers = array(
            'Content-Type' => 'application/json',
        );
        if ($method === 'GET') {
            if ($queryLength) {
                $getRequest = '?' . $this->urlencode($query);
                $url = $url . $getRequest;
            }
        } else {
            $body = $this->json($params);
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $timestamp = (string) $this->nonce();
            $payload = array( $method, '/api/3/' . $implodedPath );
            if ($method === 'GET') {
                if ($getRequest !== null) {
                    $payload[] = $getRequest;
                }
            } else {
                $payload[] = $body;
            }
            $payload[] = $timestamp;
            $payloadString = implode('', $payload);
            $signature = $this->hmac($this->encode($payloadString), $this->encode($this->secret), 'sha256', 'hex');
            $secondPayload = $this->apiKey . ':' . $signature . ':' . $timestamp;
            $encoded = $this->decode(base64_encode($secondPayload));
            $headers['Authorization'] = 'HS256 ' . $encoded;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
