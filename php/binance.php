<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\AuthenticationError;
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;
use \ccxt\InvalidOrder;
use \ccxt\NotSupported;
use \ccxt\DDoSProtection;

class binance extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'binance',
            'name' => 'Binance',
            'countries' => array( 'JP', 'MT' ), // Japan, Malta
            'rateLimit' => 50,
            'certified' => true,
            'pro' => true,
            // new metainfo interface
            'has' => array(
                'margin' => true,
                'swap' => true,
                'future' => true,
                'addMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'CORS' => null,
                'createOrder' => true,
                'createReduceOnlyOrder' => true,
                'fetchBalance' => true,
                'fetchBidsAsks' => true,
                'fetchBorrowRate' => true,
                'fetchBorrowRateHistory' => true,
                'fetchBorrowRates' => false,
                'fetchClosedOrders' => 'emulated',
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchFundingFees' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => true,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => true,
                'fetchPositions' => true,
                'fetchPositionsRisk' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransactions' => false,
                'fetchTransfers' => true,
                'fetchWithdrawals' => true,
                'reduceMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'setPositionMode' => true,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '8h' => '8h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
                'test' => array(
                    'dapiPublic' => 'https://testnet.binancefuture.com/dapi/v1',
                    'dapiPrivate' => 'https://testnet.binancefuture.com/dapi/v1',
                    'fapiPublic' => 'https://testnet.binancefuture.com/fapi/v1',
                    'fapiPrivate' => 'https://testnet.binancefuture.com/fapi/v1',
                    'fapiPrivateV2' => 'https://testnet.binancefuture.com/fapi/v2',
                    'public' => 'https://testnet.binance.vision/api/v3',
                    'private' => 'https://testnet.binance.vision/api/v3',
                    'v1' => 'https://testnet.binance.vision/api/v1',
                ),
                'api' => array(
                    'wapi' => 'https://api.binance.com/wapi/v3',
                    'sapi' => 'https://api.binance.com/sapi/v1',
                    'dapiPublic' => 'https://dapi.binance.com/dapi/v1',
                    'dapiPrivate' => 'https://dapi.binance.com/dapi/v1',
                    'dapiPrivateV2' => 'https://dapi.binance.com/dapi/v2',
                    'dapiData' => 'https://dapi.binance.com/futures/data',
                    'fapiPublic' => 'https://fapi.binance.com/fapi/v1',
                    'fapiPrivate' => 'https://fapi.binance.com/fapi/v1',
                    'fapiData' => 'https://fapi.binance.com/futures/data',
                    'fapiPrivateV2' => 'https://fapi.binance.com/fapi/v2',
                    'public' => 'https://api.binance.com/api/v3',
                    'private' => 'https://api.binance.com/api/v3',
                    'v1' => 'https://api.binance.com/api/v1',
                ),
                'www' => 'https://www.binance.com',
                // 'referral' => array(
                //     'url' => 'https://www.binance.com/en/register?ref=BLEJC98C',
                //     'discount' => 0.2,
                // ),
                'doc' => array(
                    'https://binance-docs.github.io/apidocs/spot/en',
                ),
                'api_management' => 'https://www.binance.com/en/usercenter/settings/api-management',
                'fees' => 'https://www.binance.com/en/fee/schedule',
            ),
            'depth' => 1,
            'api' => array(
                // the API structure below will need 3-layer apidefs
                'sapi' => array(
                    'get' => array(
                        'accountSnapshot' => 1,
                        'system/status' => 1,
                        // these endpoints require $this->apiKey
                        'margin/asset' => 1,
                        'margin/pair' => 1,
                        'margin/allAssets' => 1,
                        'margin/allPairs' => 1,
                        'margin/priceIndex' => 1,
                        // these endpoints require $this->apiKey . $this->secret
                        'asset/assetDividend' => 1,
                        'asset/dribblet' => 1,
                        'asset/transfer' => 1,
                        'asset/assetDetail' => 1,
                        'asset/tradeFee' => 1,
                        'asset/get-funding-asset' => 1,
                        'margin/loan' => 1,
                        'margin/repay' => 1,
                        'margin/account' => 1,
                        'margin/transfer' => 1,
                        'margin/interestHistory' => 1,
                        'margin/forceLiquidationRec' => 1,
                        'margin/order' => 1,
                        'margin/openOrders' => 1,
                        'margin/allOrders' => 1,
                        'margin/myTrades' => 1,
                        'margin/maxBorrowable' => 5,
                        'margin/maxTransferable' => 5,
                        'margin/isolated/transfer' => 1,
                        'margin/isolated/account' => 1,
                        'margin/isolated/pair' => 1,
                        'margin/isolated/allPairs' => 1,
                        'margin/isolated/accountLimit' => 1,
                        'margin/interestRateHistory' => 1,
                        'margin/orderList' => 2,
                        'margin/allOrderList' => 10,
                        'margin/openOrderList' => 3,
                        'loan/income' => 1,
                        'fiat/orders' => 1,
                        'fiat/payments' => 1,
                        'futures/transfer' => 5,
                        'futures/loan/borrow/history' => 1,
                        'futures/loan/repay/history' => 1,
                        'futures/loan/wallet' => 1,
                        'futures/loan/configs' => 1,
                        'futures/loan/calcAdjustLevel' => 1,
                        'futures/loan/calcMaxAdjustAmount' => 1,
                        'futures/loan/adjustCollateral/history' => 1,
                        'futures/loan/liquidationHistory' => 1,
                        'rebate/taxQuery' => 1,
                        // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
                        'capital/config/getall' => 1, // get networks for withdrawing USDT ERC20 vs USDT Omni
                        'capital/deposit/address' => 1,
                        'capital/deposit/hisrec' => 1,
                        'capital/deposit/subAddress' => 1,
                        'capital/deposit/subHisrec' => 1,
                        'capital/withdraw/history' => 1,
                        'convert/tradeFlow' => 1,
                        'account/status' => 1,
                        'account/apiTradingStatus' => 1,
                        'account/apiRestrictions/ipRestriction' => 1,
                        'bnbBurn' => 1,
                        'sub-account/assets' => 1,
                        'sub-account/futures/account' => 1,
                        'sub-account/futures/accountSummary' => 1,
                        'sub-account/futures/positionRisk' => 1,
                        'sub-account/futures/internalTransfer' => 1,
                        'sub-account/list' => 1,
                        'sub-account/margin/account' => 1,
                        'sub-account/margin/accountSummary' => 1,
                        'sub-account/spotSummary' => 5,
                        'sub-account/status' => 1,
                        'sub-account/sub/transfer/history' => 1,
                        'sub-account/transfer/subUserHistory' => 1,
                        'sub-account/universalTransfer' => 1,
                        'managed-subaccount/asset' => 1,
                        // lending endpoints
                        'lending/daily/product/list' => 1,
                        'lending/daily/userLeftQuota' => 1,
                        'lending/daily/userRedemptionQuota' => 1,
                        'lending/daily/token/position' => 1,
                        'lending/union/account' => 1,
                        'lending/union/purchaseRecord' => 1,
                        'lending/union/redemptionRecord' => 1,
                        'lending/union/interestHistory' => 1,
                        'lending/project/list' => 1,
                        'lending/project/position/list' => 1,
                        // mining endpoints
                        'mining/pub/algoList' => 1,
                        'mining/pub/coinList' => 1,
                        'mining/worker/detail' => 5,
                        'mining/worker/list' => 5,
                        'mining/payment/list' => 5,
                        'mining/statistics/user/status' => 5,
                        'mining/statistics/user/list' => 5,
                        // liquid swap endpoints
                        'bswap/pools' => 1,
                        'bswap/liquidity' => array( 'cost' => 1, 'noPoolId' => 10 ),
                        'bswap/liquidityOps' => 2,
                        'bswap/quote' => 2,
                        'bswap/swap' => 1,
                        'bswap/poolConfigure' => 1,
                        'bswap/addLiquidityPreview' => 1,
                        'bswap/removeLiquidityPreview' => 1,
                        // leveraged token endpoints
                        'blvt/tokenInfo' => 1,
                        'blvt/subscribe/record' => 1,
                        'blvt/redeem/record' => 1,
                        'blvt/userLimit' => 1,
                        // broker api
                        'apiReferral/ifNewUser' => 1,
                        'apiReferral/customization' => 1,
                        'apiReferral/userCustomization' => 1,
                        'apiReferral/rebate/recentRecord' => 1,
                        'apiReferral/rebate/historicalRecord' => 1,
                        'apiReferral/kickback/recentRecord' => 1,
                        'apiReferral/kickback/historicalRecord' => 1,
                        // brokerage API
                        'broker/subAccountApi' => 1,
                        'broker/subAccount' => 1,
                        'broker/subAccountApi/commission/futures' => 1,
                        'broker/subAccountApi/commission/coinFutures' => 1,
                        'broker/info' => 1,
                        'broker/transfer' => 1,
                        'broker/transfer/futures' => 1,
                        'broker/rebate/recentRecord' => 1,
                        'broker/rebate/historicalRecord' => 1,
                        'broker/subAccount/bnbBurn/status' => 1,
                        'broker/subAccount/depositHist' => 1,
                        'broker/subAccount/spotSummary' => 1,
                        'broker/subAccount/marginSummary' => 1,
                        'broker/subAccount/futuresSummary' => 1,
                        'broker/rebate/futures/recentRecord' => 1,
                        'broker/subAccountApi/ipRestriction' => 1,
                        'broker/universalTransfer' => 1,
                        // v2 not supported yet
                        // GET /sapi/v2/broker/subAccount/futuresSummary
                        'account/apiRestrictions' => 1,
                        // c2c / p2p
                        'c2c/orderMatch/listUserOrderHistory' => 1,
                    ),
                    'post' => array(
                        'asset/dust' => 1,
                        'asset/transfer' => 1,
                        'asset/get-funding-asset' => 1,
                        'account/disableFastWithdrawSwitch' => 1,
                        'account/enableFastWithdrawSwitch' => 1,
                        'account/apiRestrictions/ipRestriction' => 1,
                        'account/apiRestrictions/ipRestriction/ipList' => 1,
                        'capital/withdraw/apply' => 1,
                        'margin/transfer' => 1,
                        'margin/loan' => 1,
                        'margin/repay' => 1,
                        'margin/order' => 4,
                        'margin/order/oco' => 1,
                        'margin/isolated/create' => 1,
                        'margin/isolated/transfer' => 1,
                        'margin/isolated/account' => 1,
                        'bnbBurn' => 1,
                        'sub-account/margin/transfer' => 1,
                        'sub-account/margin/enable' => 1,
                        // 'sub-account/margin/enable' => 1,
                        'sub-account/futures/enable' => 1,
                        'sub-account/futures/transfer' => 1,
                        'sub-account/futures/internalTransfer' => 1,
                        'sub-account/transfer/subToSub' => 1,
                        'sub-account/transfer/subToMaster' => 1,
                        'sub-account/universalTransfer' => 1,
                        'managed-subaccount/deposit' => 1,
                        'managed-subaccount/withdraw' => 1,
                        'userDataStream' => 1,
                        'userDataStream/isolated' => 1,
                        'futures/transfer' => 1,
                        'futures/loan/borrow' => 20,
                        'futures/loan/repay' => 20,
                        'futures/loan/adjustCollateral' => 20,
                        // lending
                        'lending/customizedFixed/purchase' => 1,
                        'lending/daily/purchase' => 1,
                        'lending/daily/redeem' => 1,
                        // liquid swap endpoints
                        'bswap/liquidityAdd' => 2,
                        'bswap/liquidityRemove' => 2,
                        'bswap/swap' => 2,
                        // leveraged token endpoints
                        'blvt/subscribe' => 1,
                        'blvt/redeem' => 1,
                        // brokerage API
                        'apiReferral/customization' => 1,
                        'apiReferral/userCustomization' => 1,
                        'apiReferral/rebate/historicalRecord' => 1,
                        'apiReferral/kickback/historicalRecord' => 1,
                        'broker/subAccount' => 1,
                        'broker/subAccount/margin' => 1,
                        'broker/subAccount/futures' => 1,
                        'broker/subAccountApi' => 1,
                        'broker/subAccountApi/permission' => 1,
                        'broker/subAccountApi/commission' => 1,
                        'broker/subAccountApi/commission/futures' => 1,
                        'broker/subAccountApi/commission/coinFutures' => 1,
                        'broker/transfer' => 1,
                        'broker/transfer/futures' => 1,
                        'broker/rebate/historicalRecord' => 1,
                        'broker/subAccount/bnbBurn/spot' => 1,
                        'broker/subAccount/bnbBurn/marginInterest' => 1,
                        'broker/subAccount/blvt' => 1,
                        'broker/subAccountApi/ipRestriction' => 1,
                        'broker/subAccountApi/ipRestriction/ipList' => 1,
                        'broker/universalTransfer' => 1,
                        'broker/subAccountApi/permission/universalTransfer' => 1,
                        'broker/subAccountApi/permission/vanillaOptions' => 1,
                    ),
                    'put' => array(
                        'userDataStream' => 1,
                        'userDataStream/isolated' => 1,
                    ),
                    'delete' => array(
                        'account/apiRestrictions/ipRestriction/ipList' => 1,
                        'margin/openOrders' => 1,
                        'margin/order' => 1,
                        'margin/orderList' => 1,
                        'margin/isolated/account' => 1,
                        'userDataStream' => 1,
                        'userDataStream/isolated' => 1,
                        // brokerage API
                        'broker/subAccountApi' => 1,
                        'broker/subAccountApi/ipRestriction/ipList' => 1,
                    ),
                ),
                // deprecated
                'wapi' => array(
                    'post' => array(
                        'withdraw' => 1,
                        'sub-account/transfer' => 1,
                    ),
                    'get' => array(
                        'depositHistory' => 1,
                        'withdrawHistory' => 1,
                        'depositAddress' => 1,
                        'accountStatus' => 1,
                        'systemStatus' => 1,
                        'apiTradingStatus' => 1,
                        'userAssetDribbletLog' => 1,
                        'tradeFee' => 1,
                        'assetDetail' => 1,
                        'sub-account/list' => 1,
                        'sub-account/transfer/history' => 1,
                        'sub-account/assets' => 1,
                    ),
                ),
                'dapiPublic' => array(
                    'get' => array(
                        'ping' => 1,
                        'time' => 1,
                        'exchangeInfo' => 1,
                        'depth' => array( 'cost' => 2, 'byLimit' => array( array( 50, 2 ), array( 100, 5 ), array( 500, 10 ), array( 1000, 20 ) ) ),
                        'trades' => 1,
                        'historicalTrades' => 20,
                        'aggTrades' => 20,
                        'premiumIndex' => 10,
                        'fundingRate' => 1,
                        'klines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'continuousKlines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'indexPriceKlines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'markPriceKlines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'ticker/24hr' => array( 'cost' => 1, 'noSymbol' => 40 ),
                        'ticker/price' => array( 'cost' => 1, 'noSymbol' => 2 ),
                        'ticker/bookTicker' => array( 'cost' => 1, 'noSymbol' => 2 ),
                        'openInterest' => 1,
                    ),
                ),
                'dapiData' => array(
                    'get' => array(
                        'openInterestHist' => 1,
                        'topLongShortAccountRatio' => 1,
                        'topLongShortPositionRatio' => 1,
                        'globalLongShortAccountRatio' => 1,
                        'takerBuySellVol' => 1,
                        'basis' => 1,
                    ),
                ),
                'dapiPrivate' => array(
                    'get' => array(
                        'positionSide/dual' => 30,
                        'order' => 1,
                        'openOrder' => 1,
                        'openOrders' => array( 'cost' => 1, 'noSymbol' => 5 ),
                        'allOrders' => array( 'cost' => 20, 'noSymbol' => 40 ),
                        'balance' => 1,
                        'account' => 5,
                        'positionMargin/history' => 1,
                        'positionRisk' => 1,
                        'userTrades' => array( 'cost' => 20, 'noSymbol' => 40 ),
                        'income' => 20,
                        'leverageBracket' => 1,
                        'forceOrders' => array( 'cost' => 20, 'noSymbol' => 50 ),
                        'adlQuantile' => 5,
                    ),
                    'post' => array(
                        'positionSide/dual' => 1,
                        'order' => 4,
                        'batchOrders' => 5,
                        'countdownCancelAll' => 10,
                        'leverage' => 1,
                        'marginType' => 1,
                        'positionMargin' => 1,
                        'listenKey' => 1,
                    ),
                    'put' => array(
                        'listenKey' => 1,
                    ),
                    'delete' => array(
                        'order' => 1,
                        'allOpenOrders' => 1,
                        'batchOrders' => 5,
                        'listenKey' => 1,
                    ),
                ),
                'dapiPrivateV2' => array(
                    'get' => array(
                        'leverageBracket' => 1,
                    ),
                ),
                'fapiPublic' => array(
                    'get' => array(
                        'ping' => 1,
                        'time' => 1,
                        'exchangeInfo' => 1,
                        'depth' => array( 'cost' => 2, 'byLimit' => array( array( 50, 2 ), array( 100, 5 ), array( 500, 10 ), array( 1000, 20 ) ) ),
                        'trades' => 1,
                        'historicalTrades' => 20,
                        'aggTrades' => 20,
                        'klines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'continuousKlines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'markPriceKlines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'indexPriceKlines' => array( 'cost' => 1, 'byLimit' => array( array( 99, 1 ), array( 499, 2 ), array( 1000, 5 ), array( 10000, 10 ) ) ),
                        'fundingRate' => 1,
                        'premiumIndex' => 1,
                        'ticker/24hr' => array( 'cost' => 1, 'noSymbol' => 40 ),
                        'ticker/price' => array( 'cost' => 1, 'noSymbol' => 2 ),
                        'ticker/bookTicker' => array( 'cost' => 1, 'noSymbol' => 2 ),
                        'openInterest' => 1,
                        'indexInfo' => 1,
                        'apiTradingStatus' => array( 'cost' => 1, 'noSymbol' => 10 ),
                        'lvtKlines' => 1,
                    ),
                ),
                'fapiData' => array(
                    'get' => array(
                        'openInterestHist' => 1,
                        'topLongShortAccountRatio' => 1,
                        'topLongShortPositionRatio' => 1,
                        'globalLongShortAccountRatio' => 1,
                        'takerlongshortRatio' => 1,
                    ),
                ),
                'fapiPrivate' => array(
                    'get' => array(
                        'forceOrders' => array( 'cost' => 20, 'noSymbol' => 50 ),
                        'allOrders' => 5,
                        'openOrder' => 1,
                        'openOrders' => 1,
                        'order' => 1,
                        'account' => 5,
                        'balance' => 5,
                        'leverageBracket' => 1,
                        'positionMargin/history' => 1,
                        'positionRisk' => 5,
                        'positionSide/dual' => 30,
                        'userTrades' => 5,
                        'income' => 30,
                        'commissionRate' => 20,
                        'apiTradingStatus' => 1,
                        'multiAssetsMargin' => 30,
                        // broker endpoints
                        'apiReferral/ifNewUser' => 1,
                        'apiReferral/customization' => 1,
                        'apiReferral/userCustomization' => 1,
                        'apiReferral/traderNum' => 1,
                        'apiReferral/overview' => 1,
                        'apiReferral/tradeVol' => 1,
                        'apiReferral/rebateVol' => 1,
                        'apiReferral/traderSummary' => 1,
                        'adlQuantile' => 5,
                    ),
                    'post' => array(
                        'batchOrders' => 5,
                        'positionSide/dual' => 1,
                        'positionMargin' => 1,
                        'marginType' => 1,
                        'order' => 4,
                        'leverage' => 1,
                        'listenKey' => 1,
                        'countdownCancelAll' => 10,
                        'multiAssetsMargin' => 1,
                        // broker endpoints
                        'apiReferral/customization' => 1,
                        'apiReferral/userCustomization' => 1,
                    ),
                    'put' => array(
                        'listenKey' => 1,
                    ),
                    'delete' => array(
                        'batchOrders' => 1,
                        'order' => 1,
                        'allOpenOrders' => 1,
                        'listenKey' => 1,
                    ),
                ),
                'fapiPrivateV2' => array(
                    'get' => array(
                        'account' => 1,
                        'balance' => 1,
                        'positionRisk' => 1,
                    ),
                ),
                'public' => array(
                    'get' => array(
                        'ping' => 1,
                        'time' => 1,
                        'depth' => array( 'cost' => 1, 'byLimit' => array( array( 100, 1 ), array( 500, 5 ), array( 1000, 10 ), array( 5000, 50 ) ) ),
                        'trades' => 1,
                        'aggTrades' => 1,
                        'historicalTrades' => 5,
                        'klines' => 1,
                        'ticker/24hr' => array( 'cost' => 1, 'noSymbol' => 40 ),
                        'ticker/price' => array( 'cost' => 1, 'noSymbol' => 2 ),
                        'ticker/bookTicker' => array( 'cost' => 1, 'noSymbol' => 2 ),
                        'exchangeInfo' => 10,
                    ),
                    'put' => array(
                        'userDataStream' => 1,
                    ),
                    'post' => array(
                        'userDataStream' => 1,
                    ),
                    'delete' => array(
                        'userDataStream' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'allOrderList' => 10, // oco
                        'openOrderList' => 3, // oco
                        'orderList' => 2, // oco
                        'order' => 2,
                        'openOrders' => array( 'cost' => 3, 'noSymbol' => 40 ),
                        'allOrders' => 10,
                        'account' => 10,
                        'myTrades' => 10,
                        'rateLimit/order' => 20,
                    ),
                    'post' => array(
                        'order/oco' => 1,
                        'order' => 4,
                        'order/test' => 1,
                    ),
                    'delete' => array(
                        'openOrders' => 1, // added on 2020-04-25 for canceling all open orders per symbol
                        'orderList' => 1, // oco
                        'order' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.001'),
                    'maker' => $this->parse_number('0.001'),
                ),
                'future' => array(
                    'trading' => array(
                        'feeSide' => 'quote',
                        'tierBased' => true,
                        'percentage' => true,
                        'taker' => $this->parse_number('0.000400'),
                        'maker' => $this->parse_number('0.000200'),
                        'tiers' => array(
                            'taker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000400') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000400') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000350') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.000320') ),
                                array( $this->parse_number('22500'), $this->parse_number('0.000300') ),
                                array( $this->parse_number('50000'), $this->parse_number('0.000270') ),
                                array( $this->parse_number('100000'), $this->parse_number('0.000250') ),
                                array( $this->parse_number('200000'), $this->parse_number('0.000220') ),
                                array( $this->parse_number('400000'), $this->parse_number('0.000200') ),
                                array( $this->parse_number('750000'), $this->parse_number('0.000170') ),
                            ),
                            'maker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000200') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000160') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000140') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.000120') ),
                                array( $this->parse_number('22500'), $this->parse_number('0.000100') ),
                                array( $this->parse_number('50000'), $this->parse_number('0.000080') ),
                                array( $this->parse_number('100000'), $this->parse_number('0.000060') ),
                                array( $this->parse_number('200000'), $this->parse_number('0.000040') ),
                                array( $this->parse_number('400000'), $this->parse_number('0.000020') ),
                                array( $this->parse_number('750000'), $this->parse_number('0') ),
                            ),
                        ),
                    ),
                ),
                'delivery' => array(
                    'trading' => array(
                        'feeSide' => 'base',
                        'tierBased' => true,
                        'percentage' => true,
                        'taker' => $this->parse_number('0.000500'),
                        'maker' => $this->parse_number('0.000100'),
                        'tiers' => array(
                            'taker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000500') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000450') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000400') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.000300') ),
                                array( $this->parse_number('22500'), $this->parse_number('0.000250') ),
                                array( $this->parse_number('50000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('100000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('200000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('400000'), $this->parse_number('0.000240') ),
                                array( $this->parse_number('750000'), $this->parse_number('0.000240') ),
                            ),
                            'maker' => array(
                                array( $this->parse_number('0'), $this->parse_number('0.000100') ),
                                array( $this->parse_number('250'), $this->parse_number('0.000080') ),
                                array( $this->parse_number('2500'), $this->parse_number('0.000050') ),
                                array( $this->parse_number('7500'), $this->parse_number('0.0000030') ),
                                array( $this->parse_number('22500'), $this->parse_number('0') ),
                                array( $this->parse_number('50000'), $this->parse_number('-0.000050') ),
                                array( $this->parse_number('100000'), $this->parse_number('-0.000060') ),
                                array( $this->parse_number('200000'), $this->parse_number('-0.000070') ),
                                array( $this->parse_number('400000'), $this->parse_number('-0.000080') ),
                                array( $this->parse_number('750000'), $this->parse_number('-0.000090') ),
                            ),
                        ),
                    ),
                ),
            ),
            'commonCurrencies' => array(
                'BCC' => 'BCC', // kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848
                'YOYO' => 'YOYOW',
            ),
            // exchange-specific options
            'options' => array(
                'fetchCurrencies' => true, // this is a private call and it requires API keys
                // 'fetchTradesMethod' => 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades
                'defaultTimeInForce' => 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
                'defaultType' => 'spot', // 'spot', 'future', 'margin', 'delivery'
                'hasAlreadyAuthenticatedSuccessfully' => false,
                'warnOnFetchOpenOrdersWithoutSymbol' => true,
                'fetchPositions' => 'positionRisk', // or 'account'
                'recvWindow' => 5 * 1000, // 5 sec, binance default
                'timeDifference' => 0, // the difference between system clock and Binance clock
                'adjustForTimeDifference' => false, // controls the adjustment logic upon instantiation
                'newOrderRespType' => array(
                    'market' => 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                    'limit' => 'FULL', // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)
                ),
                'quoteOrderQty' => true, // whether market orders support amounts in quote currency
                'broker' => array(
                    'spot' => 'x-R4BD3S82',
                    'margin' => 'x-R4BD3S82',
                    'future' => 'x-xcKtGhcu',
                    'delivery' => 'x-xcKtGhcu',
                ),
                'accountsByType' => array(
                    'main' => 'MAIN',
                    'spot' => 'MAIN',
                    'funding' => 'FUNDING',
                    'margin' => 'MARGIN',
                    'future' => 'UMFUTURE',
                    'delivery' => 'CMFUTURE',
                    'mining' => 'MINING',
                ),
                'typesByAccount' => array(
                    'MAIN' => 'spot',
                    'FUNDING' => 'funding',
                    'MARGIN' => 'margin',
                    'UMFUTURE' => 'future',
                    'CMFUTURE' => 'delivery',
                    'MINING' => 'mining',
                ),
                'networks' => array(
                    'ERC20' => 'ETH',
                    'TRC20' => 'TRX',
                    'BEP2' => 'BNB',
                    'BEP20' => 'BSC',
                    'OMNI' => 'OMNI',
                    'EOS' => 'EOS',
                    'SPL' => 'SOL',
                ),
                'reverseNetworks' => array(
                    'tronscan.org' => 'TRC20',
                    'etherscan.io' => 'ERC20',
                    'bscscan.com' => 'BSC',
                    'explorer.binance.org' => 'BEP2',
                    'bithomp.com' => 'XRP',
                    'bloks.io' => 'EOS',
                    'stellar.expert' => 'XLM',
                    'blockchair.com/bitcoin' => 'BTC',
                    'blockchair.com/bitcoin-cash' => 'BCH',
                    'blockchair.com/ecash' => 'XEC',
                    'explorer.litecoin.net' => 'LTC',
                    'explorer.avax.network' => 'AVAX',
                    'solscan.io' => 'SOL',
                    'polkadot.subscan.io' => 'DOT',
                    'dashboard.internetcomputer.org' => 'ICP',
                    'explorer.chiliz.com' => 'CHZ',
                    'cardanoscan.io' => 'ADA',
                    'mainnet.theoan.com' => 'AION',
                    'algoexplorer.io' => 'ALGO',
                    'explorer.ambrosus.com' => 'AMB',
                    'viewblock.io/zilliqa' => 'ZIL',
                    'viewblock.io/arweave' => 'AR',
                    'explorer.ark.io' => 'ARK',
                    'atomscan.com' => 'ATOM',
                    'www.mintscan.io' => 'CTK',
                    'explorer.bitcoindiamond.org' => 'BCD',
                    'btgexplorer.com' => 'BTG',
                    'bts.ai' => 'BTS',
                    'explorer.celo.org' => 'CELO',
                    'explorer.nervos.org' => 'CKB',
                    'cerebro.cortexlabs.ai' => 'CTXC',
                    'chainz.cryptoid.info' => 'VIA',
                    'explorer.dcrdata.org' => 'DCR',
                    'digiexplorer.info' => 'DGB',
                    'dock.subscan.io' => 'DOCK',
                    'dogechain.info' => 'DOGE',
                    'explorer.elrond.com' => 'EGLD',
                    'blockscout.com' => 'ETC',
                    'explore-fetchhub.fetch.ai' => 'FET',
                    'filfox.info' => 'FIL',
                    'fio.bloks.io' => 'FIO',
                    'explorer.firo.org' => 'FIRO',
                    'neoscan.io' => 'NEO',
                    'ftmscan.com' => 'FTM',
                    'explorer.gochain.io' => 'GO',
                    'block.gxb.io' => 'GXS',
                    'hash-hash.info' => 'HBAR',
                    'www.hiveblockexplorer.com' => 'HIVE',
                    'explorer.helium.com' => 'HNT',
                    'tracker.icon.foundation' => 'ICX',
                    'www.iostabc.com' => 'IOST',
                    'explorer.iota.org' => 'IOTA',
                    'iotexscan.io' => 'IOTX',
                    'irishub.iobscan.io' => 'IRIS',
                    'kava.mintscan.io' => 'KAVA',
                    'scope.klaytn.com' => 'KLAY',
                    'kmdexplorer.io' => 'KMD',
                    'kusama.subscan.io' => 'KSM',
                    'explorer.lto.network' => 'LTO',
                    'polygonscan.com' => 'POLYGON',
                    'explorer.ont.io' => 'ONT',
                    'minaexplorer.com' => 'MINA',
                    'nanolooker.com' => 'NANO',
                    'explorer.nebulas.io' => 'NAS',
                    'explorer.nbs.plus' => 'NBS',
                    'explorer.nebl.io' => 'NEBL',
                    'nulscan.io' => 'NULS',
                    'nxscan.com' => 'NXS',
                    'explorer.harmony.one' => 'ONE',
                    'explorer.poa.network' => 'POA',
                    'qtum.info' => 'QTUM',
                    'explorer.rsk.co' => 'RSK',
                    'www.oasisscan.com' => 'ROSE',
                    'ravencoin.network' => 'RVN',
                    'sc.tokenview.com' => 'SC',
                    'secretnodes.com' => 'SCRT',
                    'explorer.skycoin.com' => 'SKY',
                    'steemscan.com' => 'STEEM',
                    'explorer.stacks.co' => 'STX',
                    'www.thetascan.io' => 'THETA',
                    'scan.tomochain.com' => 'TOMO',
                    'explore.vechain.org' => 'VET',
                    'explorer.vite.net' => 'VITE',
                    'www.wanscan.org' => 'WAN',
                    'wavesexplorer.com' => 'WAVES',
                    'wax.eosx.io' => 'WAXP',
                    'waltonchain.pro' => 'WTC',
                    'chain.nem.ninja' => 'XEM',
                    'verge-blockchain.info' => 'XVG',
                    'explorer.yoyow.org' => 'YOYOW',
                    'explorer.zcha.in' => 'ZEC',
                    'explorer.zensystem.io' => 'ZEN',
                ),
                'impliedNetworks' => array(
                    'ETH' => array( 'ERC20' => 'ETH' ),
                    'TRX' => array( 'TRC20' => 'TRX' ),
                ),
                'legalMoney' => array(
                    'MXN' => true,
                    'UGX' => true,
                    'SEK' => true,
                    'CHF' => true,
                    'VND' => true,
                    'AED' => true,
                    'DKK' => true,
                    'KZT' => true,
                    'HUF' => true,
                    'PEN' => true,
                    'PHP' => true,
                    'USD' => true,
                    'TRY' => true,
                    'EUR' => true,
                    'NGN' => true,
                    'PLN' => true,
                    'BRL' => true,
                    'ZAR' => true,
                    'KES' => true,
                    'ARS' => true,
                    'RUB' => true,
                    'AUD' => true,
                    'NOK' => true,
                    'CZK' => true,
                    'GBP' => true,
                    'UAH' => true,
                    'GHS' => true,
                    'HKD' => true,
                    'CAD' => true,
                    'INR' => true,
                    'JPY' => true,
                    'NZD' => true,
                ),
            ),
            // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2
            'exceptions' => array(
                'exact' => array(
                    'System is under maintenance.' => '\\ccxt\\OnMaintenance', // array("code":1,"msg":"System is under maintenance.")
                    'System abnormality' => '\\ccxt\\ExchangeError', // array("code":-1000,"msg":"System abnormality")
                    'You are not authorized to execute this request.' => '\\ccxt\\PermissionDenied', // array("msg":"You are not authorized to execute this request.")
                    'API key does not exist' => '\\ccxt\\AuthenticationError',
                    'Order would trigger immediately.' => '\\ccxt\\OrderImmediatelyFillable',
                    'Stop price would trigger immediately.' => '\\ccxt\\OrderImmediatelyFillable', // array("code":-2010,"msg":"Stop price would trigger immediately.")
                    'Order would immediately match and take.' => '\\ccxt\\OrderImmediatelyFillable', // array("code":-2010,"msg":"Order would immediately match and take.")
                    'Account has insufficient balance for requested action.' => '\\ccxt\\InsufficientFunds',
                    'Rest API trading is not enabled.' => '\\ccxt\\ExchangeNotAvailable',
                    "You don't have permission." => '\\ccxt\\PermissionDenied', // array("msg":"You don't have permission.","success":false)
                    'Market is closed.' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1013,"msg":"Market is closed.")
                    'Too many requests. Please try again later.' => '\\ccxt\\DDoSProtection', // array("msg":"Too many requests. Please try again later.","success":false)
                    '-1000' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1000,"msg":"An unknown error occured while processing the request.")
                    '-1001' => '\\ccxt\\ExchangeNotAvailable', // 'Internal error; unable to process your request. Please try again.'
                    '-1002' => '\\ccxt\\AuthenticationError', // 'You are not authorized to execute this request.'
                    '-1003' => '\\ccxt\\RateLimitExceeded', // array("code":-1003,"msg":"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API.")
                    '-1013' => '\\ccxt\\InvalidOrder', // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL
                    '-1015' => '\\ccxt\\RateLimitExceeded', // 'Too many new orders; current limit is %s orders per %s.'
                    '-1016' => '\\ccxt\\ExchangeNotAvailable', // 'This service is no longer available.',
                    '-1020' => '\\ccxt\\BadRequest', // 'This operation is not supported.'
                    '-1021' => '\\ccxt\\InvalidNonce', // 'your time is ahead of server'
                    '-1022' => '\\ccxt\\AuthenticationError', // array("code":-1022,"msg":"Signature for this request is not valid.")
                    '-1100' => '\\ccxt\\BadRequest', // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'
                    '-1101' => '\\ccxt\\BadRequest', // Too many parameters; expected %s and received %s.
                    '-1102' => '\\ccxt\\BadRequest', // Param %s or %s must be sent, but both were empty
                    '-1103' => '\\ccxt\\BadRequest', // An unknown parameter was sent.
                    '-1104' => '\\ccxt\\BadRequest', // Not all sent parameters were read, read 8 parameters but was sent 9
                    '-1105' => '\\ccxt\\BadRequest', // Parameter %s was empty.
                    '-1106' => '\\ccxt\\BadRequest', // Parameter %s sent when not required.
                    '-1111' => '\\ccxt\\BadRequest', // Precision is over the maximum defined for this asset.
                    '-1112' => '\\ccxt\\InvalidOrder', // No orders on book for symbol.
                    '-1114' => '\\ccxt\\BadRequest', // TimeInForce parameter sent when not required.
                    '-1115' => '\\ccxt\\BadRequest', // Invalid timeInForce.
                    '-1116' => '\\ccxt\\BadRequest', // Invalid orderType.
                    '-1117' => '\\ccxt\\BadRequest', // Invalid side.
                    '-1118' => '\\ccxt\\BadRequest', // New client order ID was empty.
                    '-1119' => '\\ccxt\\BadRequest', // Original client order ID was empty.
                    '-1120' => '\\ccxt\\BadRequest', // Invalid interval.
                    '-1121' => '\\ccxt\\BadSymbol', // Invalid symbol.
                    '-1125' => '\\ccxt\\AuthenticationError', // This listenKey does not exist.
                    '-1127' => '\\ccxt\\BadRequest', // More than %s hours between startTime and endTime.
                    '-1128' => '\\ccxt\\BadRequest', // array("code":-1128,"msg":"Combination of optional parameters invalid.")
                    '-1130' => '\\ccxt\\BadRequest', // Data sent for paramter %s is not valid.
                    '-1131' => '\\ccxt\\BadRequest', // recvWindow must be less than 60000
                    '-2008' => '\\ccxt\\AuthenticationError', // array("code":-2008,"msg":"Invalid Api-Key ID.")
                    '-2010' => '\\ccxt\\ExchangeError', // generic error code for createOrder -> 'Account has insufficient balance for requested action.', array("code":-2010,"msg":"Rest API trading is not enabled."), etc...
                    '-2011' => '\\ccxt\\OrderNotFound', // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'
                    '-2013' => '\\ccxt\\OrderNotFound', // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'
                    '-2014' => '\\ccxt\\AuthenticationError', // array( "code":-2014, "msg" => "API-key format invalid." )
                    '-2015' => '\\ccxt\\AuthenticationError', // "Invalid API-key, IP, or permissions for action."
                    '-2019' => '\\ccxt\\InsufficientFunds', // array("code":-2019,"msg":"Margin is insufficient.")
                    '-3005' => '\\ccxt\\InsufficientFunds', // array("code":-3005,"msg":"Transferring out not allowed. Transfer out amount exceeds max amount.")
                    '-3006' => '\\ccxt\\InsufficientFunds', // array("code":-3006,"msg":"Your borrow amount has exceed maximum borrow amount.")
                    '-3008' => '\\ccxt\\InsufficientFunds', // array("code":-3008,"msg":"Borrow not allowed. Your borrow amount has exceed maximum borrow amount.")
                    '-3010' => '\\ccxt\\ExchangeError', // array("code":-3010,"msg":"Repay not allowed. Repay amount exceeds borrow amount.")
                    '-3015' => '\\ccxt\\ExchangeError', // array("code":-3015,"msg":"Repay amount exceeds borrow amount.")
                    '-3022' => '\\ccxt\\AccountSuspended', // You account's trading is banned.
                    '-4028' => '\\ccxt\\BadRequest', // array("code":-4028,"msg":"Leverage 100 is not valid")
                    '-3020' => '\\ccxt\\InsufficientFunds', // array("code":-3020,"msg":"Transfer out amount exceeds max amount.")
                    '-3041' => '\\ccxt\\InsufficientFunds', // array("code":-3041,"msg":"Balance is not enough")
                    '-5013' => '\\ccxt\\InsufficientFunds', // Asset transfer failed => insufficient balance"
                    '-11008' => '\\ccxt\\InsufficientFunds', // array("code":-11008,"msg":"Exceeding the account's maximum borrowable limit.")
                    '-4051' => '\\ccxt\\InsufficientFunds', // array("code":-4051,"msg":"Isolated balance insufficient.")
                ),
                'broad' => array(
                    'has no operation privilege' => '\\ccxt\\PermissionDenied',
                    'MAX_POSITION' => '\\ccxt\\InvalidOrder', // array("code":-2010,"msg":"Filter failure => MAX_POSITION")
                ),
            ),
        ));
    }

    public function cost_to_precision($symbol, $cost) {
        return $this->decimal_to_precision($cost, TRUNCATE, $this->markets[$symbol]['precision']['quote'], $this->precisionMode, $this->paddingMode);
    }

    public function currency_to_precision($currency, $fee) {
        // info is available in currencies only if the user has configured his api keys
        if ($this->safe_value($this->currencies[$currency], 'precision') !== null) {
            return $this->decimal_to_precision($fee, TRUNCATE, $this->currencies[$currency]['precision'], $this->precisionMode, $this->paddingMode);
        } else {
            return $this->number_to_string($fee);
        }
    }

    public function nonce() {
        return $this->milliseconds() - $this->options['timeDifference'];
    }

    public function fetch_time($params = array ()) {
        $defaultType = $this->safe_string_2($this->options, 'fetchTime', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $method = 'publicGetTime';
        if ($type === 'future') {
            $method = 'fapiPublicGetTime';
        } else if ($type === 'delivery') {
            $method = 'dapiPublicGetTime';
        }
        $response = $this->$method ($query);
        return $this->safe_integer($response, 'serverTime');
    }

    public function load_time_difference($params = array ()) {
        $serverTime = $this->fetch_time($params);
        $after = $this->milliseconds();
        $this->options['timeDifference'] = $after - $serverTime;
        return $this->options['timeDifference'];
    }

    public function fetch_currencies($params = array ()) {
        $fetchCurrenciesEnabled = $this->safe_value($this->options, 'fetchCurrencies');
        if (!$fetchCurrenciesEnabled) {
            return null;
        }
        // this endpoint requires authentication
        // while fetchCurrencies is a public API method by design
        // therefore we check the keys here
        // and fallback to generating the currencies from the markets
        if (!$this->check_required_credentials(false)) {
            return null;
        }
        // sandbox/testnet does not support sapi endpoints
        $apiBackup = $this->safe_string($this->urls, 'apiBackup');
        if ($apiBackup !== null) {
            return null;
        }
        $response = $this->sapiGetCapitalConfigGetall ($params);
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            //
            //     {
            //         coin => 'LINK',
            //         depositAllEnable => true,
            //         withdrawAllEnable => true,
            //         $name => 'ChainLink',
            //         free => '0.06168',
            //         locked => '0',
            //         freeze => '0',
            //         withdrawing => '0',
            //         ipoing => '0',
            //         ipoable => '0',
            //         storage => '0',
            //         isLegalMoney => false,
            //         $trading => true,
            //         $networkList => [
            //             array(
            //                 $network => 'BNB',
            //                 coin => 'LINK',
            //                 withdrawIntegerMultiple => '0',
            //                 $isDefault => false,
            //                 $depositEnable => true,
            //                 $withdrawEnable => true,
            //                 depositDesc => '',
            //                 withdrawDesc => '',
            //                 specialTips => 'Both a MEMO and an Address are required to successfully deposit your LINK BEP2 tokens to Binance.',
            //                 $name => 'BEP2',
            //                 resetAddressStatus => false,
            //                 addressRegex => '^(bnb1)[0-9a-z]{38}$',
            //                 memoRegex => '^[0-9A-Za-z\\-_]array(1,120)$',
            //                 $withdrawFee => '0.002',
            //                 withdrawMin => '0.01',
            //                 withdrawMax => '9999999',
            //                 minConfirm => 1,
            //                 unLockConfirm => 0
            //             ),
            //             array(
            //                 $network => 'BSC',
            //                 coin => 'LINK',
            //                 withdrawIntegerMultiple => '0.00000001',
            //                 $isDefault => false,
            //                 $depositEnable => true,
            //                 $withdrawEnable => true,
            //                 depositDesc => '',
            //                 withdrawDesc => '',
            //                 specialTips => '',
            //                 $name => 'BEP20 (BSC)',
            //                 resetAddressStatus => false,
            //                 addressRegex => '^(0x)[0-9A-Fa-f]{40}$',
            //                 memoRegex => '',
            //                 $withdrawFee => '0.005',
            //                 withdrawMin => '0.01',
            //                 withdrawMax => '9999999',
            //                 minConfirm => 15,
            //                 unLockConfirm => 0
            //             ),
            //             {
            //                 $network => 'ETH',
            //                 coin => 'LINK',
            //                 withdrawIntegerMultiple => '0.00000001',
            //                 $isDefault => true,
            //                 $depositEnable => true,
            //                 $withdrawEnable => true,
            //                 depositDesc => '',
            //                 withdrawDesc => '',
            //                 $name => 'ERC20',
            //                 resetAddressStatus => false,
            //                 addressRegex => '^(0x)[0-9A-Fa-f]{40}$',
            //                 memoRegex => '',
            //                 $withdrawFee => '0.34',
            //                 withdrawMin => '0.68',
            //                 withdrawMax => '0',
            //                 minConfirm => 12,
            //                 unLockConfirm => 0
            //             }
            //         ]
            //     }
            //
            $entry = $response[$i];
            $id = $this->safe_string($entry, 'coin');
            $name = $this->safe_string($entry, 'name');
            $code = $this->safe_currency_code($id);
            $precision = null;
            $isWithdrawEnabled = true;
            $isDepositEnabled = true;
            $networkList = $this->safe_value($entry, 'networkList', array());
            $fees = array();
            $fee = null;
            for ($j = 0; $j < count($networkList); $j++) {
                $networkItem = $networkList[$j];
                $network = $this->safe_string($networkItem, 'network');
                // $name = $this->safe_string($networkItem, 'name');
                $withdrawFee = $this->safe_number($networkItem, 'withdrawFee');
                $depositEnable = $this->safe_value($networkItem, 'depositEnable');
                $withdrawEnable = $this->safe_value($networkItem, 'withdrawEnable');
                $isDepositEnabled = $isDepositEnabled || $depositEnable;
                $isWithdrawEnabled = $isWithdrawEnabled || $withdrawEnable;
                $fees[$network] = $withdrawFee;
                $isDefault = $this->safe_value($networkItem, 'isDefault');
                if ($isDefault || $fee === null) {
                    $fee = $withdrawFee;
                }
            }
            $trading = $this->safe_value($entry, 'trading');
            $active = ($isWithdrawEnabled && $isDepositEnabled && $trading);
            $result[$code] = array(
                'id' => $id,
                'name' => $name,
                'code' => $code,
                'precision' => $precision,
                'info' => $entry,
                'active' => $active,
                'networks' => $networkList,
                'fee' => $fee,
                'fees' => $fees,
                'limits' => $this->limits,
            );
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        $defaultType = $this->safe_string_2($this->options, 'fetchMarkets', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        if (($type !== 'spot') && ($type !== 'future') && ($type !== 'margin') && ($type !== 'delivery')) {
            throw new ExchangeError($this->id . " does not support '" . $type . "' $type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'"); // eslint-disable-line quotes
        }
        $method = 'publicGetExchangeInfo';
        if ($type === 'future') {
            $method = 'fapiPublicGetExchangeInfo';
        } else if ($type === 'delivery') {
            $method = 'dapiPublicGetExchangeInfo';
        }
        $response = $this->$method ($query);
        //
        // $spot / $margin
        //
        //     {
        //         "timezone":"UTC",
        //         "serverTime":1575416692969,
        //         "rateLimits":array(
        //             array("rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200),
        //             array("rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":100),
        //             array("rateLimitType":"ORDERS","interval":"DAY","intervalNum":1,"limit":200000)
        //         ),
        //         "exchangeFilters":array(),
        //         "symbols":[
        //             array(
        //                 "symbol":"ETHBTC",
        //                 "status":"TRADING",
        //                 "baseAsset":"ETH",
        //                 "baseAssetPrecision":8,
        //                 "quoteAsset":"BTC",
        //                 "quotePrecision":8,
        //                 "baseCommissionPrecision":8,
        //                 "quoteCommissionPrecision":8,
        //                 "orderTypes":["LIMIT","LIMIT_MAKER","MARKET","STOP_LOSS_LIMIT","TAKE_PROFIT_LIMIT"],
        //                 "icebergAllowed":true,
        //                 "ocoAllowed":true,
        //                 "quoteOrderQtyMarketAllowed":true,
        //                 "isSpotTradingAllowed":true,
        //                 "isMarginTradingAllowed":true,
        //                 "filters":array(
        //                     array("filterType":"PRICE_FILTER","minPrice":"0.00000100","maxPrice":"100000.00000000","tickSize":"0.00000100"),
        //                     array("filterType":"PERCENT_PRICE","multiplierUp":"5","multiplierDown":"0.2","avgPriceMins":5),
        //                     array("filterType":"LOT_SIZE","minQty":"0.00100000","maxQty":"100000.00000000","stepSize":"0.00100000"),
        //                     array("filterType":"MIN_NOTIONAL","minNotional":"0.00010000","applyToMarket":true,"avgPriceMins":5),
        //                     array("filterType":"ICEBERG_PARTS","limit":10),
        //                     array("filterType":"MARKET_LOT_SIZE","minQty":"0.00000000","maxQty":"63100.00000000","stepSize":"0.00000000"),
        //                     array("filterType":"MAX_NUM_ALGO_ORDERS","maxNumAlgoOrders":5)
        //                 )
        //             ),
        //         ],
        //     }
        //
        // futures/usdt-margined (fapi)
        //
        //     {
        //         "timezone":"UTC",
        //         "serverTime":1575417244353,
        //         "rateLimits":array(
        //             array("rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200),
        //             array("rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":1200)
        //         ),
        //         "exchangeFilters":array(),
        //         "symbols":array(
        //             {
        //                 "symbol":"BTCUSDT",
        //                 "status":"TRADING",
        //                 "maintMarginPercent":"2.5000",
        //                 "requiredMarginPercent":"5.0000",
        //                 "baseAsset":"BTC",
        //                 "quoteAsset":"USDT",
        //                 "pricePrecision":2,
        //                 "quantityPrecision":3,
        //                 "baseAssetPrecision":8,
        //                 "quotePrecision":8,
        //                 "filters":[
        //                     array("minPrice":"0.01","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.01"),
        //                     array("stepSize":"0.001","filterType":"LOT_SIZE","maxQty":"1000","minQty":"0.001"),
        //                     array("stepSize":"0.001","filterType":"MARKET_LOT_SIZE","maxQty":"1000","minQty":"0.001"),
        //                     array("limit":200,"filterType":"MAX_NUM_ORDERS"),
        //                     array("multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE")
        //                 ),
        //                 "orderTypes":["LIMIT","MARKET","STOP"],
        //                 "timeInForce":["GTC","IOC","FOK","GTX"]
        //             }
        //         ]
        //     }
        //
        // delivery/coin-margined (dapi)
        //
        //     {
        //         "timezone" => "UTC",
        //         "serverTime" => 1597667052958,
        //         "rateLimits" => array(
        //             array("rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":6000),
        //             array("rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":6000)
        //         ),
        //         "exchangeFilters" => array(),
        //         "symbols" => array(
        //             array(
        //                 "symbol" => "BTCUSD_200925",
        //                 "pair" => "BTCUSD",
        //                 "contractType" => "CURRENT_QUARTER",
        //                 "deliveryDate" => 1601020800000,
        //                 "onboardDate" => 1590739200000,
        //                 "contractStatus" => "TRADING",
        //                 "contractSize" => 100,
        //                 "marginAsset" => "BTC",
        //                 "maintMarginPercent" => "2.5000",
        //                 "requiredMarginPercent" => "5.0000",
        //                 "baseAsset" => "BTC",
        //                 "quoteAsset" => "USD",
        //                 "pricePrecision" => 1,
        //                 "quantityPrecision" => 0,
        //                 "baseAssetPrecision" => 8,
        //                 "quotePrecision" => 8,
        //                 "equalQtyPrecision" => 4,
        //                 "filters" => [
        //                     array("minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"),
        //                     array("stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"),
        //                     array("stepSize":"0","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"),
        //                     array("limit":200,"filterType":"MAX_NUM_ORDERS"),
        //                     array("multiplierDown":"0.9500","multiplierUp":"1.0500","multiplierDecimal":"4","filterType":"PERCENT_PRICE")
        //                 ),
        //                 "orderTypes" => ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
        //                 "timeInForce" => ["GTC","IOC","FOK","GTX"]
        //             ),
        //             {
        //                 "symbol" => "BTCUSD_PERP",
        //                 "pair" => "BTCUSD",
        //                 "contractType" => "PERPETUAL",
        //                 "deliveryDate" => 4133404800000,
        //                 "onboardDate" => 1596006000000,
        //                 "contractStatus" => "TRADING",
        //                 "contractSize" => 100,
        //                 "marginAsset" => "BTC",
        //                 "maintMarginPercent" => "2.5000",
        //                 "requiredMarginPercent" => "5.0000",
        //                 "baseAsset" => "BTC",
        //                 "quoteAsset" => "USD",
        //                 "pricePrecision" => 1,
        //                 "quantityPrecision" => 0,
        //                 "baseAssetPrecision" => 8,
        //                 "quotePrecision" => 8,
        //                 "equalQtyPrecision" => 4,
        //                 "filters" => array(
        //                     array("minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"),
        //                     array("stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"),
        //                     array("stepSize":"1","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"),
        //                     array("limit":200,"filterType":"MAX_NUM_ORDERS"),
        //                     array("multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE")
        //                 ),
        //                 "orderTypes" => ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
        //                 "timeInForce" => ["GTC","IOC","FOK","GTX"]
        //             }
        //         ]
        //     }
        //
        if ($this->options['adjustForTimeDifference']) {
            $this->load_time_difference();
        }
        $markets = $this->safe_value($response, 'symbols', array());
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $spot = ($type === 'spot');
            $future = ($type === 'future');
            $delivery = ($type === 'delivery');
            $id = $this->safe_string($market, 'symbol');
            $lowercaseId = $this->safe_string_lower($market, 'symbol');
            $baseId = $this->safe_string($market, 'baseAsset');
            $quoteId = $this->safe_string($market, 'quoteAsset');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $contractType = $this->safe_string($market, 'contractType');
            $idSymbol = ($future || $delivery) && ($contractType !== 'PERPETUAL');
            $symbol = null;
            $expiry = null;
            if ($idSymbol) {
                $symbol = $id;
                $expiry = $this->safe_integer($market, 'deliveryDate');
            } else {
                $symbol = $base . '/' . $quote;
            }
            $filters = $this->safe_value($market, 'filters', array());
            $filtersByType = $this->index_by($filters, 'filterType');
            $precision = array(
                'base' => $this->safe_integer($market, 'baseAssetPrecision'),
                'quote' => $this->safe_integer($market, 'quotePrecision'),
                'amount' => $this->safe_integer($market, 'quantityPrecision'),
                'price' => $this->safe_integer($market, 'pricePrecision'),
            );
            $status = $this->safe_string_2($market, 'status', 'contractStatus');
            $active = ($status === 'TRADING');
            $margin = $this->safe_value($market, 'isMarginTradingAllowed', false);
            $contractSize = null;
            $fees = $this->fees;
            if ($future || $delivery) {
                $contractSize = $this->safe_string($market, 'contractSize', '1');
                $fees = $this->fees[$type];
            }
            $maker = $fees['trading']['maker'];
            $taker = $fees['trading']['taker'];
            $settleId = $this->safe_string($market, 'marginAsset');
            $settle = $this->safe_currency_code($settleId);
            $entry = array(
                'id' => $id,
                'lowercaseId' => $lowercaseId,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'info' => $market,
                'spot' => $spot,
                'type' => $type,
                'margin' => $margin,
                'future' => $future,
                'delivery' => $delivery,
                'linear' => $future,
                'inverse' => $delivery,
                'expiry' => $expiry,
                'expiryDatetime' => $this->iso8601($expiry),
                'settleId' => $settleId,
                'settle' => $settle,
                'active' => $active,
                'precision' => $precision,
                'contractSize' => $contractSize,
                'maker' => $maker,
                'taker' => $taker,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
            if (is_array($filtersByType) && array_key_exists('PRICE_FILTER', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'PRICE_FILTER', array());
                $tickSize = $this->safe_string($filter, 'tickSize');
                $entry['precision']['price'] = $this->precision_from_string($tickSize);
                // PRICE_FILTER reports zero values for maxPrice
                // since they updated $filter types in November 2018
                // https://github.com/ccxt/ccxt/issues/4286
                // therefore limits['price']['max'] doesn't have any meaningful value except null
                $entry['limits']['price'] = array(
                    'min' => $this->safe_number($filter, 'minPrice'),
                    'max' => $this->safe_number($filter, 'maxPrice'),
                );
                $entry['precision']['price'] = $this->precision_from_string($filter['tickSize']);
            }
            if (is_array($filtersByType) && array_key_exists('LOT_SIZE', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'LOT_SIZE', array());
                $stepSize = $this->safe_string($filter, 'stepSize');
                $entry['precision']['amount'] = $this->precision_from_string($stepSize);
                $entry['limits']['amount'] = array(
                    'min' => $this->safe_number($filter, 'minQty'),
                    'max' => $this->safe_number($filter, 'maxQty'),
                );
            }
            if (is_array($filtersByType) && array_key_exists('MARKET_LOT_SIZE', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'MARKET_LOT_SIZE', array());
                $entry['limits']['market'] = array(
                    'min' => $this->safe_number($filter, 'minQty'),
                    'max' => $this->safe_number($filter, 'maxQty'),
                );
            }
            if (is_array($filtersByType) && array_key_exists('MIN_NOTIONAL', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'MIN_NOTIONAL', array());
                $entry['limits']['cost']['min'] = $this->safe_number_2($filter, 'minNotional', 'notional');
            }
            $result[] = $entry;
        }
        return $result;
    }

    public function parse_balance($response, $type = null) {
        $result = array(
            'info' => $response,
        );
        $timestamp = null;
        if (($type === 'spot') || ($type === 'margin')) {
            $timestamp = $this->safe_integer($response, 'updateTime');
            $balances = $this->safe_value_2($response, 'balances', 'userAssets', array());
            for ($i = 0; $i < count($balances); $i++) {
                $balance = $balances[$i];
                $currencyId = $this->safe_string($balance, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string($balance, 'free');
                $account['used'] = $this->safe_string($balance, 'locked');
                $result[$code] = $account;
            }
        } else if ($type === 'savings') {
            $positionAmountVos = $this->safe_value($response, 'positionAmountVos');
            for ($i = 0; $i < count($positionAmountVos); $i++) {
                $entry = $positionAmountVos[$i];
                $currencyId = $this->safe_string($entry, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $usedAndTotal = $this->safe_string($entry, 'amount');
                $account['total'] = $usedAndTotal;
                $account['used'] = $usedAndTotal;
                $result[$code] = $account;
            }
        } else if ($type === 'funding') {
            for ($i = 0; $i < count($response); $i++) {
                $entry = $response[$i];
                $account = $this->account();
                $currencyId = $this->safe_string($entry, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $account['free'] = $this->safe_string($entry, 'free');
                $frozen = $this->safe_string($entry, 'freeze');
                $withdrawing = $this->safe_string($entry, 'withdrawing');
                $locked = $this->safe_string($entry, 'locked');
                $account['used'] = Precise::string_add($frozen, Precise::string_add($locked, $withdrawing));
                $result[$code] = $account;
            }
        } else {
            $balances = $response;
            if (gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) != 0) {
                $balances = $this->safe_value($response, 'assets', array());
            }
            for ($i = 0; $i < count($balances); $i++) {
                $balance = $balances[$i];
                $currencyId = $this->safe_string($balance, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string($balance, 'availableBalance');
                $account['used'] = $this->safe_string($balance, 'initialMargin');
                $account['total'] = $this->safe_string_2($balance, 'marginBalance', 'balance');
                $result[$code] = $account;
            }
        }
        $result['timestamp'] = $timestamp;
        $result['datetime'] = $this->iso8601($timestamp);
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'fetchBalance', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $method = 'privateGetAccount';
        if ($type === 'future') {
            $options = $this->safe_value($this->options, $type, array());
            $fetchBalanceOptions = $this->safe_value($options, 'fetchBalance', array());
            $method = $this->safe_string($fetchBalanceOptions, 'method', 'fapiPrivateV2GetAccount');
        } else if ($type === 'delivery') {
            $options = $this->safe_value($this->options, $type, array());
            $fetchBalanceOptions = $this->safe_value($options, 'fetchBalance', array());
            $method = $this->safe_string($fetchBalanceOptions, 'method', 'dapiPrivateGetAccount');
        } else if ($type === 'margin') {
            $method = 'sapiGetMarginAccount';
        } else if ($type === 'savings') {
            $method = 'sapiGetLendingUnionAccount';
        } else if ($type === 'funding') {
            $method = 'sapiPostAssetGetFundingAsset';
        }
        $query = $this->omit($params, 'type');
        $response = $this->$method ($query);
        //
        // spot
        //
        //     {
        //         makerCommission => 10,
        //         takerCommission => 10,
        //         buyerCommission => 0,
        //         sellerCommission => 0,
        //         canTrade => true,
        //         canWithdraw => true,
        //         canDeposit => true,
        //         updateTime => 1575357359602,
        //         accountType => "MARGIN",
        //         balances => array(
        //             array( asset => "BTC", free => "0.00219821", locked => "0.00000000"  ),
        //         )
        //     }
        //
        // margin
        //
        //     {
        //         "borrowEnabled":true,
        //         "marginLevel":"999.00000000",
        //         "totalAssetOfBtc":"0.00000000",
        //         "totalLiabilityOfBtc":"0.00000000",
        //         "totalNetAssetOfBtc":"0.00000000",
        //         "tradeEnabled":true,
        //         "transferEnabled":true,
        //         "userAssets":array(
        //             array("asset":"MATIC","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"),
        //             array("asset":"VET","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"),
        //             array("asset":"USDT","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000")
        //         ),
        //     }
        //
        // futures (fapi)
        //
        //     fapiPrivateGetAccount
        //
        //     {
        //         "feeTier":0,
        //         "canTrade":true,
        //         "canDeposit":true,
        //         "canWithdraw":true,
        //         "updateTime":0,
        //         "totalInitialMargin":"0.00000000",
        //         "totalMaintMargin":"0.00000000",
        //         "totalWalletBalance":"4.54000000",
        //         "totalUnrealizedProfit":"0.00000000",
        //         "totalMarginBalance":"4.54000000",
        //         "totalPositionInitialMargin":"0.00000000",
        //         "totalOpenOrderInitialMargin":"0.00000000",
        //         "maxWithdrawAmount":"4.54000000",
        //         "assets":array(
        //             {
        //                 "asset":"USDT",
        //                 "walletBalance":"4.54000000",
        //                 "unrealizedProfit":"0.00000000",
        //                 "marginBalance":"4.54000000",
        //                 "maintMargin":"0.00000000",
        //                 "initialMargin":"0.00000000",
        //                 "positionInitialMargin":"0.00000000",
        //                 "openOrderInitialMargin":"0.00000000",
        //                 "maxWithdrawAmount":"4.54000000"
        //             }
        //         ),
        //         "positions":array(
        //             {
        //                 "symbol":"BTCUSDT",
        //                 "initialMargin":"0.00000",
        //                 "maintMargin":"0.00000",
        //                 "unrealizedProfit":"0.00000000",
        //                 "positionInitialMargin":"0.00000",
        //                 "openOrderInitialMargin":"0.00000"
        //             }
        //         )
        //     }
        //
        //     fapiPrivateV2GetAccount
        //
        //     {
        //         "feeTier":0,
        //         "canTrade":true,
        //         "canDeposit":true,
        //         "canWithdraw":true,
        //         "updateTime":0,
        //         "totalInitialMargin":"0.00000000",
        //         "totalMaintMargin":"0.00000000",
        //         "totalWalletBalance":"0.00000000",
        //         "totalUnrealizedProfit":"0.00000000",
        //         "totalMarginBalance":"0.00000000",
        //         "totalPositionInitialMargin":"0.00000000",
        //         "totalOpenOrderInitialMargin":"0.00000000",
        //         "totalCrossWalletBalance":"0.00000000",
        //         "totalCrossUnPnl":"0.00000000",
        //         "availableBalance":"0.00000000",
        //         "maxWithdrawAmount":"0.00000000",
        //         "assets":array(
        //             {
        //                 "asset":"BNB",
        //                 "walletBalance":"0.01000000",
        //                 "unrealizedProfit":"0.00000000",
        //                 "marginBalance":"0.01000000",
        //                 "maintMargin":"0.00000000",
        //                 "initialMargin":"0.00000000",
        //                 "positionInitialMargin":"0.00000000",
        //                 "openOrderInitialMargin":"0.00000000",
        //                 "maxWithdrawAmount":"0.01000000",
        //                 "crossWalletBalance":"0.01000000",
        //                 "crossUnPnl":"0.00000000",
        //                 "availableBalance":"0.01000000"
        //             }
        //         ),
        //         "positions":array(
        //             array(
        //                 "symbol":"BTCUSDT",
        //                 "initialMargin":"0",
        //                 "maintMargin":"0",
        //                 "unrealizedProfit":"0.00000000",
        //                 "positionInitialMargin":"0",
        //                 "openOrderInitialMargin":"0",
        //                 "leverage":"20",
        //                 "isolated":false,
        //                 "entryPrice":"0.00000",
        //                 "maxNotional":"5000000",
        //                 "positionSide":"BOTH"
        //             ),
        //         )
        //     }
        //
        //     fapiPrivateV2GetBalance
        //
        //     array(
        //         {
        //             "accountAlias":"FzFzXquXXqoC",
        //             "asset":"BNB",
        //             "balance":"0.01000000",
        //             "crossWalletBalance":"0.01000000",
        //             "crossUnPnl":"0.00000000",
        //             "availableBalance":"0.01000000",
        //             "maxWithdrawAmount":"0.01000000"
        //         }
        //     )
        //
        // savings
        //
        //     {
        //       "totalAmountInBTC" => "0.3172",
        //       "totalAmountInUSDT" => "10000",
        //       "totalFixedAmountInBTC" => "0.3172",
        //       "totalFixedAmountInUSDT" => "10000",
        //       "totalFlexibleInBTC" => "0",
        //       "totalFlexibleInUSDT" => "0",
        //       "positionAmountVos" => array(
        //         array(
        //           "asset" => "USDT",
        //           "amount" => "10000",
        //           "amountInBTC" => "0.3172",
        //           "amountInUSDT" => "10000"
        //         ),
        //         {
        //           "asset" => "BUSD",
        //           "amount" => "0",
        //           "amountInBTC" => "0",
        //           "amountInUSDT" => "0"
        //         }
        //       )
        //     }
        //
        // binance pay
        //
        //     array(
        //       {
        //         "asset" => "BUSD",
        //         "free" => "1129.83",
        //         "locked" => "0",
        //         "freeze" => "0",
        //         "withdrawing" => "0"
        //       }
        //     )
        //
        return $this->parse_balance($response, $type);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book
        }
        $method = 'publicGetDepth';
        if ($market['linear']) {
            $method = 'fapiPublicGetDepth';
        } else if ($market['inverse']) {
            $method = 'dapiPublicGetDepth';
        }
        $response = $this->$method (array_merge($request, $params));
        //
        // future
        //
        //     {
        //         "lastUpdateId":333598053905,
        //         "E":1618631511986,
        //         "T":1618631511964,
        //         "bids":[
        //             ["2493.56","20.189"],
        //             ["2493.54","1.000"],
        //             ["2493.51","0.005"]
        //         ],
        //         "asks":[
        //             ["2493.57","0.877"],
        //             ["2493.62","0.063"],
        //             ["2493.71","12.054"],
        //         ]
        //     }
        $timestamp = $this->safe_integer($response, 'T');
        $orderbook = $this->parse_order_book($response, $symbol, $timestamp);
        $orderbook['nonce'] = $this->safe_integer($response, 'lastUpdateId');
        return $orderbook;
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         $symbol => 'ETHBTC',
        //         priceChange => '0.00068700',
        //         priceChangePercent => '2.075',
        //         weightedAvgPrice => '0.03342681',
        //         prevClosePrice => '0.03310300',
        //         lastPrice => '0.03378900',
        //         lastQty => '0.07700000',
        //         bidPrice => '0.03378900',
        //         bidQty => '7.16800000',
        //         askPrice => '0.03379000',
        //         askQty => '24.00000000',
        //         openPrice => '0.03310200',
        //         highPrice => '0.03388900',
        //         lowPrice => '0.03306900',
        //         volume => '205478.41000000',
        //         $quoteVolume => '6868.48826294',
        //         openTime => 1601469986932,
        //         closeTime => 1601556386932,
        //         firstId => 196098772,
        //         lastId => 196186315,
        //         count => 87544
        //     }
        //
        // coinm
        //     {
        //         $baseVolume => '214549.95171161',
        //         closeTime => '1621965286847',
        //         count => '1283779',
        //         firstId => '152560106',
        //         highPrice => '39938.3',
        //         lastId => '153843955',
        //         lastPrice => '37993.4',
        //         lastQty => '1',
        //         lowPrice => '36457.2',
        //         openPrice => '37783.4',
        //         openTime => '1621878840000',
        //         pair => 'BTCUSD',
        //         priceChange => '210.0',
        //         priceChangePercent => '0.556',
        //         $symbol => 'BTCUSD_PERP',
        //         volume => '81990451',
        //         weightedAvgPrice => '38215.08713747'
        //     }
        //
        $timestamp = $this->safe_integer($ticker, 'closeTime');
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $last = $this->safe_number($ticker, 'lastPrice');
        $isCoinm = (is_array($ticker) && array_key_exists('baseVolume', $ticker));
        $baseVolume = null;
        $quoteVolume = null;
        if ($isCoinm) {
            $baseVolume = $this->safe_number($ticker, 'baseVolume');
            $quoteVolume = $this->safe_number($ticker, 'volume');
        } else {
            $baseVolume = $this->safe_number($ticker, 'volume');
            $quoteVolume = $this->safe_number($ticker, 'quoteVolume');
        }
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_number($ticker, 'highPrice'),
            'low' => $this->safe_number($ticker, 'lowPrice'),
            'bid' => $this->safe_number($ticker, 'bidPrice'),
            'bidVolume' => $this->safe_number($ticker, 'bidQty'),
            'ask' => $this->safe_number($ticker, 'askPrice'),
            'askVolume' => $this->safe_number($ticker, 'askQty'),
            'vwap' => $this->safe_number($ticker, 'weightedAvgPrice'),
            'open' => $this->safe_number($ticker, 'openPrice'),
            'close' => $last,
            'last' => $last,
            'previousClose' => $this->safe_number($ticker, 'prevClosePrice'), // previous day close
            'change' => $this->safe_number($ticker, 'priceChange'),
            'percentage' => $this->safe_number($ticker, 'priceChangePercent'),
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_status($params = array ()) {
        $response = $this->sapiGetSystemStatus ($params);
        $status = $this->safe_string($response, 'status');
        if ($status !== null) {
            $status = ($status === '0') ? 'ok' : 'maintenance';
            $this->status = array_merge($this->status, array(
                'status' => $status,
                'updated' => $this->milliseconds(),
            ));
        }
        return $this->status;
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $method = 'publicGetTicker24hr';
        if ($market['linear']) {
            $method = 'fapiPublicGetTicker24hr';
        } else if ($market['inverse']) {
            $method = 'dapiPublicGetTicker24hr';
        }
        $response = $this->$method (array_merge($request, $params));
        if (gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) == 0) {
            $firstTicker = $this->safe_value($response, 0, array());
            return $this->parse_ticker($firstTicker, $market);
        }
        return $this->parse_ticker($response, $market);
    }

    public function fetch_bids_asks($symbols = null, $params = array ()) {
        $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'fetchBidsAsks', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $method = null;
        if ($type === 'future') {
            $method = 'fapiPublicGetTickerBookTicker';
        } else if ($type === 'delivery') {
            $method = 'dapiPublicGetTickerBookTicker';
        } else {
            $method = 'publicGetTickerBookTicker';
        }
        $response = $this->$method ($query);
        return $this->parse_tickers($response, $symbols);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'fetchTickers', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $defaultMethod = null;
        if ($type === 'future') {
            $defaultMethod = 'fapiPublicGetTicker24hr';
        } else if ($type === 'delivery') {
            $defaultMethod = 'dapiPublicGetTicker24hr';
        } else {
            $defaultMethod = 'publicGetTicker24hr';
        }
        $method = $this->safe_string($this->options, 'fetchTickersMethod', $defaultMethod);
        $response = $this->$method ($query);
        return $this->parse_tickers($response, $symbols);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        // when api method = publicGetKlines || fapiPublicGetKlines || dapiPublicGetKlines
        //     array(
        //         1591478520000, // open time
        //         "0.02501300",  // open
        //         "0.02501800",  // high
        //         "0.02500000",  // low
        //         "0.02500000",  // close
        //         "22.19000000", // volume
        //         1591478579999, // close time
        //         "0.55490906",  // quote asset volume
        //         40,            // number of trades
        //         "10.92900000", // taker buy base asset volume
        //         "0.27336462",  // taker buy quote asset volume
        //         "0"            // ignore
        //     )
        //
        //  when api method = fapiPublicGetMarkPriceKlines || fapiPublicGetIndexPriceKlines
        //     array(
        //         array(
        //         1591256460000,          // Open time
        //         "9653.29201333",        // Open
        //         "9654.56401333",        // High
        //         "9653.07367333",        // Low
        //         "9653.07367333",        // Close (or latest price)
        //         "0",                    // Ignore
        //         1591256519999,          // Close time
        //         "0",                    // Ignore
        //         60,                     // Number of bisic data
        //         "0",                    // Ignore
        //         "0",                    // Ignore
        //         "0"                     // Ignore
        //         )
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        // binance docs say that the default $limit 500, max 1500 for futures, max 1000 for spot markets
        // the reality is that the time range wider than 500 candles won't work right
        $defaultLimit = 500;
        $maxLimit = 1500;
        $price = $this->safe_string($params, 'price');
        $params = $this->omit($params, 'price');
        $limit = ($limit === null) ? $defaultLimit : min ($limit, $maxLimit);
        $request = array(
            'interval' => $this->timeframes[$timeframe],
            'limit' => $limit,
        );
        if ($price === 'index') {
            $request['pair'] = $market['id'];   // Index $price takes this argument instead of $symbol
        } else {
            $request['symbol'] = $market['id'];
        }
        // $duration = $this->parse_timeframe($timeframe);
        if ($since !== null) {
            $request['startTime'] = $since;
            //
            // It didn't work before without the $endTime
            // https://github.com/ccxt/ccxt/issues/8454
            //
            if ($market['inverse']) {
                if ($since > 0) {
                    $duration = $this->parse_timeframe($timeframe);
                    $endTime = $this->sum($since, $limit * $duration * 1000 - 1);
                    $now = $this->milliseconds();
                    $request['endTime'] = min ($now, $endTime);
                }
            }
        }
        $method = 'publicGetKlines';
        if ($price === 'mark') {
            if ($market['inverse']) {
                $method = 'dapiPublicGetMarkPriceKlines';
            } else {
                $method = 'fapiPublicGetMarkPriceKlines';
            }
        } else if ($price === 'index') {
            if ($market['inverse']) {
                $method = 'dapiPublicGetIndexPriceKlines';
            } else {
                $method = 'fapiPublicGetIndexPriceKlines';
            }
        } else if ($market['linear']) {
            $method = 'fapiPublicGetKlines';
        } else if ($market['inverse']) {
            $method = 'dapiPublicGetKlines';
        }
        $response = $this->$method (array_merge($request, $params));
        //
        //     [
        //         [1591478520000,"0.02501300","0.02501800","0.02500000","0.02500000","22.19000000",1591478579999,"0.55490906",40,"10.92900000","0.27336462","0"],
        //         [1591478580000,"0.02499600","0.02500900","0.02499400","0.02500300","21.34700000",1591478639999,"0.53370468",24,"7.53800000","0.18850725","0"],
        //         [1591478640000,"0.02500800","0.02501100","0.02500300","0.02500800","154.14200000",1591478699999,"3.85405839",97,"5.32300000","0.13312641","0"],
        //     ]
        //
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function fetch_mark_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $request = array(
            'price' => 'mark',
        );
        return $this->fetch_ohlcv($symbol, $timeframe, $since, $limit, array_merge($request, $params));
    }

    public function fetch_index_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $request = array(
            'price' => 'index',
        );
        return $this->fetch_ohlcv($symbol, $timeframe, $since, $limit, array_merge($request, $params));
    }

    public function parse_trade($trade, $market = null) {
        if (is_array($trade) && array_key_exists('isDustTrade', $trade)) {
            return $this->parse_dust_trade($trade, $market);
        }
        //
        // aggregate trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
        //
        //     {
        //         "a" => 26129,         // Aggregate tradeId
        //         "p" => "0.01633102",  // Price
        //         "q" => "4.70443515",  // Quantity
        //         "f" => 27781,         // First tradeId
        //         "l" => 27781,         // Last tradeId
        //         "T" => 1498793709153, // Timestamp
        //         "m" => true,          // Was the buyer the maker?
        //         "M" => true           // Was the $trade the best $price match?
        //     }
        //
        // recent public trades and old public trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-$trade-lookup-market_data
        //
        //     {
        //         "id" => 28457,
        //         "price" => "4.00000100",
        //         "qty" => "12.00000000",
        //         "time" => 1499865549590,
        //         "isBuyerMaker" => true,
        //         "isBestMatch" => true
        //     }
        //
        // private trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-$trade-list-user_data
        //
        //     {
        //         "symbol" => "BNBBTC",
        //         "id" => 28457,
        //         "orderId" => 100234,
        //         "price" => "4.00000100",
        //         "qty" => "12.00000000",
        //         "commission" => "10.10000000",
        //         "commissionAsset" => "BNB",
        //         "time" => 1499865549590,
        //         "isBuyer" => true,
        //         "isMaker" => false,
        //         "isBestMatch" => true
        //     }
        //
        // futures trades
        // https://binance-docs.github.io/apidocs/futures/en/#account-$trade-list-user_data
        //
        //     {
        //       "accountId" => 20,
        //       "buyer" => False,
        //       "commission" => "-0.07819010",
        //       "commissionAsset" => "USDT",
        //       "counterPartyId" => 653,
        //       "id" => 698759,
        //       "maker" => False,
        //       "orderId" => 25851813,
        //       "price" => "7819.01",
        //       "qty" => "0.002",
        //       "quoteQty" => "0.01563",
        //       "realizedPnl" => "-0.91539999",
        //       "side" => "SELL",
        //       "symbol" => "BTCUSDT",
        //       "time" => 1569514978020
        //     }
        //     {
        //       "symbol" => "BTCUSDT",
        //       "id" => 477128891,
        //       "orderId" => 13809777875,
        //       "side" => "SELL",
        //       "price" => "38479.55",
        //       "qty" => "0.001",
        //       "realizedPnl" => "-0.00009534",
        //       "marginAsset" => "USDT",
        //       "quoteQty" => "38.47955",
        //       "commission" => "-0.00076959",
        //       "commissionAsset" => "USDT",
        //       "time" => 1612733566708,
        //       "positionSide" => "BOTH",
        //       "maker" => true,
        //       "buyer" => false
        //     }
        //
        // array( respType => FULL )
        //
        //     {
        //       "price" => "4000.00000000",
        //       "qty" => "1.00000000",
        //       "commission" => "4.00000000",
        //       "commissionAsset" => "USDT",
        //       "tradeId" => "1234",
        //     }
        //
        $timestamp = $this->safe_integer_2($trade, 'T', 'time');
        $price = $this->safe_string_2($trade, 'p', 'price');
        $amount = $this->safe_string_2($trade, 'q', 'qty');
        $cost = $this->safe_string_2($trade, 'quoteQty', 'baseQty');  // inverse futures
        $marketId = $this->safe_string($trade, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $id = $this->safe_string_2($trade, 't', 'a');
        $id = $this->safe_string_2($trade, 'id', 'tradeId', $id);
        $side = null;
        $orderId = $this->safe_string($trade, 'orderId');
        if (is_array($trade) && array_key_exists('m', $trade)) {
            $side = $trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally
        } else if (is_array($trade) && array_key_exists('isBuyerMaker', $trade)) {
            $side = $trade['isBuyerMaker'] ? 'sell' : 'buy';
        } else if (is_array($trade) && array_key_exists('side', $trade)) {
            $side = $this->safe_string_lower($trade, 'side');
        } else {
            if (is_array($trade) && array_key_exists('isBuyer', $trade)) {
                $side = $trade['isBuyer'] ? 'buy' : 'sell'; // this is a true $side
            }
        }
        $fee = null;
        if (is_array($trade) && array_key_exists('commission', $trade)) {
            $fee = array(
                'cost' => $this->safe_string($trade, 'commission'),
                'currency' => $this->safe_currency_code($this->safe_string($trade, 'commissionAsset')),
            );
        }
        $takerOrMaker = null;
        if (is_array($trade) && array_key_exists('isMaker', $trade)) {
            $takerOrMaker = $trade['isMaker'] ? 'maker' : 'taker';
        }
        if (is_array($trade) && array_key_exists('maker', $trade)) {
            $takerOrMaker = $trade['maker'] ? 'maker' : 'taker';
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            // 'fromId' => 123,    // ID to get aggregate trades from INCLUSIVE.
            // 'startTime' => 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.
            // 'endTime' => 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.
            // 'limit' => 500,     // default = 500, maximum = 1000
        );
        $defaultType = $this->safe_string_2($this->options, 'fetchTrades', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $defaultMethod = null;
        if ($type === 'future') {
            $defaultMethod = 'fapiPublicGetAggTrades';
        } else if ($type === 'delivery') {
            $defaultMethod = 'dapiPublicGetAggTrades';
        } else {
            $defaultMethod = 'publicGetAggTrades';
        }
        $method = $this->safe_string($this->options, 'fetchTradesMethod', $defaultMethod);
        if ($method === 'publicGetAggTrades') {
            if ($since !== null) {
                $request['startTime'] = $since;
                // https://github.com/ccxt/ccxt/issues/6400
                // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
                $request['endTime'] = $this->sum($since, 3600000);
            }
            if ($type === 'future') {
                $method = 'fapiPublicGetAggTrades';
            } else if ($type === 'delivery') {
                $method = 'dapiPublicGetAggTrades';
            }
        } else if ($method === 'publicGetHistoricalTrades') {
            if ($type === 'future') {
                $method = 'fapiPublicGetHistoricalTrades';
            } else if ($type === 'delivery') {
                $method = 'dapiPublicGetHistoricalTrades';
            }
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default = 500, maximum = 1000
        }
        //
        // Caveats:
        // - default $limit (500) applies only if no other parameters set, trades up
        //   to the maximum $limit may be returned to satisfy other parameters
        // - if both $limit and time window is set and time window contains more
        //   trades than the $limit then the last trades from the window are returned
        // - 'tradeId' accepted and returned by this $method is "aggregate" trade id
        //   which is different from actual trade id
        // - setting both fromId and time window results in error
        $response = $this->$method (array_merge($request, $query));
        //
        // aggregate trades
        //
        //     array(
        //         {
        //             "a" => 26129,         // Aggregate tradeId
        //             "p" => "0.01633102",  // Price
        //             "q" => "4.70443515",  // Quantity
        //             "f" => 27781,         // First tradeId
        //             "l" => 27781,         // Last tradeId
        //             "T" => 1498793709153, // Timestamp
        //             "m" => true,          // Was the buyer the maker?
        //             "M" => true           // Was the trade the best price match?
        //         }
        //     )
        //
        // recent public trades and historical public trades
        //
        //     array(
        //         {
        //             "id" => 28457,
        //             "price" => "4.00000100",
        //             "qty" => "12.00000000",
        //             "time" => 1499865549590,
        //             "isBuyerMaker" => true,
        //             "isBestMatch" => true
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELED' => 'canceled',
            'PENDING_CANCEL' => 'canceling', // currently unused
            'REJECTED' => 'rejected',
            'EXPIRED' => 'expired',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // spot
        //
        //     {
        //         "symbol" => "LTCBTC",
        //         "orderId" => 1,
        //         "clientOrderId" => "myOrder1",
        //         "price" => "0.1",
        //         "origQty" => "1.0",
        //         "executedQty" => "0.0",
        //         "cummulativeQuoteQty" => "0.0",
        //         "status" => "NEW",
        //         "timeInForce" => "GTC",
        //         "type" => "LIMIT",
        //         "side" => "BUY",
        //         "stopPrice" => "0.0",
        //         "icebergQty" => "0.0",
        //         "time" => 1499827319559,
        //         "updateTime" => 1499827319559,
        //         "isWorking" => true
        //     }
        //
        // futures
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "orderId" => 1,
        //         "clientOrderId" => "myOrder1",
        //         "price" => "0.1",
        //         "origQty" => "1.0",
        //         "executedQty" => "1.0",
        //         "cumQuote" => "10.0",
        //         "status" => "NEW",
        //         "timeInForce" => "GTC",
        //         "type" => "LIMIT",
        //         "side" => "BUY",
        //         "stopPrice" => "0.0",
        //         "updateTime" => 1499827319559
        //     }
        //
        // createOrder with array( "newOrderRespType" => "FULL" )
        //
        //     {
        //       "symbol" => "BTCUSDT",
        //       "orderId" => 5403233939,
        //       "orderListId" => -1,
        //       "clientOrderId" => "x-R4BD3S825e669e75b6c14f69a2c43e",
        //       "transactTime" => 1617151923742,
        //       "price" => "0.00000000",
        //       "origQty" => "0.00050000",
        //       "executedQty" => "0.00050000",
        //       "cummulativeQuoteQty" => "29.47081500",
        //       "status" => "FILLED",
        //       "timeInForce" => "GTC",
        //       "type" => "MARKET",
        //       "side" => "BUY",
        //       "fills" => array(
        //         {
        //           "price" => "58941.63000000",
        //           "qty" => "0.00050000",
        //           "commission" => "0.00007050",
        //           "commissionAsset" => "BNB",
        //           "tradeId" => 737466631
        //         }
        //       )
        //     }
        //
        // delivery
        //
        //     {
        //       "orderId" => "18742727411",
        //       "symbol" => "ETHUSD_PERP",
        //       "pair" => "ETHUSD",
        //       "status" => "FILLED",
        //       "clientOrderId" => "x-xcKtGhcu3e2d1503fdd543b3b02419",
        //       "price" => "0",
        //       "avgPrice" => "4522.14",
        //       "origQty" => "1",
        //       "executedQty" => "1",
        //       "cumBase" => "0.00221134",
        //       "timeInForce" => "GTC",
        //       "type" => "MARKET",
        //       "reduceOnly" => false,
        //       "closePosition" => false,
        //       "side" => "SELL",
        //       "positionSide" => "BOTH",
        //       "stopPrice" => "0",
        //       "workingType" => "CONTRACT_PRICE",
        //       "priceProtect" => false,
        //       "origType" => "MARKET",
        //       "time" => "1636061952660",
        //       "updateTime" => "1636061952660"
        //     }
        //
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $filled = $this->safe_string($order, 'executedQty', '0');
        $timestamp = null;
        $lastTradeTimestamp = null;
        if (is_array($order) && array_key_exists('time', $order)) {
            $timestamp = $this->safe_integer($order, 'time');
        } else if (is_array($order) && array_key_exists('transactTime', $order)) {
            $timestamp = $this->safe_integer($order, 'transactTime');
        } else if (is_array($order) && array_key_exists('updateTime', $order)) {
            if ($status === 'open') {
                if (Precise::string_gt($filled, '0')) {
                    $lastTradeTimestamp = $this->safe_integer($order, 'updateTime');
                } else {
                    $timestamp = $this->safe_integer($order, 'updateTime');
                }
            }
        }
        $average = $this->safe_string($order, 'avgPrice');
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string($order, 'origQty');
        // - Spot/Margin $market => cummulativeQuoteQty
        // - Futures $market => cumQuote.
        //   Note this is not the actual $cost, since Binance futures uses leverage to calculate margins.
        $cost = $this->safe_string_2($order, 'cummulativeQuoteQty', 'cumQuote');
        $cost = $this->safe_string($order, 'cumBase', $cost);
        $id = $this->safe_string($order, 'orderId');
        $type = $this->safe_string_lower($order, 'type');
        $side = $this->safe_string_lower($order, 'side');
        $fills = $this->safe_value($order, 'fills', array());
        $clientOrderId = $this->safe_string($order, 'clientOrderId');
        $timeInForce = $this->safe_string($order, 'timeInForce');
        $postOnly = ($type === 'limit_maker') || ($timeInForce === 'GTX');
        if ($type === 'limit_maker') {
            $type = 'limit';
        }
        $stopPriceString = $this->safe_string($order, 'stopPrice');
        $stopPrice = $this->parse_number($this->omit_zero($stopPriceString));
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'amount' => $amount,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => null,
            'trades' => $fills,
        ), $market);
    }

    public function create_reduce_only_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $request = array(
            'reduceOnly' => true,
        );
        return $this->create_order($symbol, $type, $side, $amount, $price, array_merge($request, $params));
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $defaultType = $this->safe_string_2($this->options, 'createOrder', 'defaultType', 'spot');
        $orderType = $this->safe_string($params, 'type', $defaultType);
        $clientOrderId = $this->safe_string_2($params, 'newClientOrderId', 'clientOrderId');
        $postOnly = $this->safe_value($params, 'postOnly', false);
        $params = $this->omit($params, array( 'type', 'newClientOrderId', 'clientOrderId', 'postOnly' ));
        $reduceOnly = $this->safe_value($params, 'reduceOnly');
        if ($reduceOnly !== null) {
            if (($orderType !== 'future') && ($orderType !== 'delivery')) {
                throw new InvalidOrder($this->id . ' createOrder() does not support $reduceOnly for ' . $orderType . ' orders, $reduceOnly orders are supported for futures and perpetuals only');
            }
        }
        $method = 'privatePostOrder';
        if ($orderType === 'future') {
            $method = 'fapiPrivatePostOrder';
        } else if ($orderType === 'delivery') {
            $method = 'dapiPrivatePostOrder';
        } else if ($orderType === 'margin') {
            $method = 'sapiPostMarginOrder';
        }
        // the next 5 lines are added to support for testing orders
        if ($market['spot']) {
            $test = $this->safe_value($params, 'test', false);
            if ($test) {
                $method .= 'Test';
            }
            $params = $this->omit($params, 'test');
            // only supported for spot/margin api (all margin markets are spot markets)
            if ($postOnly) {
                $type = 'LIMIT_MAKER';
            }
        }
        $uppercaseType = strtoupper($type);
        $validOrderTypes = $this->safe_value($market['info'], 'orderTypes');
        if (!$this->in_array($uppercaseType, $validOrderTypes)) {
            throw new InvalidOrder($this->id . ' ' . $type . ' is not a valid order $type in $market ' . $symbol);
        }
        $request = array(
            'symbol' => $market['id'],
            'type' => $uppercaseType,
            'side' => strtoupper($side),
        );
        if ($clientOrderId === null) {
            $broker = $this->safe_value($this->options, 'broker');
            if ($broker !== null) {
                $brokerId = $this->safe_string($broker, $orderType);
                if ($brokerId !== null) {
                    $request['newClientOrderId'] = $brokerId . $this->uuid22();
                }
            }
        } else {
            $request['newClientOrderId'] = $clientOrderId;
        }
        if (($orderType === 'spot') || ($orderType === 'margin')) {
            $request['newOrderRespType'] = $this->safe_value($this->options['newOrderRespType'], $type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
        } else {
            // delivery and future
            $request['newOrderRespType'] = 'RESULT';  // "ACK", "RESULT", default "ACK"
        }
        // additional required fields depending on the order $type
        $timeInForceIsRequired = false;
        $priceIsRequired = false;
        $stopPriceIsRequired = false;
        $quantityIsRequired = false;
        //
        // spot/margin
        //
        //     LIMIT                timeInForce, quantity, $price
        //     MARKET               quantity or $quoteOrderQty
        //     STOP_LOSS            quantity, $stopPrice
        //     STOP_LOSS_LIMIT      timeInForce, quantity, $price, $stopPrice
        //     TAKE_PROFIT          quantity, $stopPrice
        //     TAKE_PROFIT_LIMIT    timeInForce, quantity, $price, $stopPrice
        //     LIMIT_MAKER          quantity, $price
        //
        // futures
        //
        //     LIMIT                timeInForce, quantity, $price
        //     MARKET               quantity
        //     STOP/TAKE_PROFIT     quantity, $price, $stopPrice
        //     STOP_MARKET          $stopPrice
        //     TAKE_PROFIT_MARKET   $stopPrice
        //     TRAILING_STOP_MARKET $callbackRate
        //
        if ($uppercaseType === 'MARKET') {
            $quoteOrderQty = $this->safe_value($this->options, 'quoteOrderQty', false);
            if ($quoteOrderQty) {
                $quoteOrderQty = $this->safe_number($params, 'quoteOrderQty');
                $precision = $market['precision']['price'];
                if ($quoteOrderQty !== null) {
                    $request['quoteOrderQty'] = $this->decimal_to_precision($quoteOrderQty, TRUNCATE, $precision, $this->precisionMode);
                    $params = $this->omit($params, 'quoteOrderQty');
                } else if ($price !== null) {
                    $request['quoteOrderQty'] = $this->decimal_to_precision($amount * $price, TRUNCATE, $precision, $this->precisionMode);
                } else {
                    $quantityIsRequired = true;
                }
            } else {
                $quantityIsRequired = true;
            }
        } else if ($uppercaseType === 'LIMIT') {
            $priceIsRequired = true;
            $timeInForceIsRequired = true;
            $quantityIsRequired = true;
        } else if (($uppercaseType === 'STOP_LOSS') || ($uppercaseType === 'TAKE_PROFIT')) {
            $stopPriceIsRequired = true;
            $quantityIsRequired = true;
            if ($market['linear'] || $market['inverse']) {
                $priceIsRequired = true;
            }
        } else if (($uppercaseType === 'STOP_LOSS_LIMIT') || ($uppercaseType === 'TAKE_PROFIT_LIMIT')) {
            $quantityIsRequired = true;
            $stopPriceIsRequired = true;
            $priceIsRequired = true;
            $timeInForceIsRequired = true;
        } else if ($uppercaseType === 'LIMIT_MAKER') {
            $priceIsRequired = true;
            $quantityIsRequired = true;
        } else if ($uppercaseType === 'STOP') {
            $quantityIsRequired = true;
            $stopPriceIsRequired = true;
            $priceIsRequired = true;
        } else if (($uppercaseType === 'STOP_MARKET') || ($uppercaseType === 'TAKE_PROFIT_MARKET')) {
            $closePosition = $this->safe_value($params, 'closePosition');
            if ($closePosition === null) {
                $quantityIsRequired = true;
            }
            $stopPriceIsRequired = true;
        } else if ($uppercaseType === 'TRAILING_STOP_MARKET') {
            $quantityIsRequired = true;
            $callbackRate = $this->safe_number($params, 'callbackRate');
            if ($callbackRate === null) {
                throw new InvalidOrder($this->id . ' createOrder() requires a $callbackRate extra param for a ' . $type . ' order');
            }
        }
        if ($quantityIsRequired) {
            $request['quantity'] = $this->amount_to_precision($symbol, $amount);
        }
        if ($priceIsRequired) {
            if ($price === null) {
                throw new InvalidOrder($this->id . ' createOrder() requires a $price argument for a ' . $type . ' order');
            }
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        if ($timeInForceIsRequired) {
            $request['timeInForce'] = $this->options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
        }
        if ($stopPriceIsRequired) {
            $stopPrice = $this->safe_number($params, 'stopPrice');
            if ($stopPrice === null) {
                throw new InvalidOrder($this->id . ' createOrder() requires a $stopPrice extra param for a ' . $type . ' order');
            } else {
                $params = $this->omit($params, 'stopPrice');
                $request['stopPrice'] = $this->price_to_precision($symbol, $stopPrice);
            }
        }
        $response = $this->$method (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $defaultType = $this->safe_string_2($this->options, 'fetchOrder', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $method = 'privateGetOrder';
        if ($type === 'future') {
            $method = 'fapiPrivateGetOrder';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateGetOrder';
        } else if ($type === 'margin') {
            $method = 'sapiGetMarginOrder';
        }
        $request = array(
            'symbol' => $market['id'],
        );
        $clientOrderId = $this->safe_value_2($params, 'origClientOrderId', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['origClientOrderId'] = $clientOrderId;
        } else {
            $request['orderId'] = $id;
        }
        $query = $this->omit($params, array( 'type', 'clientOrderId', 'origClientOrderId' ));
        $response = $this->$method (array_merge($request, $query));
        return $this->parse_order($response, $market);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $defaultType = $this->safe_string_2($this->options, 'fetchOrders', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $method = 'privateGetAllOrders';
        if ($type === 'future') {
            $method = 'fapiPrivateGetAllOrders';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateGetAllOrders';
        } else if ($type === 'margin') {
            $method = 'sapiGetMarginAllOrders';
        }
        $request = array(
            'symbol' => $market['id'],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $query = $this->omit($params, 'type');
        $response = $this->$method (array_merge($request, $query));
        //
        //  spot
        //
        //     array(
        //         {
        //             "symbol" => "LTCBTC",
        //             "orderId" => 1,
        //             "clientOrderId" => "myOrder1",
        //             "price" => "0.1",
        //             "origQty" => "1.0",
        //             "executedQty" => "0.0",
        //             "cummulativeQuoteQty" => "0.0",
        //             "status" => "NEW",
        //             "timeInForce" => "GTC",
        //             "type" => "LIMIT",
        //             "side" => "BUY",
        //             "stopPrice" => "0.0",
        //             "icebergQty" => "0.0",
        //             "time" => 1499827319559,
        //             "updateTime" => 1499827319559,
        //             "isWorking" => true
        //         }
        //     )
        //
        //  futures
        //
        //     array(
        //         {
        //             "symbol" => "BTCUSDT",
        //             "orderId" => 1,
        //             "clientOrderId" => "myOrder1",
        //             "price" => "0.1",
        //             "origQty" => "1.0",
        //             "executedQty" => "1.0",
        //             "cumQuote" => "10.0",
        //             "status" => "NEW",
        //             "timeInForce" => "GTC",
        //             "type" => "LIMIT",
        //             "side" => "BUY",
        //             "stopPrice" => "0.0",
        //             "updateTime" => 1499827319559
        //         }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $query = null;
        $type = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
            $defaultType = $this->safe_string_2($this->options, 'fetchOpenOrders', 'defaultType', 'spot');
            $marketType = (is_array($market) && array_key_exists('type', $market)) ? $market['type'] : $defaultType;
            $type = $this->safe_string($params, 'type', $marketType);
            $query = $this->omit($params, 'type');
        } else if ($this->options['warnOnFetchOpenOrdersWithoutSymbol']) {
            $symbols = $this->symbols;
            $numSymbols = is_array($symbols) ? count($symbols) : 0;
            $fetchOpenOrdersRateLimit = intval($numSymbols / 2);
            throw new ExchangeError($this->id . ' fetchOpenOrders WARNING => fetching open orders without specifying a $symbol is rate-limited to one call per ' . (string) $fetchOpenOrdersRateLimit . ' seconds. Do not call this $method frequently to avoid ban. Set ' . $this->id . '.options["warnOnFetchOpenOrdersWithoutSymbol"] = false to suppress this warning message.');
        } else {
            $defaultType = $this->safe_string_2($this->options, 'fetchOpenOrders', 'defaultType', 'spot');
            $type = $this->safe_string($params, 'type', $defaultType);
            $query = $this->omit($params, 'type');
        }
        $method = 'privateGetOpenOrders';
        if ($type === 'future') {
            $method = 'fapiPrivateGetOpenOrders';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateGetOpenOrders';
        } else if ($type === 'margin') {
            $method = 'sapiGetMarginOpenOrders';
        }
        $response = $this->$method (array_merge($request, $query));
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $orders = $this->fetch_orders($symbol, $since, $limit, $params);
        return $this->filter_by($orders, 'status', 'closed');
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $defaultType = $this->safe_string_2($this->options, 'fetchOpenOrders', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        // https://github.com/ccxt/ccxt/issues/6507
        $origClientOrderId = $this->safe_value_2($params, 'origClientOrderId', 'clientOrderId');
        $request = array(
            'symbol' => $market['id'],
            // 'orderId' => $id,
            // 'origClientOrderId' => $id,
        );
        if ($origClientOrderId === null) {
            $request['orderId'] = $id;
        } else {
            $request['origClientOrderId'] = $origClientOrderId;
        }
        $method = 'privateDeleteOrder';
        if ($type === 'future') {
            $method = 'fapiPrivateDeleteOrder';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateDeleteOrder';
        } else if ($type === 'margin') {
            $method = 'sapiDeleteMarginOrder';
        }
        $query = $this->omit($params, array( 'type', 'origClientOrderId', 'clientOrderId' ));
        $response = $this->$method (array_merge($request, $query));
        return $this->parse_order($response, $market);
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $defaultType = $this->safe_string_2($this->options, 'cancelAllOrders', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $method = 'privateDeleteOpenOrders';
        if ($type === 'margin') {
            $method = 'sapiDeleteMarginOpenOrders';
        } else if ($type === 'future') {
            $method = 'fapiPrivateDeleteAllOpenOrders';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateDeleteAllOpenOrders';
        }
        $response = $this->$method (array_merge($request, $query));
        if (gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) == 0) {
            return $this->parse_orders($response, $market);
        } else {
            return $response;
        }
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrderTrades() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $type = $this->safe_string($params, 'type', $market['type']);
        $params = $this->omit($params, 'type');
        if ($type !== 'spot') {
            throw new NotSupported($this->id . ' fetchOrderTrades() supports spot markets only');
        }
        $request = array(
            'orderId' => $id,
        );
        return $this->fetch_my_trades($symbol, $since, $limit, array_merge($request, $params));
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $type = $this->safe_string($params, 'type', $market['type']);
        $params = $this->omit($params, 'type');
        $method = null;
        if ($type === 'spot') {
            $method = 'privateGetMyTrades';
        } else if ($type === 'margin') {
            $method = 'sapiGetMarginMyTrades';
        } else if ($type === 'future') {
            $method = 'fapiPrivateGetUserTrades';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateGetUserTrades';
        }
        $request = array(
            'symbol' => $market['id'],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->$method (array_merge($request, $params));
        //
        // spot trade
        //
        //     array(
        //         {
        //             "symbol" => "BNBBTC",
        //             "id" => 28457,
        //             "orderId" => 100234,
        //             "price" => "4.00000100",
        //             "qty" => "12.00000000",
        //             "commission" => "10.10000000",
        //             "commissionAsset" => "BNB",
        //             "time" => 1499865549590,
        //             "isBuyer" => true,
        //             "isMaker" => false,
        //             "isBestMatch" => true,
        //         }
        //     )
        //
        // futures trade
        //
        //     array(
        //         {
        //             "accountId" => 20,
        //             "buyer" => False,
        //             "commission" => "-0.07819010",
        //             "commissionAsset" => "USDT",
        //             "counterPartyId" => 653,
        //             "id" => 698759,
        //             "maker" => False,
        //             "orderId" => 25851813,
        //             "price" => "7819.01",
        //             "qty" => "0.002",
        //             "quoteQty" => "0.01563",
        //             "realizedPnl" => "-0.91539999",
        //             "side" => "SELL",
        //             "symbol" => "BTCUSDT",
        //             "time" => 1569514978020
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_my_dust_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        //
        // Binance provides an opportunity to trade insignificant ($i->e. non-tradable and non-withdrawable)
        // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.
        // The corresponding $trades history is called the `Dust Log` and can be requested via the following end-point:
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data
        //
        $this->load_markets();
        $request = array();
        if ($since !== null) {
            $request['startTime'] = $since;
            $request['endTime'] = $this->sum($since, 7776000000);
        }
        $response = $this->sapiGetAssetDribblet (array_merge($request, $params));
        //     {
        //       "total" => "4",
        //       "userAssetDribblets" => array(
        //         {
        //           "operateTime" => "1627575731000",
        //           "totalServiceChargeAmount" => "0.00001453",
        //           "totalTransferedAmount" => "0.00072693",
        //           "transId" => "70899815863",
        //           "userAssetDribbletDetails" => array(
        //             array(
        //               "fromAsset" => "LTC",
        //               "amount" => "0.000006",
        //               "transferedAmount" => "0.00000267",
        //               "serviceChargeAmount" => "0.00000005",
        //               "operateTime" => "1627575731000",
        //               "transId" => "70899815863"
        //             ),
        //             array(
        //               "fromAsset" => "GBP",
        //               "amount" => "0.15949157",
        //               "transferedAmount" => "0.00072426",
        //               "serviceChargeAmount" => "0.00001448",
        //               "operateTime" => "1627575731000",
        //               "transId" => "70899815863"
        //             }
        //           )
        //         ),
        //       )
        //     }
        $results = $this->safe_value($response, 'userAssetDribblets', array());
        $rows = $this->safe_integer($response, 'total', 0);
        $data = array();
        for ($i = 0; $i < $rows; $i++) {
            $logs = $this->safe_value($results[$i], 'userAssetDribbletDetails', array());
            for ($j = 0; $j < count($logs); $j++) {
                $logs[$j]['isDustTrade'] = true;
                $data[] = $logs[$j];
            }
        }
        $trades = $this->parse_trades($data, null, $since, $limit);
        return $this->filter_by_since_limit($trades, $since, $limit);
    }

    public function parse_dust_trade($trade, $market = null) {
        //
        //     {
        //       "fromAsset" => "USDT",
        //       "amount" => "0.009669",
        //       "transferedAmount" => "0.00002992",
        //       "serviceChargeAmount" => "0.00000059",
        //       "operateTime" => "1628076010000",
        //       "transId" => "71416578712",
        //       "isDustTrade" => true
        //     }
        //
        $orderId = $this->safe_string($trade, 'transId');
        $timestamp = $this->safe_integer($trade, 'operateTime');
        $currencyId = $this->safe_string($trade, 'fromAsset');
        $tradedCurrency = $this->safe_currency_code($currencyId);
        $bnb = $this->currency('BNB');
        $earnedCurrency = $bnb['code'];
        $applicantSymbol = $earnedCurrency . '/' . $tradedCurrency;
        $tradedCurrencyIsQuote = false;
        if (is_array($this->markets) && array_key_exists($applicantSymbol, $this->markets)) {
            $tradedCurrencyIsQuote = true;
        }
        $feeCostString = $this->safe_string($trade, 'serviceChargeAmount');
        $fee = array(
            'currency' => $earnedCurrency,
            'cost' => $this->parse_number($feeCostString),
        );
        $symbol = null;
        $amountString = null;
        $costString = null;
        $side = null;
        if ($tradedCurrencyIsQuote) {
            $symbol = $applicantSymbol;
            $amountString = $this->safe_string($trade, 'transferedAmount');
            $costString = $this->safe_string($trade, 'amount');
            $side = 'buy';
        } else {
            $symbol = $tradedCurrency . '/' . $earnedCurrency;
            $amountString = $this->safe_string($trade, 'amount');
            $costString = $this->safe_string($trade, 'transferedAmount');
            $side = 'sell';
        }
        $priceString = null;
        if ($costString !== null) {
            if ($amountString) {
                $priceString = Precise::string_div($costString, $amountString);
            }
        }
        $id = null;
        $amount = $this->parse_number($amountString);
        $price = $this->parse_number($priceString);
        $cost = $this->parse_number($costString);
        $type = null;
        $takerOrMaker = null;
        return array(
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'type' => $type,
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'amount' => $amount,
            'price' => $price,
            'cost' => $cost,
            'fee' => $fee,
            'info' => $trade,
        );
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $currency = null;
        $response = null;
        $request = array();
        $legalMoney = $this->safe_value($this->options, 'legalMoney', array());
        if (is_array($legalMoney) && array_key_exists($code, $legalMoney)) {
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            $request['transactionType'] = 0;
            if ($since !== null) {
                $request['beginTime'] = $since;
            }
            $raw = $this->sapiGetFiatOrders (array_merge($request, $params));
            $response = $this->safe_value($raw, 'data');
            //     {
            //       "code" => "000000",
            //       "message" => "success",
            //       "data" => array(
            //         {
            //           "orderNo" => "25ced37075c1470ba8939d0df2316e23",
            //           "fiatCurrency" => "EUR",
            //           "indicatedAmount" => "15.00",
            //           "amount" => "15.00",
            //           "totalFee" => "0.00",
            //           "method" => "card",
            //           "status" => "Failed",
            //           "createTime" => 1627501026000,
            //           "updateTime" => 1627501027000
            //         }
            //       ),
            //       "total" => 1,
            //       "success" => true
            //     }
        } else {
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['coin'] = $currency['id'];
            }
            if ($since !== null) {
                $request['startTime'] = $since;
                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                $request['endTime'] = $this->sum($since, 7776000000);
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = $this->sapiGetCapitalDepositHisrec (array_merge($request, $params));
            //     array(
            //       array(
            //         "amount" => "0.01844487",
            //         "coin" => "BCH",
            //         "network" => "BCH",
            //         "status" => 1,
            //         "address" => "1NYxAJhW2281HK1KtJeaENBqHeygA88FzR",
            //         "addressTag" => "",
            //         "txId" => "bafc5902504d6504a00b7d0306a41154cbf1d1b767ab70f3bc226327362588af",
            //         "insertTime" => 1610784980000,
            //         "transferType" => 0,
            //         "confirmTimes" => "2/2"
            //       ),
            //       {
            //         "amount" => "4500",
            //         "coin" => "USDT",
            //         "network" => "BSC",
            //         "status" => 1,
            //         "address" => "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
            //         "addressTag" => "",
            //         "txId" => "Internal transfer 51376627901",
            //         "insertTime" => 1618394381000,
            //         "transferType" => 1,
            //         "confirmTimes" => "1/15"
            //     }
            //   )
        }
        return $this->parse_transactions($response, $currency, $since, $limit);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $legalMoney = $this->safe_value($this->options, 'legalMoney', array());
        $request = array();
        $response = null;
        $currency = null;
        if (is_array($legalMoney) && array_key_exists($code, $legalMoney)) {
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            $request['transactionType'] = 1;
            if ($since !== null) {
                $request['beginTime'] = $since;
            }
            $raw = $this->sapiGetFiatOrders (array_merge($request, $params));
            $response = $this->safe_value($raw, 'data');
            //     {
            //       "code" => "000000",
            //       "message" => "success",
            //       "data" => array(
            //         array(
            //           "orderNo" => "CJW706452266115170304",
            //           "fiatCurrency" => "GBP",
            //           "indicatedAmount" => "10001.50",
            //           "amount" => "100.00",
            //           "totalFee" => "1.50",
            //           "method" => "bank transfer",
            //           "status" => "Successful",
            //           "createTime" => 1620037745000,
            //           "updateTime" => 1620038480000
            //         ),
            //         {
            //           "orderNo" => "CJW706287492781891584",
            //           "fiatCurrency" => "GBP",
            //           "indicatedAmount" => "10001.50",
            //           "amount" => "100.00",
            //           "totalFee" => "1.50",
            //           "method" => "bank transfer",
            //           "status" => "Successful",
            //           "createTime" => 1619998460000,
            //           "updateTime" => 1619998823000
            //         }
            //       ),
            //       "total" => 39,
            //       "success" => true
            //     }
        } else {
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['coin'] = $currency['id'];
            }
            if ($since !== null) {
                $request['startTime'] = $since;
                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                $request['endTime'] = $this->sum($since, 7776000000);
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = $this->sapiGetCapitalWithdrawHistory (array_merge($request, $params));
            //     array(
            //       array(
            //         "id" => "69e53ad305124b96b43668ceab158a18",
            //         "amount" => "28.75",
            //         "transactionFee" => "0.25",
            //         "coin" => "XRP",
            //         "status" => 6,
            //         "address" => "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
            //         "addressTag" => "101286922",
            //         "txId" => "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
            //         "applyTime" => "2021-04-15 12:09:16",
            //         "network" => "XRP",
            //         "transferType" => 0
            //       ),
            //       array(
            //         "id" => "9a67628b16ba4988ae20d329333f16bc",
            //         "amount" => "20",
            //         "transactionFee" => "20",
            //         "coin" => "USDT",
            //         "status" => 6,
            //         "address" => "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
            //         "txId" => "0x77fbf2cf2c85b552f0fd31fd2e56dc95c08adae031d96f3717d8b17e1aea3e46",
            //         "applyTime" => "2021-04-15 12:06:53",
            //         "network" => "ETH",
            //         "transferType" => 0
            //       ),
            //       {
            //         "id" => "a7cdc0afbfa44a48bd225c9ece958fe2",
            //         "amount" => "51",
            //         "transactionFee" => "1",
            //         "coin" => "USDT",
            //         "status" => 6,
            //         "address" => "TYDmtuWL8bsyjvcauUTerpfYyVhFtBjqyo",
            //         "txId" => "168a75112bce6ceb4823c66726ad47620ad332e69fe92d9cb8ceb76023f9a028",
            //         "applyTime" => "2021-04-13 12:46:59",
            //         "network" => "TRX",
            //         "transferType" => 0
            //       }
            //     )
        }
        return $this->parse_transactions($response, $currency, $since, $limit);
    }

    public function parse_transaction_status_by_type($status, $type = null) {
        $statusesByType = array(
            'deposit' => array(
                '0' => 'pending',
                '1' => 'ok',
                // Fiat
                // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                'Processing' => 'pending',
                'Failed' => 'failed',
                'Successful' => 'ok',
                'Refunding' => 'canceled',
                'Refunded' => 'canceled',
                'Refund Failed' => 'failed',
            ),
            'withdrawal' => array(
                '0' => 'pending', // Email Sent
                '1' => 'canceled', // Cancelled (different from 1 = ok in deposits)
                '2' => 'pending', // Awaiting Approval
                '3' => 'failed', // Rejected
                '4' => 'pending', // Processing
                '5' => 'failed', // Failure
                '6' => 'ok', // Completed
                // Fiat
                // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                'Processing' => 'pending',
                'Failed' => 'failed',
                'Successful' => 'ok',
                'Refunding' => 'canceled',
                'Refunded' => 'canceled',
                'Refund Failed' => 'failed',
            ),
        );
        $statuses = $this->safe_value($statusesByType, $type, array());
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        //     {
        //       "amount" => "4500",
        //       "coin" => "USDT",
        //       "network" => "BSC",
        //       "status" => 1,
        //       "address" => "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
        //       "addressTag" => "",
        //       "txId" => "Internal transfer 51376627901",
        //       "insertTime" => 1618394381000,
        //       "transferType" => 1,
        //       "confirmTimes" => "1/15"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //       "id" => "69e53ad305124b96b43668ceab158a18",
        //       "amount" => "28.75",
        //       "transactionFee" => "0.25",
        //       "coin" => "XRP",
        //       "status" => 6,
        //       "address" => "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
        //       "addressTag" => "101286922",
        //       "txId" => "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
        //       "applyTime" => "2021-04-15 12:09:16",
        //       "network" => "XRP",
        //       "transferType" => 0
        //     }
        //
        // fiat $transaction
        // withdraw
        //     {
        //       "orderNo" => "CJW684897551397171200",
        //       "fiatCurrency" => "GBP",
        //       "indicatedAmount" => "29.99",
        //       "amount" => "28.49",
        //       "totalFee" => "1.50",
        //       "method" => "bank transfer",
        //       "status" => "Successful",
        //       "createTime" => 1614898701000,
        //       "updateTime" => 1614898820000
        //     }
        //
        // deposit
        //     {
        //       "orderNo" => "25ced37075c1470ba8939d0df2316e23",
        //       "fiatCurrency" => "EUR",
        //       "indicatedAmount" => "15.00",
        //       "amount" => "15.00",
        //       "totalFee" => "0.00",
        //       "method" => "card",
        //       "status" => "Failed",
        //       "createTime" => "1627501026000",
        //       "updateTime" => "1627501027000"
        //     }
        //
        $id = $this->safe_string_2($transaction, 'id', 'orderNo');
        $address = $this->safe_string($transaction, 'address');
        $tag = $this->safe_string($transaction, 'addressTag'); // set but unused
        if ($tag !== null) {
            if (strlen($tag) < 1) {
                $tag = null;
            }
        }
        $txid = $this->safe_string($transaction, 'txId');
        if (($txid !== null) && (mb_strpos($txid, 'Internal transfer ') !== false)) {
            $txid = mb_substr($txid, 18);
        }
        $currencyId = $this->safe_string_2($transaction, 'coin', 'fiatCurrency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = null;
        $insertTime = $this->safe_integer_2($transaction, 'insertTime', 'createTime');
        $applyTime = $this->parse8601($this->safe_string($transaction, 'applyTime'));
        $type = $this->safe_string($transaction, 'type');
        if ($type === null) {
            if (($insertTime !== null) && ($applyTime === null)) {
                $type = 'deposit';
                $timestamp = $insertTime;
            } else if (($insertTime === null) && ($applyTime !== null)) {
                $type = 'withdrawal';
                $timestamp = $applyTime;
            }
        }
        $status = $this->parse_transaction_status_by_type($this->safe_string($transaction, 'status'), $type);
        $amount = $this->safe_number($transaction, 'amount');
        $feeCost = $this->safe_number_2($transaction, 'transactionFee', 'totalFee');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array( 'currency' => $code, 'cost' => $feeCost );
        }
        $updated = $this->safe_integer_2($transaction, 'successTime', 'updateTime');
        $internal = $this->safe_integer($transaction, 'transferType', false);
        $internal = $internal ? true : false;
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'address' => $address,
            'addressTo' => $address,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => $tag,
            'tagFrom' => null,
            'type' => $type,
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => $updated,
            'internal' => $internal,
            'fee' => $fee,
        );
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            'CONFIRMED' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transfer($transfer, $currency = null) {
        //
        // $transfer
        //
        //     {
        //         "tranId":13526853623
        //     }
        //
        // fetchTransfers
        //
        //     {
        //         $timestamp => 1614640878000,
        //         asset => 'USDT',
        //         $amount => '25',
        //         $type => 'MAIN_UMFUTURE',
        //         $status => 'CONFIRMED',
        //         tranId => 43000126248
        //     }
        //
        $id = $this->safe_string($transfer, 'tranId');
        $currencyId = $this->safe_string($transfer, 'asset');
        $code = $this->safe_currency_code($currencyId, $currency);
        $amount = $this->safe_number($transfer, 'amount');
        $type = $this->safe_string($transfer, 'type');
        $fromAccount = null;
        $toAccount = null;
        $typesByAccount = $this->safe_value($this->options, 'typesByAccount', array());
        if ($type !== null) {
            $parts = explode('_', $type);
            $fromAccount = $this->safe_value($parts, 0);
            $toAccount = $this->safe_value($parts, 1);
            $fromAccount = $this->safe_string($typesByAccount, $fromAccount, $fromAccount);
            $toAccount = $this->safe_string($typesByAccount, $toAccount, $toAccount);
        }
        $timestamp = $this->safe_integer($transfer, 'timestamp');
        $status = $this->parse_transfer_status($this->safe_string($transfer, 'status'));
        return array(
            'info' => $transfer,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $code,
            'amount' => $amount,
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => $status,
        );
    }

    public function parse_income($income, $market = null) {
        //
        //     {
        //       "symbol" => "ETHUSDT",
        //       "incomeType" => "FUNDING_FEE",
        //       "income" => "0.00134317",
        //       "asset" => "USDT",
        //       "time" => "1621584000000",
        //       "info" => "FUNDING_FEE",
        //       "tranId" => "4480321991774044580",
        //       "tradeId" => ""
        //     }
        //
        $marketId = $this->safe_string($income, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $amount = $this->safe_number($income, 'income');
        $currencyId = $this->safe_string($income, 'asset');
        $code = $this->safe_currency_code($currencyId);
        $id = $this->safe_string($income, 'tranId');
        $timestamp = $this->safe_integer($income, 'time');
        return array(
            'info' => $income,
            'symbol' => $symbol,
            'code' => $code,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'id' => $id,
            'amount' => $amount,
        );
    }

    public function parse_incomes($incomes, $market = null, $since = null, $limit = null) {
        $result = array();
        for ($i = 0; $i < count($incomes); $i++) {
            $entry = $incomes[$i];
            $parsed = $this->parse_income ($entry, $market);
            $result[] = $parsed;
        }
        $sorted = $this->sort_by($result, 'timestamp');
        return $this->filter_by_since_limit($sorted, $since, $limit);
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $type = $this->safe_string($params, 'type');
        if ($type === null) {
            $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
            $fromAccount = strtolower($fromAccount);
            $toAccount = strtolower($toAccount);
            $fromId = $this->safe_string($accountsByType, $fromAccount);
            $toId = $this->safe_string($accountsByType, $toAccount);
            if ($fromId === null) {
                $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
                throw new ExchangeError($this->id . ' $fromAccount must be one of ' . implode(', ', $keys));
            }
            if ($toId === null) {
                $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
                throw new ExchangeError($this->id . ' $toAccount must be one of ' . implode(', ', $keys));
            }
            $type = $fromId . '_' . $toId;
        }
        $request = array(
            'asset' => $currency['id'],
            'amount' => $this->currency_to_precision($code, $amount),
            'type' => $type,
        );
        $response = $this->sapiPostAssetTransfer (array_merge($request, $params));
        //
        //     {
        //         "tranId":13526853623
        //     }
        //
        $transfer = $this->parse_transfer($response, $currency);
        return array_merge($transfer, array(
            'amount' => $amount,
            'currency' => $code,
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
        ));
    }

    public function fetch_transfers($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        $defaultType = $this->safe_string_2($this->options, 'fetchTransfers', 'defaultType', 'spot');
        $fromAccount = $this->safe_string($params, 'fromAccount', $defaultType);
        $defaultTo = ($fromAccount === 'future') ? 'spot' : 'future';
        $toAccount = $this->safe_string($params, 'toAccount', $defaultTo);
        $type = $this->safe_string($params, 'type');
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $fromId = $this->safe_string($accountsByType, $fromAccount);
        $toId = $this->safe_string($accountsByType, $toAccount);
        if ($type === null) {
            if ($fromId === null) {
                $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
                throw new ExchangeError($this->id . ' $fromAccount parameter must be one of ' . implode(', ', $keys));
            }
            if ($toId === null) {
                $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
                throw new ExchangeError($this->id . ' $toAccount parameter must be one of ' . implode(', ', $keys));
            }
            $type = $fromId . '_' . $toId;
        }
        $request = array(
            'type' => $type,
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['size'] = $limit;
        }
        $response = $this->sapiGetAssetTransfer (array_merge($request, $params));
        //
        //     {
        //         total => 3,
        //         $rows => array(
        //             array(
        //                 timestamp => 1614640878000,
        //                 asset => 'USDT',
        //                 amount => '25',
        //                 $type => 'MAIN_UMFUTURE',
        //                 status => 'CONFIRMED',
        //                 tranId => 43000126248
        //             ),
        //         )
        //     }
        //
        $rows = $this->safe_value($response, 'rows', array());
        return $this->parse_transfers($rows, $currency, $since, $limit);
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['id'],
            // 'network' => 'ETH', // 'BSC', 'XMR', you can get $network and isDefault in networkList in the $response of sapiGetCapitalConfigDetail
        );
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
        $network = $this->safe_string($networks, $network, $network); // handle ERC20>ETH alias
        if ($network !== null) {
            $request['network'] = $network;
            $params = $this->omit($params, 'network');
        }
        // has support for the 'network' parameter
        // https://binance-docs.github.io/apidocs/spot/en/#deposit-$address-supporting-$network-user_data
        $response = $this->sapiGetCapitalDepositAddress (array_merge($request, $params));
        //
        //     {
        //         $currency => 'XRP',
        //         $address => 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
        //         $tag => '108618262',
        //         info => {
        //             coin => 'XRP',
        //             $address => 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
        //             $tag => '108618262',
        //             $url => 'https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh'
        //         }
        //     }
        //
        $address = $this->safe_string($response, 'address');
        $url = $this->safe_string($response, 'url');
        $impliedNetwork = null;
        if ($url !== null) {
            $reverseNetworks = $this->safe_value($this->options, 'reverseNetworks', array());
            $parts = explode('/', $url);
            $topLevel = $this->safe_string($parts, 2);
            if (($topLevel === 'blockchair.com') || ($topLevel === 'viewblock.io')) {
                $subLevel = $this->safe_string($parts, 3);
                if ($subLevel !== null) {
                    $topLevel = $topLevel . '/' . $subLevel;
                }
            }
            $impliedNetwork = $this->safe_string($reverseNetworks, $topLevel);
            $impliedNetworks = $this->safe_value($this->options, 'impliedNetworks', array(
                'ETH' => array( 'ERC20' => 'ETH' ),
                'TRX' => array( 'TRC20' => 'TRX' ),
            ));
            if (is_array($impliedNetworks) && array_key_exists($code, $impliedNetworks)) {
                $conversion = $this->safe_value($impliedNetworks, $code, array());
                $impliedNetwork = $this->safe_string($conversion, $impliedNetwork, $impliedNetwork);
            }
        }
        $tag = $this->safe_string($response, 'tag', '');
        if (strlen($tag) === 0) {
            $tag = null;
        }
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => $impliedNetwork,
            'info' => $response,
        );
    }

    public function fetch_funding_fees($codes = null, $params = array ()) {
        $this->load_markets();
        $response = $this->sapiGetCapitalConfigGetall ($params);
        //
        //  [
        //     {
        //       coin => 'BAT',
        //       depositAllEnable => true,
        //       withdrawAllEnable => true,
        //       name => 'Basic Attention Token',
        //       free => '0',
        //       locked => '0',
        //       freeze => '0',
        //       withdrawing => '0',
        //       ipoing => '0',
        //       ipoable => '0',
        //       storage => '0',
        //       isLegalMoney => false,
        //       trading => true,
        //       $networkList => [
        //         array(
        //           network => 'BNB',
        //           coin => 'BAT',
        //           withdrawIntegerMultiple => '0.00000001',
        //           isDefault => false,
        //           depositEnable => true,
        //           withdrawEnable => true,
        //           depositDesc => '',
        //           withdrawDesc => '',
        //           specialTips => 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
        //           name => 'BEP2',
        //           resetAddressStatus => false,
        //           addressRegex => '^(bnb1)[0-9a-z]{38}$',
        //           memoRegex => '^[0-9A-Za-z\\-_]array(1,120)$',
        //           withdrawFee => '0.27',
        //           withdrawMin => '0.54',
        //           withdrawMax => '10000000000',
        //           minConfirm => '1',
        //           unLockConfirm => '0'
        //         ),
        //         array(
        //           network => 'BSC',
        //           coin => 'BAT',
        //           withdrawIntegerMultiple => '0.00000001',
        //           isDefault => false,
        //           depositEnable => true,
        //           withdrawEnable => true,
        //           depositDesc => '',
        //           withdrawDesc => '',
        //           specialTips => 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 9766e.',
        //           name => 'BEP20 (BSC)',
        //           resetAddressStatus => false,
        //           addressRegex => '^(0x)[0-9A-Fa-f]{40}$',
        //           memoRegex => '',
        //           withdrawFee => '0.27',
        //           withdrawMin => '0.54',
        //           withdrawMax => '10000000000',
        //           minConfirm => '15',
        //           unLockConfirm => '0'
        //         ),
        //         {
        //           network => 'ETH',
        //           coin => 'BAT',
        //           withdrawIntegerMultiple => '0.00000001',
        //           isDefault => true,
        //           depositEnable => true,
        //           withdrawEnable => true,
        //           depositDesc => '',
        //           withdrawDesc => '',
        //           specialTips => 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 887ef.',
        //           name => 'ERC20',
        //           resetAddressStatus => false,
        //           addressRegex => '^(0x)[0-9A-Fa-f]{40}$',
        //           memoRegex => '',
        //           withdrawFee => '27',
        //           withdrawMin => '54',
        //           withdrawMax => '10000000000',
        //           minConfirm => '12',
        //           unLockConfirm => '0'
        //         }
        //       ]
        //     }
        //  ]
        //
        $withdrawFees = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'coin');
            $code = $this->safe_currency_code($currencyId);
            $networkList = $this->safe_value($entry, 'networkList');
            $withdrawFees[$code] = array();
            for ($j = 0; $j < count($networkList); $j++) {
                $networkEntry = $networkList[$j];
                $networkId = $this->safe_string($networkEntry, 'network');
                $networkCode = $this->safe_currency_code($networkId);
                $fee = $this->safe_number($networkEntry, 'withdrawFee');
                $withdrawFees[$code][$networkCode] = $fee;
            }
        }
        return array(
            'withdraw' => $withdrawFees,
            'deposit' => array(),
            'info' => $response,
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['id'],
            'address' => $address,
            'amount' => $amount,
            // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
            // issue sapiGetCapitalConfigGetall () to get $networks for withdrawing USDT ERC20 vs USDT Omni
            // 'network' => 'ETH', // 'BTC', 'TRX', etc, optional
        );
        if ($tag !== null) {
            $request['addressTag'] = $tag;
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
        $network = $this->safe_string($networks, $network, $network); // handle ERC20>ETH alias
        if ($network !== null) {
            $request['network'] = $network;
            $params = $this->omit($params, 'network');
        }
        $response = $this->sapiPostCapitalWithdrawApply (array_merge($request, $params));
        //     array( id => '9a67628b16ba4988ae20d329333f16bc' )
        return array(
            'info' => $response,
            'id' => $this->safe_string($response, 'id'),
        );
    }

    public function parse_trading_fee($fee, $market = null) {
        //
        //     {
        //         "symbol" => "ADABNB",
        //         "makerCommission" => 0.001,
        //         "takerCommission" => 0.001
        //     }
        //
        $marketId = $this->safe_string($fee, 'symbol');
        $symbol = $this->safe_symbol($marketId);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'maker' => $this->safe_number($fee, 'makerCommission'),
            'taker' => $this->safe_number($fee, 'takerCommission'),
        );
    }

    public function fetch_trading_fee($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->sapiGetAssetTradeFee (array_merge($request, $params));
        //
        //     array(
        //       {
        //         "symbol" => "BTCUSDT",
        //         "makerCommission" => "0.001",
        //         "takerCommission" => "0.001"
        //       }
        //     )
        //
        $first = $this->safe_value($response, 0, array());
        return $this->parse_trading_fee($first);
    }

    public function fetch_trading_fees($params = array ()) {
        $this->load_markets();
        $method = null;
        $defaultType = $this->safe_string_2($this->options, 'fetchFundingRates', 'defaultType', 'future');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        if (($type === 'spot') || ($type === 'margin')) {
            $method = 'sapiGetAssetTradeFee';
        } else if ($type === 'future') {
            $method = 'fapiPrivateGetAccount';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateGetAccount';
        }
        $response = $this->$method ($query);
        //
        // sapi / spot
        //
        //    array(
        //       array(
        //         "symbol" => "ZRXBNB",
        //         "makerCommission" => "0.001",
        //         "takerCommission" => "0.001"
        //       ),
        //       array(
        //         "symbol" => "ZRXBTC",
        //         "makerCommission" => "0.001",
        //         "takerCommission" => "0.001"
        //       ),
        //    )
        //
        // fapi / future / linear
        //
        //     {
        //         "feeTier" => 0,       // account commisssion tier
        //         "canTrade" => true,   // if can trade
        //         "canDeposit" => true,     // if can transfer in asset
        //         "canWithdraw" => true,    // if can transfer out asset
        //         "updateTime" => 0,
        //         "totalInitialMargin" => "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
        //         "totalMaintMargin" => "0.00000000",     // total maintenance margin required, only for USDT asset
        //         "totalWalletBalance" => "23.72469206",     // total wallet balance, only for USDT asset
        //         "totalUnrealizedProfit" => "0.00000000",   // total unrealized profit, only for USDT asset
        //         "totalMarginBalance" => "23.72469206",     // total margin balance, only for USDT asset
        //         "totalPositionInitialMargin" => "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
        //         "totalOpenOrderInitialMargin" => "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
        //         "totalCrossWalletBalance" => "23.72469206",      // crossed wallet balance, only for USDT asset
        //         "totalCrossUnPnl" => "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
        //         "availableBalance" => "23.72469206",       // available balance, only for USDT asset
        //         "maxWithdrawAmount" => "23.72469206"     // maximum amount for transfer out, only for USDT asset
        //         ...
        //     }
        //
        // dapi / delivery / inverse
        //
        //     {
        //         "canDeposit" => true,
        //         "canTrade" => true,
        //         "canWithdraw" => true,
        //         "feeTier" => 2,
        //         "updateTime" => 0
        //     }
        //
        if (($type === 'spot') || ($type === 'margin')) {
            //
            //    array(
            //       array(
            //         "symbol" => "ZRXBNB",
            //         "makerCommission" => "0.001",
            //         "takerCommission" => "0.001"
            //       ),
            //       array(
            //         "symbol" => "ZRXBTC",
            //         "makerCommission" => "0.001",
            //         "takerCommission" => "0.001"
            //       ),
            //    )
            //
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $fee = $this->parse_trading_fee($response[$i]);
                $symbol = $fee['symbol'];
                $result[$symbol] = $fee;
            }
            return $result;
        } else if ($type === 'future') {
            //
            //     {
            //         "feeTier" => 0,       // account commisssion tier
            //         "canTrade" => true,   // if can trade
            //         "canDeposit" => true,     // if can transfer in asset
            //         "canWithdraw" => true,    // if can transfer out asset
            //         "updateTime" => 0,
            //         "totalInitialMargin" => "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
            //         "totalMaintMargin" => "0.00000000",     // total maintenance margin required, only for USDT asset
            //         "totalWalletBalance" => "23.72469206",     // total wallet balance, only for USDT asset
            //         "totalUnrealizedProfit" => "0.00000000",   // total unrealized profit, only for USDT asset
            //         "totalMarginBalance" => "23.72469206",     // total margin balance, only for USDT asset
            //         "totalPositionInitialMargin" => "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
            //         "totalOpenOrderInitialMargin" => "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
            //         "totalCrossWalletBalance" => "23.72469206",      // crossed wallet balance, only for USDT asset
            //         "totalCrossUnPnl" => "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
            //         "availableBalance" => "23.72469206",       // available balance, only for USDT asset
            //         "maxWithdrawAmount" => "23.72469206"     // maximum amount for transfer out, only for USDT asset
            //         ...
            //     }
            //
            $symbols = is_array($this->markets) ? array_keys($this->markets) : array();
            $result = array();
            $feeTier = $this->safe_integer($response, 'feeTier');
            $feeTiers = $this->fees[$type]['trading']['tiers'];
            $maker = $feeTiers['maker'][$feeTier][1];
            $taker = $feeTiers['taker'][$feeTier][1];
            for ($i = 0; $i < count($symbols); $i++) {
                $symbol = $symbols[$i];
                $result[$symbol] = array(
                    'info' => array(
                        'feeTier' => $feeTier,
                    ),
                    'symbol' => $symbol,
                    'maker' => $maker,
                    'taker' => $taker,
                );
            }
            return $result;
        } else if ($type === 'delivery') {
            //
            //     {
            //         "canDeposit" => true,
            //         "canTrade" => true,
            //         "canWithdraw" => true,
            //         "feeTier" => 2,
            //         "updateTime" => 0
            //     }
            //
            $symbols = is_array($this->markets) ? array_keys($this->markets) : array();
            $result = array();
            $feeTier = $this->safe_integer($response, 'feeTier');
            $feeTiers = $this->fees[$type]['trading']['tiers'];
            $maker = $feeTiers['maker'][$feeTier][1];
            $taker = $feeTiers['taker'][$feeTier][1];
            for ($i = 0; $i < count($symbols); $i++) {
                $symbol = $symbols[$i];
                $result[$symbol] = array(
                    'info' => array(
                        'feeTier' => $feeTier,
                    ),
                    'symbol' => $symbol,
                    'maker' => $maker,
                    'taker' => $taker,
                );
            }
            return $result;
        }
    }

    public function futures_transfer($code, $amount, $type, $params = array ()) {
        if (($type < 1) || ($type > 4)) {
            throw new ArgumentsRequired($this->id . ' $type must be between 1 and 4');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'asset' => $currency['id'],
            'amount' => $amount,
            'type' => $type,
        );
        $response = $this->sapiPostFuturesTransfer (array_merge($request, $params));
        //
        //   {
        //       "tranId" => 100000001
        //   }
        //
        return $this->parse_transfer($response, $currency);
    }

    public function fetch_funding_rate($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $method = null;
        if ($market['linear']) {
            $method = 'fapiPublicGetPremiumIndex';
        } else if ($market['inverse']) {
            $method = 'dapiPublicGetPremiumIndex';
        } else {
            throw new NotSupported($this->id . ' fetchFundingRate() supports linear and inverse contracts only');
        }
        $response = $this->$method (array_merge($request, $params));
        if ($market['inverse']) {
            $response = $response[0];
        }
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "markPrice" => "45802.81129892",
        //         "indexPrice" => "45745.47701915",
        //         "estimatedSettlePrice" => "45133.91753671",
        //         "lastFundingRate" => "0.00063521",
        //         "interestRate" => "0.00010000",
        //         "nextFundingTime" => "1621267200000",
        //         "time" => "1621252344001"
        //     }
        //
        return $this->parse_funding_rate($response, $market);
    }

    public function fetch_funding_rate_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        //
        // Gets a history of funding $rates with their timestamps
        //  (param) $symbol => Future currency pair (e.g. "BTC/USDT")
        //  (param) $limit => maximum number of data points returned
        //  (param) $since => Unix $timestamp in miliseconds for the time of the earliest requested funding rate
        //  (param) $params => Object containing more $params for the $request
        //          - until => Unix $timestamp in miliseconds for the time of the earliest requested funding rate
        //  return => [array($symbol, fundingRate, $timestamp)]
        //
        $this->load_markets();
        $request = array();
        $method = null;
        $defaultType = $this->safe_string_2($this->options, 'fetchFundingRateHistory', 'defaultType', 'future');
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, 'type');
        if ($type === 'future') {
            $method = 'fapiPublicGetFundingRate';
        } else if ($type === 'delivery') {
            $method = 'dapiPublicGetFundingRate';
        }
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
            if ($market['linear']) {
                $method = 'fapiPublicGetFundingRate';
            } else if ($market['inverse']) {
                $method = 'dapiPublicGetFundingRate';
            }
        }
        if ($method === null) {
            throw new NotSupported($this->id . ' fetchFundingRateHistory() not supported for ' . $type . ' markets');
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $till = $this->safe_integer($params, 'till'); // unified in milliseconds
        $endTime = $this->safe_string($params, 'endTime', $till); // exchange-specific in milliseconds
        $params = $this->omit($params, array( 'endTime', 'till' ));
        if ($endTime !== null) {
            $request['endTime'] = $endTime;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->$method (array_merge($request, $params));
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "fundingRate" => "0.00063521",
        //         "fundingTime" => "1621267200000",
        //     }
        //
        $rates = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $timestamp = $this->safe_integer($entry, 'fundingTime');
            $rates[] = array(
                'info' => $entry,
                'symbol' => $this->safe_symbol($this->safe_string($entry, 'symbol')),
                'fundingRate' => $this->safe_number($entry, 'fundingRate'),
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
            );
        }
        $sorted = $this->sort_by($rates, 'timestamp');
        return $this->filter_by_symbol_since_limit($sorted, $symbol, $since, $limit);
    }

    public function fetch_funding_rates($symbols = null, $params = array ()) {
        $this->load_markets();
        $method = null;
        $defaultType = $this->safe_string_2($this->options, 'fetchFundingRates', 'defaultType', 'future');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        if ($type === 'future') {
            $method = 'fapiPublicGetPremiumIndex';
        } else if ($type === 'delivery') {
            $method = 'dapiPublicGetPremiumIndex';
        } else {
            throw new NotSupported($this->id . ' fetchFundingRates() supports linear and inverse contracts only');
        }
        $response = $this->$method ($query);
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $parsed = $this->parse_funding_rate($entry);
            $result[] = $parsed;
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function parse_funding_rate($premiumIndex, $market = null) {
        // ensure it matches with https://www.binance.com/en/futures/funding-history/0
        //
        //   {
        //     "symbol" => "BTCUSDT",
        //     "markPrice" => "45802.81129892",
        //     "indexPrice" => "45745.47701915",
        //     "estimatedSettlePrice" => "45133.91753671",
        //     "lastFundingRate" => "0.00063521",
        //     "interestRate" => "0.00010000",
        //     "nextFundingTime" => "1621267200000",
        //     "time" => "1621252344001"
        //  }
        //
        $timestamp = $this->safe_integer($premiumIndex, 'time');
        $marketId = $this->safe_string($premiumIndex, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $markPrice = $this->safe_number($premiumIndex, 'markPrice');
        $indexPrice = $this->safe_number($premiumIndex, 'indexPrice');
        $interestRate = $this->safe_number($premiumIndex, 'interestRate');
        $estimatedSettlePrice = $this->safe_number($premiumIndex, 'estimatedSettlePrice');
        $nextFundingRate = $this->safe_number($premiumIndex, 'lastFundingRate');
        $nextFundingTime = $this->safe_integer($premiumIndex, 'nextFundingTime');
        return array(
            'info' => $premiumIndex,
            'symbol' => $symbol,
            'markPrice' => $markPrice,
            'indexPrice' => $indexPrice,
            'interestRate' => $interestRate,
            'estimatedSettlePrice' => $estimatedSettlePrice,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'previousFundingRate' => null,
            'nextFundingRate' => $nextFundingRate,
            'previousFundingTimestamp' => null,
            'nextFundingTimestamp' => $nextFundingTime,
            'previousFundingDatetime' => null,
            'nextFundingDatetime' => $this->iso8601($nextFundingTime),
        );
    }

    public function parse_account_positions($account) {
        $positions = $this->safe_value($account, 'positions');
        $assets = $this->safe_value($account, 'assets');
        $balances = array();
        for ($i = 0; $i < count($assets); $i++) {
            $entry = $assets[$i];
            $currencyId = $this->safe_string($entry, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $crossWalletBalance = $this->safe_string($entry, 'crossWalletBalance');
            $crossUnPnl = $this->safe_string($entry, 'crossUnPnl');
            $balances[$code] = array(
                'crossMargin' => Precise::string_add($crossWalletBalance, $crossUnPnl),
                'crossWalletBalance' => $crossWalletBalance,
            );
        }
        $result = array();
        for ($i = 0; $i < count($positions); $i++) {
            $position = $positions[$i];
            $marketId = $this->safe_string($position, 'symbol');
            $market = $this->safe_market($marketId);
            $code = ($this->options['defaultType'] === 'future') ? $market['quote'] : $market['base'];
            // sometimes not all the codes are correctly returned...
            if (is_array($balances) && array_key_exists($code, $balances)) {
                $parsed = $this->parse_account_position (array_merge($position, array(
                    'crossMargin' => $balances[$code]['crossMargin'],
                    'crossWalletBalance' => $balances[$code]['crossWalletBalance'],
                )), $market);
                $result[] = $parsed;
            }
        }
        return $result;
    }

    public function parse_account_position($position, $market = null) {
        //
        // $usdm
        //    {
        //       "symbol" => "BTCBUSD",
        //       "initialMargin" => "0",
        //       "maintMargin" => "0",
        //       "unrealizedProfit" => "0.00000000",
        //       "positionInitialMargin" => "0",
        //       "openOrderInitialMargin" => "0",
        //       "leverage" => "20",
        //       "isolated" => false,
        //       "entryPrice" => "0.0000",
        //       "maxNotional" => "100000",
        //       "positionSide" => "BOTH",
        //       "positionAmt" => "0.000",
        //       "notional" => "0",
        //       "isolatedWallet" => "0",
        //       "updateTime" => "0",
        //       "crossMargin" => "100.93634809",
        //     }
        //
        // coinm
        //     {
        //       "symbol" => "BTCUSD_210625",
        //       "initialMargin" => "0.00024393",
        //       "maintMargin" => "0.00002439",
        //       "unrealizedProfit" => "-0.00000163",
        //       "positionInitialMargin" => "0.00024393",
        //       "openOrderInitialMargin" => "0",
        //       "leverage" => "10",
        //       "isolated" => false,
        //       "positionSide" => "BOTH",
        //       "entryPrice" => "41021.20000069",
        //       "maxQty" => "100",
        //       "notionalValue" => "0.00243939",
        //       "isolatedWallet" => "0",
        //       "crossMargin" => "0.314"
        //       "crossWalletBalance" => "34",
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $leverageString = $this->safe_string($position, 'leverage');
        $leverage = intval($leverageString);
        $initialMarginString = $this->safe_string($position, 'initialMargin');
        $initialMargin = $this->parse_number($initialMarginString);
        $initialMarginPercentageString = Precise::string_div('1', $leverageString, 8);
        $rational = (fmod(1000, $leverage)) === 0;
        if (!$rational) {
            $initialMarginPercentageString = Precise::string_div(Precise::string_add($initialMarginPercentageString, '1e-8'), '1', 8);
        }
        $usdm = (is_array($position) && array_key_exists('notional', $position));
        $maintenanceMarginString = $this->safe_string($position, 'maintMargin');
        $maintenanceMargin = $this->parse_number($maintenanceMarginString);
        $entryPriceString = $this->safe_string($position, 'entryPrice');
        $entryPrice = $this->parse_number($entryPriceString);
        $notionalString = $this->safe_string_2($position, 'notional', 'notionalValue');
        $notionalStringAbs = Precise::string_abs($notionalString);
        $notionalFloat = floatval($notionalString);
        $notionalFloatAbs = floatval($notionalStringAbs);
        $notional = $this->parse_number(Precise::string_abs($notionalString));
        $contractsString = $this->safe_string($position, 'positionAmt');
        $contractsStringAbs = Precise::string_abs($contractsString);
        if ($contractsString === null) {
            $entryNotional = Precise::string_mul(Precise::string_mul($leverageString, $initialMarginString), $entryPriceString);
            $contractsString = Precise::string_div($entryNotional, $market['contractSize']);
            $contractsStringAbs = Precise::string_div(Precise::string_add($contractsString, '0.5'), '1', 0);
        }
        $contracts = $this->parse_number($contractsStringAbs);
        $leverageBrackets = $this->safe_value($this->options, 'leverageBrackets', array());
        $leverageBracket = $this->safe_value($leverageBrackets, $symbol, array());
        $maintenanceMarginPercentageString = null;
        for ($i = 0; $i < count($leverageBracket); $i++) {
            $bracket = $leverageBracket[$i];
            if ($notionalFloatAbs < $bracket[0]) {
                break;
            }
            $maintenanceMarginPercentageString = $bracket[1];
        }
        $maintenanceMarginPercentage = $this->parse_number($maintenanceMarginPercentageString);
        $unrealizedPnlString = $this->safe_string($position, 'unrealizedProfit');
        $unrealizedPnl = $this->parse_number($unrealizedPnlString);
        $timestamp = $this->safe_integer($position, 'updateTime');
        if ($timestamp === 0) {
            $timestamp = null;
        }
        $isolated = $this->safe_value($position, 'isolated');
        $marginType = null;
        $collateralString = null;
        $walletBalance = null;
        if ($isolated) {
            $marginType = 'isolated';
            $walletBalance = $this->safe_string($position, 'isolatedWallet');
            $collateralString = Precise::string_add($walletBalance, $unrealizedPnlString);
        } else {
            $marginType = 'cross';
            $walletBalance = $this->safe_string($position, 'crossWalletBalance');
            $collateralString = $this->safe_string($position, 'crossMargin');
        }
        $collateral = $this->parse_number($collateralString);
        $marginRatio = null;
        $side = null;
        $percentage = null;
        $liquidationPriceStringRaw = null;
        $liquidationPrice = null;
        if ($notionalFloat === 0.0) {
            $entryPrice = null;
        } else {
            $side = ($notionalFloat < 0) ? 'short' : 'long';
            $marginRatio = $this->parse_number(Precise::string_div(Precise::string_add(Precise::string_div($maintenanceMarginString, $collateralString), '5e-5'), '1', 4));
            $percentage = $this->parse_number(Precise::string_mul(Precise::string_div($unrealizedPnlString, $initialMarginString, 4), '100'));
            if ($usdm) {
                // calculate liquidation price
                //
                // $liquidationPrice = ($walletBalance / ($contracts * (±1 . mmp))) . (±$entryPrice / (±1 . mmp))
                //
                // mmp = $maintenanceMarginPercentage
                // where ± is negative for long and positive for short
                // TODO => calculate liquidation price for coinm $contracts
                $onePlusMaintenanceMarginPercentageString = null;
                $entryPriceSignString = $entryPriceString;
                if ($side === 'short') {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_add('1', $maintenanceMarginPercentageString);
                } else {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_add('-1', $maintenanceMarginPercentageString);
                    $entryPriceSignString = Precise::string_mul('-1', $entryPriceSignString);
                }
                $leftSide = Precise::string_div($walletBalance, Precise::string_mul($contractsStringAbs, $onePlusMaintenanceMarginPercentageString));
                $rightSide = Precise::string_div($entryPriceSignString, $onePlusMaintenanceMarginPercentageString);
                $liquidationPriceStringRaw = Precise::string_add($leftSide, $rightSide);
            } else {
                // calculate liquidation price
                //
                // $liquidationPrice = ($contracts * contractSize(±1 - mmp)) / (±1/entryPrice * $contracts * contractSize - $walletBalance)
                //
                $onePlusMaintenanceMarginPercentageString = null;
                $entryPriceSignString = $entryPriceString;
                if ($side === 'short') {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_sub('1', $maintenanceMarginPercentageString);
                } else {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_sub('-1', $maintenanceMarginPercentageString);
                    $entryPriceSignString = Precise::string_mul('-1', $entryPriceSignString);
                }
                $size = Precise::string_mul($contractsStringAbs, $market['contractSize']);
                $leftSide = Precise::string_mul($size, $onePlusMaintenanceMarginPercentageString);
                $rightSide = Precise::string_sub(Precise::string_mul(Precise::string_div('1', $entryPriceSignString), $size), $walletBalance);
                $liquidationPriceStringRaw = Precise::string_div($leftSide, $rightSide);
            }
            $pricePrecision = $market['precision']['price'];
            $pricePrecisionPlusOne = $pricePrecision + 1;
            $pricePrecisionPlusOneString = (string) $pricePrecisionPlusOne;
            // round half up
            $rounder = new Precise ('5e-' . $pricePrecisionPlusOneString);
            $rounderString = (string) $rounder;
            $liquidationPriceRoundedString = Precise::string_add($rounderString, $liquidationPriceStringRaw);
            $truncatedLiquidationPrice = Precise::string_div($liquidationPriceRoundedString, '1', $pricePrecision);
            if ($truncatedLiquidationPrice[0] === '-') {
                // user cannot be liquidated
                // since he has more $collateral than the $size of the $position
                $truncatedLiquidationPrice = null;
            }
            $liquidationPrice = $this->parse_number($truncatedLiquidationPrice);
        }
        $positionSide = $this->safe_string($position, 'positionSide');
        $hedged = $positionSide !== 'BOTH';
        return array(
            'info' => $position,
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'initialMargin' => $initialMargin,
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentageString),
            'maintenanceMargin' => $maintenanceMargin,
            'maintenanceMarginPercentage' => $maintenanceMarginPercentage,
            'entryPrice' => $entryPrice,
            'notional' => $notional,
            'leverage' => $this->parse_number($leverageString),
            'unrealizedPnl' => $unrealizedPnl,
            'contracts' => $contracts,
            'contractSize' => $this->parse_number($market['contractSize']),
            'marginRatio' => $marginRatio,
            'liquidationPrice' => $liquidationPrice,
            'markPrice' => null,
            'collateral' => $collateral,
            'marginType' => $marginType,
            'side' => $side,
            'hedged' => $hedged,
            'percentage' => $percentage,
        );
    }

    public function parse_position_risk($position, $market = null) {
        //
        // usdm
        //     {
        //       "symbol" => "BTCUSDT",
        //       "positionAmt" => "0.001",
        //       "entryPrice" => "43578.07000",
        //       "markPrice" => "43532.30000000",
        //       "unRealizedProfit" => "-0.04577000",
        //       "liquidationPrice" => "21841.24993976",
        //       "leverage" => "2",
        //       "maxNotionalValue" => "300000000",
        //       "marginType" => "isolated",
        //       "isolatedMargin" => "21.77841506",
        //       "isAutoAddMargin" => "false",
        //       "positionSide" => "BOTH",
        //       "notional" => "43.53230000",
        //       "isolatedWallet" => "21.82418506",
        //       "updateTime" => "1621358023886"
        //     }
        //
        // coinm
        //     {
        //       "symbol" => "BTCUSD_PERP",
        //       "positionAmt" => "2",
        //       "entryPrice" => "37643.10000021",
        //       "markPrice" => "38103.05510455",
        //       "unRealizedProfit" => "0.00006413",
        //       "liquidationPrice" => "25119.97445760",
        //       "leverage" => "2",
        //       "maxQty" => "1500",
        //       "marginType" => "isolated",
        //       "isolatedMargin" => "0.00274471",
        //       "isAutoAddMargin" => "false",
        //       "positionSide" => "BOTH",
        //       "notionalValue" => "0.00524892",
        //       "isolatedWallet" => "0.00268058"
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $leverageBrackets = $this->safe_value($this->options, 'leverageBrackets', array());
        $leverageBracket = $this->safe_value($leverageBrackets, $symbol, array());
        $notionalString = $this->safe_string_2($position, 'notional', 'notionalValue');
        $notionalStringAbs = Precise::string_abs($notionalString);
        $notionalFloatAbs = floatval($notionalStringAbs);
        $notionalFloat = floatval($notionalString);
        $maintenanceMarginPercentageString = null;
        for ($i = 0; $i < count($leverageBracket); $i++) {
            $bracket = $leverageBracket[$i];
            if ($notionalFloatAbs < $bracket[0]) {
                break;
            }
            $maintenanceMarginPercentageString = $bracket[1];
        }
        $notional = $this->parse_number($notionalStringAbs);
        $contractsAbs = Precise::string_abs($this->safe_string($position, 'positionAmt'));
        $contracts = $this->parse_number($contractsAbs);
        $unrealizedPnlString = $this->safe_string($position, 'unRealizedProfit');
        $unrealizedPnl = $this->parse_number($unrealizedPnlString);
        $leverageString = $this->safe_string($position, 'leverage');
        $leverage = intval($leverageString);
        $liquidationPriceString = $this->omit_zero($this->safe_string($position, 'liquidationPrice'));
        $liquidationPrice = $this->parse_number($liquidationPriceString);
        $collateralString = null;
        $marginType = $this->safe_string($position, 'marginType');
        $side = null;
        if ($notionalFloat > 0) {
            $side = 'long';
        } else if ($notionalFloat < 0) {
            $side = 'short';
        }
        $entryPriceString = $this->safe_string($position, 'entryPrice');
        $entryPrice = $this->parse_number($entryPriceString);
        if ($marginType === 'cross') {
            // calculate $collateral
            if ($market['linear']) {
                // walletBalance = ($liquidationPrice * (±1 . mmp) ± $entryPrice) * $contracts
                $onePlusMaintenanceMarginPercentageString = null;
                $entryPriceSignString = $entryPriceString;
                if ($side === 'short') {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_add('1', $maintenanceMarginPercentageString);
                    $entryPriceSignString = Precise::string_mul('-1', $entryPriceSignString);
                } else {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_add('-1', $maintenanceMarginPercentageString);
                }
                $inner = Precise::string_mul($liquidationPriceString, $onePlusMaintenanceMarginPercentageString);
                $leftSide = Precise::string_add($inner, $entryPriceSignString);
                $collateralString = Precise::string_div(Precise::string_mul($leftSide, $contractsAbs), '1', $market['precision']['quote']);
            } else {
                // walletBalance = ($contracts * contractSize) * (±1/entryPrice - (±1 - mmp) / $liquidationPrice)
                $onePlusMaintenanceMarginPercentageString = null;
                $entryPriceSignString = $entryPriceString;
                if ($side === 'short') {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_sub('1', $maintenanceMarginPercentageString);
                } else {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_sub('-1', $maintenanceMarginPercentageString);
                    $entryPriceSignString = Precise::string_mul('-1', $entryPriceSignString);
                }
                $leftSide = Precise::string_mul($contractsAbs, $market['contractSize']);
                $rightSide = Precise::string_sub(Precise::string_div('1', $entryPriceSignString), Precise::string_div($onePlusMaintenanceMarginPercentageString, $liquidationPriceString));
                $collateralString = Precise::string_div(Precise::string_mul($leftSide, $rightSide), '1', $market['precision']['base']);
            }
        } else {
            $collateralString = $this->safe_string($position, 'isolatedMargin');
        }
        $collateralString = ($collateralString === null) ? '0' : $collateralString;
        $collateralFloat = floatval($collateralString);
        $collateral = $this->parse_number($collateralString);
        $markPrice = $this->parse_number($this->omit_zero($this->safe_string($position, 'markPrice')));
        $timestamp = $this->safe_integer($position, 'updateTime');
        if ($timestamp === 0) {
            $timestamp = null;
        }
        $maintenanceMarginPercentage = $this->parse_number($maintenanceMarginPercentageString);
        $maintenanceMarginString = Precise::string_mul($maintenanceMarginPercentageString, $notionalStringAbs);
        $maintenanceMargin = $this->parse_number($maintenanceMarginString);
        $initialMarginPercentageString = Precise::string_div('1', $leverageString, 8);
        $rational = (fmod(1000, $leverage)) === 0;
        if (!$rational) {
            $initialMarginPercentageString = Precise::string_add($initialMarginPercentageString, '1e-8');
        }
        $initialMarginString = Precise::string_div(Precise::string_mul($notionalStringAbs, $initialMarginPercentageString), '1', 8);
        $initialMargin = $this->parse_number($initialMarginString);
        $marginRatio = null;
        $percentage = null;
        if ($collateralFloat !== 0.0) {
            $marginRatio = $this->parse_number(Precise::string_div(Precise::string_add(Precise::string_div($maintenanceMarginString, $collateralString), '5e-5'), '1', 4));
            $percentage = $this->parse_number(Precise::string_mul(Precise::string_div($unrealizedPnlString, $initialMarginString, 4), '100'));
        }
        $positionSide = $this->safe_string($position, 'positionSide');
        $hedged = $positionSide !== 'BOTH';
        return array(
            'info' => $position,
            'symbol' => $symbol,
            'contracts' => $contracts,
            'contractSize' => $this->parse_number($market['contractSize']),
            'unrealizedPnl' => $unrealizedPnl,
            'leverage' => $this->parse_number($leverageString),
            'liquidationPrice' => $liquidationPrice,
            'collateral' => $collateral,
            'notional' => $notional,
            'markPrice' => $markPrice,
            'entryPrice' => $entryPrice,
            'timestamp' => $timestamp,
            'initialMargin' => $initialMargin,
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentageString),
            'maintenanceMargin' => $maintenanceMargin,
            'maintenanceMarginPercentage' => $maintenanceMarginPercentage,
            'marginRatio' => $marginRatio,
            'datetime' => $this->iso8601($timestamp),
            'marginType' => $marginType,
            'side' => $side,
            'hedged' => $hedged,
            'percentage' => $percentage,
        );
    }

    public function load_leverage_brackets($reload = false, $params = array ()) {
        $this->load_markets();
        // by default cache the leverage $bracket
        // it contains useful stuff like the maintenance margin and initial margin for positions
        $leverageBrackets = $this->safe_value($this->options, 'leverageBrackets');
        if (($leverageBrackets === null) || ($reload)) {
            $method = null;
            $defaultType = $this->safe_string($this->options, 'defaultType', 'future');
            $type = $this->safe_string($params, 'type', $defaultType);
            $query = $this->omit($params, 'type');
            if ($type === 'future') {
                $method = 'fapiPrivateGetLeverageBracket';
            } else if ($type === 'delivery') {
                $method = 'dapiPrivateV2GetLeverageBracket';
            } else {
                throw new NotSupported($this->id . ' loadLeverageBrackets() supports linear and inverse contracts only');
            }
            $response = $this->$method ($query);
            $this->options['leverageBrackets'] = array();
            for ($i = 0; $i < count($response); $i++) {
                $entry = $response[$i];
                $marketId = $this->safe_string($entry, 'symbol');
                $symbol = $this->safe_symbol($marketId);
                $brackets = $this->safe_value($entry, 'brackets');
                $result = array();
                for ($j = 0; $j < count($brackets); $j++) {
                    $bracket = $brackets[$j];
                    // we use floats here internally on purpose
                    $floorValue = $this->safe_float_2($bracket, 'notionalFloor', 'qtyFloor');
                    $maintenanceMarginPercentage = $this->safe_string($bracket, 'maintMarginRatio');
                    $result[] = array( $floorValue, $maintenanceMarginPercentage );
                }
                $this->options['leverageBrackets'][$symbol] = $result;
            }
        }
        return $this->options['leverageBrackets'];
    }

    public function fetch_positions($symbols = null, $params = array ()) {
        $defaultMethod = $this->safe_string($this->options, 'fetchPositions', 'positionRisk');
        if ($defaultMethod === 'positionRisk') {
            return $this->fetch_positions_risk($symbols, $params);
        } else if ($defaultMethod === 'account') {
            return $this->fetch_account_positions($symbols, $params);
        } else {
            throw new NotSupported($this->id . '.options["fetchPositions"] = "' . $defaultMethod . '" is invalid, please choose between "account" and "positionRisk"');
        }
    }

    public function fetch_account_positions($symbols = null, $params = array ()) {
        if ($symbols !== null) {
            if (gettype($symbols) === 'array' && count(array_filter(array_keys($symbols), 'is_string')) != 0) {
                throw new ArgumentsRequired($this->id . ' fetchPositions requires an array argument for symbols');
            }
        }
        $this->load_markets();
        $this->load_leverage_brackets();
        $method = null;
        $defaultType = $this->safe_string($this->options, 'defaultType', 'future');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        if ($type === 'future') {
            $method = 'fapiPrivateGetAccount';
        } else if ($type === 'delivery') {
            $method = 'dapiPrivateGetAccount';
        } else {
            throw new NotSupported($this->id . ' fetchPositions() supports linear and inverse contracts only');
        }
        $account = $this->$method ($query);
        $result = $this->parse_account_positions ($account);
        return $this->filter_by_array($result, 'symbol', $symbols, false);
    }

    public function fetch_positions_risk($symbols = null, $params = array ()) {
        if ($symbols !== null) {
            if (gettype($symbols) === 'array' && count(array_filter(array_keys($symbols), 'is_string')) != 0) {
                throw new ArgumentsRequired($this->id . ' fetchPositionsRisk requires an array argument for symbols');
            }
        }
        $this->load_markets();
        $this->load_leverage_brackets();
        $request = array();
        $method = null;
        $defaultType = 'future';
        $defaultType = $this->safe_string($this->options, 'defaultType', $defaultType);
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, 'type');
        if (($type === 'future') || ($type === 'linear')) {
            $method = 'fapiPrivateGetPositionRisk';
        } else if (($type === 'delivery') || ($type === 'inverse')) {
            $method = 'dapiPrivateGetPositionRisk';
        } else {
            throw NotSupported ($this->id . ' fetchPositionsRisk() supports linear and inverse contracts only');
        }
        $response = $this->$method (array_merge($request, $params));
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $parsed = $this->parse_position_risk ($response[$i]);
            $result[] = $parsed;
        }
        return $this->filter_by_array($result, 'symbol', $symbols, false);
    }

    public function fetch_funding_history($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        $method = null;
        $defaultType = 'future';
        $request = array(
            'incomeType' => 'FUNDING_FEE', // "TRANSFER"，"WELCOME_BONUS", "REALIZED_PNL"，"FUNDING_FEE", "COMMISSION" and "INSURANCE_CLEAR"
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
            if ($market['linear']) {
                $defaultType = 'future';
            } else if ($market['inverse']) {
                $defaultType = 'delivery';
            } else {
                throw NotSupported ($this->id . ' fetchFundingHistory() supports linear and inverse contracts only');
            }
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $defaultType = $this->safe_string_2($this->options, 'fetchFundingHistory', 'defaultType', $defaultType);
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, 'type');
        if (($type === 'future') || ($type === 'linear')) {
            $method = 'fapiPrivateGetIncome';
        } else if (($type === 'delivery') || ($type === 'inverse')) {
            $method = 'dapiPrivateGetIncome';
        } else {
            throw NotSupported ($this->id . ' fetchFundingHistory() supports linear and inverse contracts only');
        }
        $response = $this->$method (array_merge($request, $params));
        return $this->parse_incomes ($response, $market, $since, $limit);
    }

    public function set_leverage($leverage, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        // WARNING => THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        if (($leverage < 1) || ($leverage > 125)) {
            throw new BadRequest($this->id . ' $leverage should be between 1 and 125');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $method = null;
        if ($market['linear']) {
            $method = 'fapiPrivatePostLeverage';
        } else if ($market['inverse']) {
            $method = 'dapiPrivatePostLeverage';
        } else {
            throw new NotSupported($this->id . ' setLeverage() supports linear and inverse contracts only');
        }
        $request = array(
            'symbol' => $market['id'],
            'leverage' => $leverage,
        );
        return $this->$method (array_merge($request, $params));
    }

    public function set_margin_mode($marginType, $symbol = null, $params = array ()) {
        //
        // array( "code" => -4048 , "msg" => "Margin type cannot be changed if there exists position." )
        //
        // or
        //
        // array( "code" => 200, "msg" => "success" )
        //
        $marginType = strtoupper($marginType);
        if (($marginType !== 'ISOLATED') && ($marginType !== 'CROSSED')) {
            throw new BadRequest($this->id . ' $marginType must be either isolated or crossed');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $method = null;
        if ($market['linear']) {
            $method = 'fapiPrivatePostMarginType';
        } else if ($market['inverse']) {
            $method = 'dapiPrivatePostMarginType';
        } else {
            throw NotSupported ($this->id . ' setMarginMode() supports linear and inverse contracts only');
        }
        $request = array(
            'symbol' => $market['id'],
            'marginType' => $marginType,
        );
        return $this->$method (array_merge($request, $params));
    }

    public function set_position_mode($hedged, $symbol = null, $params = array ()) {
        $defaultType = $this->safe_string($this->options, 'defaultType', 'future');
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, array( 'type' ));
        $dualSidePosition = null;
        if ($hedged) {
            $dualSidePosition = 'true';
        } else {
            $dualSidePosition = 'false';
        }
        $request = array(
            'dualSidePosition' => $dualSidePosition,
        );
        $method = null;
        if ($type === 'delivery') {
            $method = 'dapiPrivatePostPositionSideDual';
        } else {
            // default to future
            $method = 'fapiPrivatePostPositionSideDual';
        }
        //
        //     {
        //       "code" => 200,
        //       "msg" => "success"
        //     }
        //
        return $this->$method (array_merge($request, $params));
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        if (!(is_array($this->urls['api']) && array_key_exists($api, $this->urls['api']))) {
            throw new NotSupported($this->id . ' does not have a testnet/sandbox URL for ' . $api . ' endpoints');
        }
        $url = $this->urls['api'][$api];
        $url .= '/' . $path;
        if ($api === 'wapi') {
            $url .= '.html';
        }
        if ($path === 'historicalTrades') {
            if ($this->apiKey) {
                $headers = array(
                    'X-MBX-APIKEY' => $this->apiKey,
                );
            } else {
                throw new AuthenticationError($this->id . ' historicalTrades endpoint requires `apiKey` credential');
            }
        }
        $userDataStream = ($path === 'userDataStream') || ($path === 'listenKey');
        if ($userDataStream) {
            if ($this->apiKey) {
                // v1 special case for $userDataStream
                $headers = array(
                    'X-MBX-APIKEY' => $this->apiKey,
                    'Content-Type' => 'application/x-www-form-urlencoded',
                );
                if ($method !== 'GET') {
                    $body = $this->urlencode($params);
                }
            } else {
                throw new AuthenticationError($this->id . ' $userDataStream endpoint requires `apiKey` credential');
            }
        } else if (($api === 'private') || ($api === 'sapi') || ($api === 'wapi' && $path !== 'systemStatus') || ($api === 'dapiPrivate') || ($api === 'dapiPrivateV2') || ($api === 'fapiPrivate') || ($api === 'fapiPrivateV2')) {
            $this->check_required_credentials();
            $query = null;
            $recvWindow = $this->safe_integer($this->options, 'recvWindow', 5000);
            if (($api === 'sapi') && ($path === 'asset/dust')) {
                $query = $this->urlencode_with_array_repeat(array_merge(array(
                    'timestamp' => $this->nonce(),
                    'recvWindow' => $recvWindow,
                ), $params));
            } else if (($path === 'batchOrders') || (mb_strpos($path, 'sub-account') !== false)) {
                $query = $this->rawencode(array_merge(array(
                    'timestamp' => $this->nonce(),
                    'recvWindow' => $recvWindow,
                ), $params));
            } else {
                $query = $this->urlencode(array_merge(array(
                    'timestamp' => $this->nonce(),
                    'recvWindow' => $recvWindow,
                ), $params));
            }
            $signature = $this->hmac($this->encode($query), $this->encode($this->secret));
            $query .= '&' . 'signature=' . $signature;
            $headers = array(
                'X-MBX-APIKEY' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'DELETE') || ($api === 'wapi')) {
                $url .= '?' . $query;
            } else {
                $body = $query;
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (($code === 418) || ($code === 429)) {
            throw new DDoSProtection($this->id . ' ' . (string) $code . ' ' . $reason . ' ' . $body);
        }
        // $error $response in a form => array( "code" => -1013, "msg" => "Invalid quantity." )
        // following block cointains legacy checks against $message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if ($code >= 400) {
            if (mb_strpos($body, 'Price * QTY is zero or less') !== false) {
                throw new InvalidOrder($this->id . ' order cost = amount * price is zero or less ' . $body);
            }
            if (mb_strpos($body, 'LOT_SIZE') !== false) {
                throw new InvalidOrder($this->id . ' order amount should be evenly divisible by lot size ' . $body);
            }
            if (mb_strpos($body, 'PRICE_FILTER') !== false) {
                throw new InvalidOrder($this->id . ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use $this->price_to_precision(symbol, amount) ' . $body);
            }
        }
        if ($response === null) {
            return; // fallback to default $error handler
        }
        // check $success value for wapi endpoints
        // $response in format array('msg' => 'The coin does not exist.', 'success' => true/false)
        $success = $this->safe_value($response, 'success', true);
        if (!$success) {
            $message = $this->safe_string($response, 'msg');
            $parsedMessage = null;
            if ($message !== null) {
                try {
                    $parsedMessage = json_decode($message, $as_associative_array = true);
                } catch (Exception $e) {
                    // do nothing
                    $parsedMessage = null;
                }
                if ($parsedMessage !== null) {
                    $response = $parsedMessage;
                }
            }
        }
        $message = $this->safe_string($response, 'msg');
        if ($message !== null) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $this->id . ' ' . $message);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $this->id . ' ' . $message);
        }
        // checks against $error codes
        $error = $this->safe_string($response, 'code');
        if ($error !== null) {
            // https://github.com/ccxt/ccxt/issues/6501
            // https://github.com/ccxt/ccxt/issues/7742
            if (($error === '200') || Precise::string_equals($error, '0')) {
                return;
            }
            // a workaround for array("code":-2015,"msg":"Invalid API-key, IP, or permissions for action.")
            // despite that their $message is very confusing, it is raised by Binance
            // on a temporary ban, the API key is valid, but disabled for a while
            if (($error === '-2015') && $this->options['hasAlreadyAuthenticatedSuccessfully']) {
                throw new DDoSProtection($this->id . ' temporary banned => ' . $body);
            }
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $error, $feedback);
            throw new ExchangeError($feedback);
        }
        if (!$success) {
            throw new ExchangeError($this->id . ' ' . $body);
        }
    }

    public function calculate_rate_limiter_cost($api, $method, $path, $params, $config = array (), $context = array ()) {
        if ((is_array($config) && array_key_exists('noSymbol', $config)) && !(is_array($params) && array_key_exists('symbol', $params))) {
            return $config['noSymbol'];
        } else if ((is_array($config) && array_key_exists('noPoolId', $config)) && !(is_array($params) && array_key_exists('poolId', $params))) {
            return $config['noPoolId'];
        } else if ((is_array($config) && array_key_exists('byLimit', $config)) && (is_array($params) && array_key_exists('limit', $params))) {
            $limit = $params['limit'];
            $byLimit = $config['byLimit'];
            for ($i = 0; $i < count($byLimit); $i++) {
                $entry = $byLimit[$i];
                if ($limit <= $entry[0]) {
                    return $entry[1];
                }
            }
        }
        return $this->safe_integer($config, 'cost', 1);
    }

    public function request($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null, $config = array (), $context = array ()) {
        $response = $this->fetch2($path, $api, $method, $params, $headers, $body, $config, $context);
        // a workaround for array("code":-2015,"msg":"Invalid API-key, IP, or permissions for action.")
        if (($api === 'private') || ($api === 'wapi')) {
            $this->options['hasAlreadyAuthenticatedSuccessfully'] = true;
        }
        return $response;
    }

    public function modify_margin_helper($symbol, $amount, $addOrReduce, $params = array ()) {
        // used to modify isolated positions
        $defaultType = $this->safe_string($this->options, 'defaultType', 'future');
        if ($defaultType === 'spot') {
            $defaultType = 'future';
        }
        $type = $this->safe_string($params, 'type', $defaultType);
        if (($type === 'margin') || ($type === 'spot')) {
            throw new NotSupported($this->id . ' add / reduce margin only supported with $type future or delivery');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'type' => $addOrReduce,
            'symbol' => $market['id'],
            'amount' => $amount,
        );
        $method = null;
        $code = null;
        if ($type === 'future') {
            $method = 'fapiPrivatePostPositionMargin';
            $code = $market['quote'];
        } else {
            $method = 'dapiPrivatePostPositionMargin';
            $code = $market['base'];
        }
        $response = $this->$method (array_merge($request, $params));
        //
        //     {
        //       "code" => 200,
        //       "msg" => "Successfully modify position margin.",
        //       "amount" => 0.001,
        //       "type" => 1
        //     }
        //
        $rawType = $this->safe_integer($response, 'type');
        $resultType = ($rawType === 1) ? 'add' : 'reduce';
        $resultAmount = $this->safe_number($response, 'amount');
        $errorCode = $this->safe_string($response, 'code');
        $status = ($errorCode === '200') ? 'ok' : 'failed';
        return array(
            'info' => $response,
            'type' => $resultType,
            'amount' => $resultAmount,
            'code' => $code,
            'symbol' => $market['symbol'],
            'status' => $status,
        );
    }

    public function reduce_margin($symbol, $amount, $params = array ()) {
        return $this->modify_margin_helper($symbol, $amount, 2, $params);
    }

    public function add_margin($symbol, $amount, $params = array ()) {
        return $this->modify_margin_helper($symbol, $amount, 1, $params);
    }

    public function fetch_borrow_rate($code, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'asset' => $currency['id'],
            // 'vipLevel' => $this->safe_integer($params, 'vipLevel'),
        );
        $response = $this->sapiGetMarginInterestRateHistory (array_merge($request, $params));
        //
        // array(
        //     array(
        //         "asset" => "USDT",
        //         "timestamp" => 1638230400000,
        //         "dailyInterestRate" => "0.0006",
        //         "vipLevel" => 0
        //     ),
        //     ...
        // )
        //
        $rate = $this->safe_value($response, 0);
        $timestamp = $this->safe_number($rate, 'timestamp');
        return array(
            'currency' => $code,
            'rate' => $this->safe_number($rate, 'dailyInterestRate'),
            'period' => 86400000,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $response,
        );
    }

    public function fetch_borrow_rate_history($code, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        if ($limit === null) {
            $limit = 93;
        } else if ($limit > 93) {
            // Binance API says the $limit is 100, but "Illegal characters found in a parameter." is returned when $limit is > 93
            throw new BadRequest($this->id . ' fetchBorrowRateHistory $limit parameter cannot exceed 92');
        }
        $currency = $this->currency($code);
        $request = array(
            'asset' => $currency['id'],
            'limit' => $limit,
        );
        if ($since !== null) {
            $request['startTime'] = $since;
            $endTime = $this->sum($since, $limit * 86400000) - 1; // required when startTime is further than 93 days in the past
            $now = $this->milliseconds();
            $request['endTime'] = min ($endTime, $now); // cannot have an $endTime later than current time
        }
        $response = $this->sapiGetMarginInterestRateHistory (array_merge($request, $params));
        //
        //     array(
        //         array(
        //             "asset" => "USDT",
        //             "timestamp" => 1638230400000,
        //             "dailyInterestRate" => "0.0006",
        //             "vipLevel" => 0
        //         ),
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $item = $response[$i];
            $timestamp = $this->safe_number($item, 'timestamp');
            $result[] = array(
                'currency' => $code,
                'rate' => $this->safe_number($item, 'dailyInterestRate'),
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
                'info' => $item,
            );
        }
        return $result;
    }
}
